<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>说明</title>
      <link href="/6666/06/06/shuo-ming/"/>
      <url>/6666/06/06/shuo-ming/</url>
      
        <content type="html"><![CDATA[<p>（仍在完善。。。）</p><h3 id="文章说明"><a href="#文章说明" class="headerlink" title="文章说明"></a>文章说明</h3><h4 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h4><p>功能暂不开启</p><h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><p>功能暂不开启</p><h4 id="图片加载失败"><a href="#图片加载失败" class="headerlink" title="图片加载失败"></a>图片加载失败</h4><ul><li>刷新网页。</li></ul><p>若仍然失败，将图片加载失败图标拖到搜索栏后，会变成图片原本地址。当图片加载出来后，刷新原文文章即可。</p><h4 id="密码文章"><a href="#密码文章" class="headerlink" title="密码文章"></a>密码文章</h4><p>本人博客查看密码文章步骤有些繁琐。</p><ul><li>进入网页时输入第一次密码</li><li>进入网页后，文章需要输入第二次密码</li><li>这时文章可以观看，但数学符号渲染不到位</li><li>刷新网页（第二次密码会保存）</li><li>刷新网页后再次输入进入网页密码</li><li>观看文章</li></ul><p>若需要刷新，取消文章（第二次密码）的保存，点击文章底部篮框 $Encrypt$ $again$ 的标识即可。</p><p>加密文章暂时无法使用目录功能。</p><h4 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h4><p>QQ：$1054942544$（要加备注）</p><p>如果发现文章有问题或者有更好的意见，欢迎建议与指正。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中值定理&amp;泰勒展开&amp;洛必达法则&amp;函数凹凸及绘制</title>
      <link href="/2021/12/12/zhong-zhi-ding-li-tai-le-zhan-kai-luo-bi-da-fa-ze-han-shu-ao-tu-ji-hui-zhi/"/>
      <url>/2021/12/12/zhong-zhi-ding-li-tai-le-zhan-kai-luo-bi-da-fa-ze-han-shu-ao-tu-ji-hui-zhi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://wdsa001.github.io/2021/12/11/wei-fen-ji-chu/">微分基础</a></p><h2 id="中值定理"><a href="#中值定理" class="headerlink" title="中值定理"></a>中值定理</h2><h3 id="费马引理"><a href="#费马引理" class="headerlink" title="费马引理"></a>费马引理</h3><p>$f(x)$ 在 $x_0$，$U(x_0)$ 有定义，在 $x_0$ 处可导，如 $f(x)\le f(x_0),\forall x\in U(x_0)$，则 $f^{‘}{(x_0)}=0$。</p><p>设 $x\in U(x_0),f(x)\le f(x_0)$</p><script type="math/tex; mode=display">x_0+\Delta x\in U(x_0)</script><script type="math/tex; mode=display">f(x_0+\Delta x)\le f(x_0)</script><script type="math/tex; mode=display">f^{'}_{-}{x_0}=\lim_{\Delta x\to 0^{-}}{\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}}\ge0</script><script type="math/tex; mode=display">f^{'}_{+}{x_0}=\lim_{\Delta x\to 0^{+}}{\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}}\ge0</script><script type="math/tex; mode=display">f^{'}{(x_0)}=0</script><p>驻点：导数为 $0$ 的点。</p><p><img src="https://s4.ax1x.com/2021/12/12/obI2o6.png" alt="驻点1"></p><p><img src="https://s4.ax1x.com/2021/12/12/obIWFK.png" alt="驻点2"></p><p><img src="https://s4.ax1x.com/2021/12/12/obIfJO.png" alt="驻点3"></p><h3 id="罗尔中值定理"><a href="#罗尔中值定理" class="headerlink" title="罗尔中值定理"></a>罗尔中值定理</h3><p>$f(x)$ 满足：</p><ul><li><p>在 $[a,b]$ 连续</p></li><li><p>$(a,b)$ 可导</p></li><li><p>$f(a)=f(b)$</p></li></ul><p>则至少 $\exists \xi\in(a,b),f^{‘}{(\xi)}=0$</p><p><img src="https://s4.ax1x.com/2021/12/12/obIBz4.png" alt="罗尔"></p><p>（通俗：两点的 $y$ 值相等，不管中间的线的路径是什么，至少有一点的斜率为 $0$）</p><h3 id="拉格朗日中值定理"><a href="#拉格朗日中值定理" class="headerlink" title="拉格朗日中值定理"></a>拉格朗日中值定理</h3><ul><li><p>$[a,b]$ 连续</p></li><li><p>$(a,b)$ 可导</p></li></ul><p>$(a,b)$ 至少有一点 $f(b)-f(a)=f^{‘}{(\xi)}(b-a)$</p><p><img src="https://s4.ax1x.com/2021/12/12/obIyLR.png" alt="拉格朗日"></p><p>（通俗：有两点，不管中间的线的路径是什么，至少有一点的斜率与两点组成的一次函数的斜率相同）</p><ul><li>定理：$f(x)$ 在区间 $I$ 连续，$I$ 内可导，且导数恒为 $0$，$f(x)=c$。</li></ul><script type="math/tex; mode=display">\forall x_1.x_2,\xi \in(x_1,x_2)</script><script type="math/tex; mode=display">f(x_1)-f(x_2)=f^{'}{(\xi)}(x_1-x_2)</script><script type="math/tex; mode=display">f(x_1)=f(x_2)</script><script type="math/tex; mode=display">f(x)=c</script><p>（$c$ 为常数。）</p><h3 id="柯西中值定理"><a href="#柯西中值定理" class="headerlink" title="柯西中值定理"></a>柯西中值定理</h3><ul><li><p>若 $f(x)$ 和 $F(x)$</p></li><li><p>$[a,b]$ 连续</p></li><li><p>$(a,b)$ 可导</p></li><li><p>$\forall x\in (a,b),F^{‘}{(x)}\not=0$</p></li></ul><p>至少有一点 $\xi$</p><script type="math/tex; mode=display">\frac{f(b)-f(a)}{F(b)-F(a)}=\frac{f^{'}{(\xi)}}{F^{'}{(\xi)}}</script><ul><li><p>总结：</p></li><li><p>罗尔中值定理： $f^{‘}{(\xi)}=0$</p></li><li><p>拉格朗日中值定理：$f^{‘}{(\xi)}=\dfrac{f(b)-f(a)}{b-a}$</p></li><li><p>柯西中值定理：$\dfrac{f(b)-f(a)}{F(b)-F(a)}=\dfrac{f^{‘}{(\xi)}}{F^{‘}{(\xi)}}$</p></li></ul><h2 id="泰勒展开"><a href="#泰勒展开" class="headerlink" title="泰勒展开"></a>泰勒展开</h2><script type="math/tex; mode=display">f(x)-f(x_0)\approx f^{'}{(x_0)}(x-x_0)</script><script type="math/tex; mode=display">dy\approx f^{'}{(x_0)}dx</script><script type="math/tex; mode=display">f(x)\approx f(x_0)+f^{'}{(x_0)}(x-x_0)</script><ul><li>定理：$f(x)$ 表示成 $x-x_0$ 的 $n$ 的多项式 $+R_n(x)$（余项）</li></ul><script type="math/tex; mode=display">f(x)=f(x_0)+\frac{f^{'}{(x_0)}(x-x_0)}{1!}+\frac{f^{''}{(x_0)}(x-x_0)^2}{2!}+…+\frac{f^{n}{(x_0)}(x-x_0)^{n}}{n!}+R_n(x)</script><script type="math/tex; mode=display">R_n(x)=\frac{f^{(n+1)}{(\xi)}(x-x_0)^{n+1}}{(n+1)!}</script><p>$\xi$ 在 $x_0$ 和 $x$ 之间（拉格朗日型余项）。</p><h3 id="n-阶马克劳林公式"><a href="#n-阶马克劳林公式" class="headerlink" title="$n$ 阶马克劳林公式"></a>$n$ 阶马克劳林公式</h3><p><a href="https://wdsa001.github.io/2021/12/06/zi-ran-dui-shu-e/">自然对数 $e$</a></p><script type="math/tex; mode=display">f(x)=e^x</script><script type="math/tex; mode=display">f^{'}{(x)}=f^{''}{(x)}=…=f^{(n)}{(x)}=e^x</script><script type="math/tex; mode=display">f^{'}{(0)}=f^{''}{(0)}=…=f^{(n)}{(0)}=1</script><script type="math/tex; mode=display">e^x=1+\frac{x}{1!}+\frac{x^2}{2!}+\frac{x^3}{3!}+…+\frac{x^n}{n!}+R_n(x)</script><script type="math/tex; mode=display">R_n(x)=\frac{e^{\theta x}x^{n+1}}{(n+1)!}</script><script type="math/tex; mode=display">(0 < \theta < 1)e^{\theta x}=e^{\xi}(0 < \xi < x)</script><script type="math/tex; mode=display">|R_n(x)|<\dfrac{e^{|x|}x^{n+1}}{(n+1)!}</script><p>$e^{|x|}$ 是定值，$x^{n+1}\to 0(x\to 0)$，$(n+1)!$ 非常大。</p><script type="math/tex; mode=display">e^x\approx 1+\frac{x}{1!}+\frac{x^2}{2!}+\frac{x^3}{3!}+…+\frac{x^n}{n!}</script><p><img src="https://s4.ax1x.com/2021/12/12/obIce1.png" alt="泰勒展开"></p><p>（最上面的黑线是 $y=e^x$）</p><ul><li><script type="math/tex; mode=display">f(x)=\sin x</script></li></ul><script type="math/tex; mode=display">\sin x=x-\frac{1}{3!}x^3+\frac{1}{5!}x^5+…+\frac{(-1)^{m-1}}{(2m-1)!}x^{2m-1}+R_{2m}{(x)}</script><h2 id="洛必达法则"><a href="#洛必达法则" class="headerlink" title="洛必达法则"></a>洛必达法则</h2><script type="math/tex; mode=display">f(x)\to 0,g(x) \to 0,\frac{f(x)}{g(x)},\frac{0}{0}</script><script type="math/tex; mode=display">f(x)\to \infty,g(x) \to \infty,\frac{f(x)}{g(x)},\frac{\infty}{\infty}</script><p>若 $f(x),g(x)$ </p><script type="math/tex; mode=display">\lim_{x\to x_0}{f(x)}=\lim_{x-x_0}{g(x)}=0</script><p>在 $x_0$ 的邻域内（$x_0$ 可除外）可导，$g^{‘}{(x)}=0$</p><script type="math/tex; mode=display">\lim_{x-x_0}{\frac{f^{'}{(x)}}{g^{'}{(x)}}}=a</script><p>或者 $\infty$</p><script type="math/tex; mode=display">\lim_{x-x_0}{\frac{f{(x)}}{g{(x)}}}=\lim_{x-x_0}{\frac{f^{'}{(x)}}{g^{'}{(x)}}}=a</script><p>或者 $\infty$</p><p>证（柯西中值定理）：</p><ul><li><p>$f(x),g(x)$ 在 $[a,b]$ 连续</p></li><li><p>$f(x),g(x)$ 在 $(a,b)$ 可导 $(g^{‘}{(x)}\not =0)$</p></li></ul><script type="math/tex; mode=display">\frac{f(b)-f(a)}{g(b)-g(a)}=\frac{f^{'}{(\xi)}}{g^{'}{(\xi)}}</script><p>设在 $[x_0,x]$，$f(x_0)=g(x_0)=0$。</p><script type="math/tex; mode=display">\frac{f(x)}{g(x)}(x\to 0)=\frac{f(x)-f(x_0)}{g(x)-g(x_0)}=\frac{f^{'}{(x)}}{g^{'}{(x)}}</script><script type="math/tex; mode=display">\xi \in (x_0,x)</script><ul><li>连等：</li></ul><script type="math/tex; mode=display">x\to x_0,\xi \to x</script><script type="math/tex; mode=display">\lim_{x\to x_0}\frac{f(x)}{g(x)}=\lim_{x\to x_0}\frac{f^{'}{(x)}}{g^{'}{(x)}}=\lim_{x\to x_0}\frac{f^{''}{(x)}}{g^{''}{(x)}}=…</script><p>注意：只有 $\frac{0}{0}$ 和 $\frac{\infty}{\infty}$ 时才能用。</p><ul><li><p>练习：</p></li><li><p>$1$：</p></li></ul><script type="math/tex; mode=display">\lim_{x\to x_0}\frac{x-\sin x}{x^3}=\lim_{x\to x_0}\frac{1-\cos x}{3x^2}=\lim_{x\to x_0}\frac{\sin x}{6x}=\frac{1}{6}</script><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{\sin x}{x}}=\lim_{x\to 0}{\cos x}=1</script><ul><li>$2$：</li></ul><script type="math/tex; mode=display">\lim_{x\to 1}\frac{x^3-3x+2}{x^3-x^2-x+1}=\lim_{x\to 1}\frac{3x^2-3}{3x^2-2x-1}=\lim_{x\to 1}{\frac{6x}{6x-2}}=\frac{3}{2}</script><ul><li>$3$：</li></ul><script type="math/tex; mode=display">\lim_{x\to 0}\frac{\ln{(1+x)}}{x^2}=\lim_{x\to 0}\frac{\frac{1}{x+1}}{2x}=\lim_{x\to 0}\frac{1}{2x(x+1)}=\infty</script><ul><li>$\frac{\infty}{\infty}$ 和 $\frac{0}{0}$ 没有本质区别。</li></ul><script type="math/tex; mode=display">\lim_{x\to +\infty}\frac{x^4}{e^x}=\lim_{x\to +\infty}\frac{\frac{1}{e^x}}{\frac{1}{x^4}}</script><p>从 $\frac{\infty}{\infty}$ 转换到 $\frac{0}{0}$</p><ul><li><p>$\frac{\infty}{\infty}$</p></li><li><p>$1$：</p></li></ul><script type="math/tex; mode=display">\lim_{x\to +\infty}{\frac{\ln x}{\sqrt{x}}}=\lim_{x\to +\infty}{\frac{\frac{1}{x}}{\frac{1}{2\sqrt{x}}}}=\lim_{x\to +\infty}{\frac{2}{\sqrt{x}}}=0</script><ul><li>$2$：</li></ul><p>$a&gt;0,n$ 是正整数。</p><script type="math/tex; mode=display">\lim_{x\to +\infty}{\frac{x^n}{e^{a x}}}=\lim_{x\to +\infty}{\frac{nx^{n-1}}{ae^{a x}}}=\lim_{x\to +\infty}{\frac{n(n-1)x^{n-2}}{a^2e^{a x}}}=…=\lim_{x\to +\infty}{\frac{n!}{a^ne^{a x}}}=0</script><ul><li>$3$：</li></ul><p>$a&gt;0,n$ 是实数。</p><p>设 $n=2.5$：</p><script type="math/tex; mode=display">\lim_{x\to +\infty}{\frac{x^{2.5}}{e^{a x}}}=\lim_{x\to +\infty}{\frac{(2.5)x^{1.5}}{ae^{a x}}}=\lim_{x\to +\infty}{\frac{(2.5)\times(1.5)x^{0.5}}{a^2e^{a x}}}=\lim_{x\to +\infty}{\frac{2.5\times 1.5\times 0.5}{x^{0.5}a^3e^{a x}}}=0</script><ul><li><p>只有 $\frac{0}{0}$ 和 $\frac{\infty}{\infty}$ 才能用。</p></li><li><p>与重要极限，等价无穷小替换结合</p></li><li><p>若 $\lim{\dfrac{f^{‘}{(x)}}{g^{‘}{(x)}}=a}$ 或 $\infty$ 时。</p></li></ul><script type="math/tex; mode=display">\lim{\dfrac{f{(x)}}{g{(x)}}}=\lim{\dfrac{f^{'}{(x)}}{g^{'}{(x)}}}</script><p>但若 $\lim{\dfrac{f^{‘}{(x)}}{g^{‘}{(x)}}}$ 不存在，也不是 $\infty$ 时，不能说明 $\lim{\dfrac{f{(x)}}{g{(x)}}}$ 不存在，要换方法。</p><ul><li>等价无穷小替换（$sin x\sim x$）只有除时可以换！：</li></ul><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{x-\sin x}{x^2\sin x}}=\lim_{x\to 0}{\frac{x-\sin x}{x^3}}=\lim_{x\to 0}{\frac{1-\cos x}{3x^2}}=\frac{1}{6}</script><ul><li>先处理（注意 $x\to \infty$）：</li></ul><script type="math/tex; mode=display">\lim_{x\to \infty}{\frac{x+\sin x}{x}}=1+\lim_{x\to \infty}{\frac{\sin x}{x}}=1</script><ul><li>约分：</li></ul><script type="math/tex; mode=display">\lim_{x\to 0}{x^2e^{\frac{1}{x^2}}}=\lim_{x\to 0}{\frac{e^{\frac{1}{x^2}}}{\frac{1}{x^2}}}=\lim_{x\to 0}{\frac{-\frac{2}{x^3}e^{\frac{1}{x^2}}}{-\frac{2}{x^3}}}=\lim_{x\to 0}{e^{\frac{1}{x^2}}}=\infty</script><ul><li>无穷小替换：</li></ul><script type="math/tex; mode=display">\lim_{x\to 0^{+}}{x^x}=\lim_{x\to 0^{+}}{e^{x\ln x}}=\lim_{x\to 0^{+}}{e^{\frac{\ln x}{\frac{1}{x}}}}=\lim_{x\to 0^{+}}{e^{\frac{\frac{1}{x}}{-\frac{1}{x^2}}}}=e^0=1</script><h2 id="函数凹凸性"><a href="#函数凹凸性" class="headerlink" title="函数凹凸性"></a>函数凹凸性</h2><h3 id="单调性判断"><a href="#单调性判断" class="headerlink" title="单调性判断"></a>单调性判断</h3><p>单调性，$f^{‘}{(x)} &gt; 0$ 增函数，$f^{‘}{(x)} &lt; 0$ 减函数，$f^{‘}{(x)}\ge 0$ 等号在个别点成立。</p><ul><li>$1$：</li></ul><script type="math/tex; mode=display">y=x-\sin x</script><p>定义域：$[0,2\pi]$</p><script type="math/tex; mode=display">y^{'}=1-\cos x > 0</script><p>$(0,2x)$ 增</p><ul><li>$2$：</li></ul><script type="math/tex; mode=display">y=e^x-x-1,y^{'}=e^x-1</script><p>$x&lt;0,y^{‘}&lt;0$ 减</p><p>$x&gt;0,y^{‘}&gt;0$ 增</p><ul><li>$3$：</li></ul><script type="math/tex; mode=display">y=\sqrt[3]{x^2}=x^{\frac{2}{3}}</script><p>定义域 $(-\infty,\infty)$</p><script type="math/tex; mode=display">x\not=0,y^{'}=\frac{2}{3}\frac{1}{\sqrt[3]{x}}</script><p>$x&lt;0,y^{‘}&lt;0$ 减</p><p>$x&gt;0,y^{‘}&gt;0$ 增</p><p>$x=0$ 分界点。</p><script type="math/tex; mode=display">\lim_{\Delta x\to 0^{-}}{\frac{\Delta x^{\frac{2}{3}}-0}{\Delta x}}=\lim_{\Delta x\to 0^{-}}{\frac{1}{\Delta x^{\frac{1}{3}}}}=-\infty</script><script type="math/tex; mode=display">\lim_{\Delta x\to 0^{+}}{\frac{\Delta x^{\frac{2}{3}}-0}{\Delta x}}=\lim_{\Delta x\to 0^{+}}{\frac{1}{\Delta x^{\frac{1}{3}}}}=+\infty</script><p>导数不存在。</p><p>分界点：</p><ul><li><p>$f^{‘}{(x)}=0$ 驻点。</p></li><li><p>导数不存在。</p></li></ul><p><img src="https://s4.ax1x.com/2021/12/12/oql81I.png" alt="分界点"></p><h3 id="凹凸性"><a href="#凹凸性" class="headerlink" title="凹凸性"></a>凹凸性</h3><p>凹：</p><p><img src="https://s4.ax1x.com/2021/12/12/obIsy9.png" alt="凹性"></p><script type="math/tex; mode=display">f(\frac{x_1+x_2}{2})<\frac{f(x_1)+f(x_2)}{2}</script><p>凸：</p><p><img src="https://s4.ax1x.com/2021/12/12/obIgdx.png" alt="凸性"></p><script type="math/tex; mode=display">f(\frac{x_1+x_2}{2})>\frac{f(x_1)+f(x_2)}{2}</script><p>$f^{‘}{(x)}$ 增，$f^{‘’}{(x)}&gt;0$ 凹。</p><p>$f^{‘}{(x)}$ 减，$f^{‘’}{(x)}&lt;0$ 凸。</p><ul><li>推导：</li></ul><p>$f^{‘’}{(x)}&gt;0,x_1,x_2,x_1 &lt; x_2,x_0=\frac{x_1+x_2}{2}$</p><p>在 $[x_1,x_0],f^{‘}{(\xi_1)}=\frac{f(b)-f(a)}{b-a}$ </p><script type="math/tex; mode=display">f{(x_0)}-f(x_1)=f^{'}{(\xi_1)}(x_0-x_1)</script><script type="math/tex; mode=display">\xi_1\in(x_1,x_0)</script><p>在 $[x_0,x_2],f^{‘}{(\xi_2)}=\frac{f(b)-f(a)}{b-a}$ </p><script type="math/tex; mode=display">f{(x_2)}-f(x_0)=f^{'}{(\xi_2)}(x_2-x_0)</script><script type="math/tex; mode=display">\xi_2\in(x_0,x_2)</script><script type="math/tex; mode=display">2f(x_0)-(f{(x_1)}+f{(x_2)})=\frac{1}{2}(f^{'}{(\xi_1)}-f^{'}{(\xi_2)})(x_2-x_1)</script><script type="math/tex; mode=display">=\frac{1}{2}(x_2-x_1)f^{''}{(\eta)}(\xi_1-\xi_2)</script><script type="math/tex; mode=display">(x_2-x_1)>0,f^{''}{(\eta)}>0,(\xi_1-\xi_2)<0</script><script type="math/tex; mode=display">\frac{1}{2}(x_2-x_1)f^{''}{(\eta)}(\xi_1-\xi_2)<0</script><script type="math/tex; mode=display">2f(x_0)-(f{(x_1)}+f{(x_2)})<0</script><script type="math/tex; mode=display">f(\frac{x_1+x_2}{2})<\frac{f(x_1)+f(x_2)}{2}</script><ul><li><p>拐点：凹凸性质改变，$f^{‘’}{(x)}=0$ 或 $f^{‘’}{(x)}$ 不存在。</p></li><li><p>练习：</p></li></ul><script type="math/tex; mode=display">y=xe^{-x}</script><p>定义域：$[-\infty,+\infty]$</p><script type="math/tex; mode=display">y^{'}=e^{-x}(1-x),y^{''}=e^{-x}(x-2)</script><script type="math/tex; mode=display">x=2,f^{''}{(x)}=0</script><p>列表作图：</p><div class="table-container"><table><thead><tr><th style="text-align:center">$x$</th><th style="text-align:center">$(-\infty,2)$</th><th style="text-align:center">$2$</th><th style="text-align:center">$(2,+\infty)$</th></tr></thead><tbody><tr><td style="text-align:center">$y^{‘’}$</td><td style="text-align:center">$-$</td><td style="text-align:center">0</td><td style="text-align:center">$+$</td></tr><tr><td style="text-align:center">$y$</td><td style="text-align:center">凸</td><td style="text-align:center"></td><td style="text-align:center">凹</td></tr></tbody></table></div><p><img src="https://s4.ax1x.com/2021/12/12/oqaTFP.png" alt="图-1"></p><h3 id="极大值，极小值"><a href="#极大值，极小值" class="headerlink" title="极大值，极小值"></a>极大值，极小值</h3><script type="math/tex; mode=display">U(x_0),\forall x\in U(x_0),f(x)<f(x_0)</script><p>$f(x_0)$ 极大值，$x_0$ 极大值点。</p><p>$f(x)&gt;f(x_0)$，$f(x_0)$ 极小值，$x_0$ 极小值点。局部，极值不唯一，不相等。</p><p>定理：$f(x_0)$ 在 $x_0$ 可导，且在 $x_0$ 取极值，$f^{‘}{(x_0)}=0$ 。</p><p>证明：设取极大值，$x_0$ 邻域，$f(x_0)&gt;f(x_0+\Delta x)$</p><script type="math/tex; mode=display">f(x_0+\Delta x)-f(x_0)<0</script><p>左导数：</p><script type="math/tex; mode=display">\lim_{\Delta x\to 0^{-}}{\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}}\ge 0</script><p>右导数：</p><script type="math/tex; mode=display">\lim_{\Delta x\to 0^{+}}{\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}}\le 0</script><p>$f^{‘}{(x_0)}=0$ 驻点。</p><ul><li><p>可导函数极值点是驻点。</p></li><li><p>驻点不一定是极值点。</p></li><li><p>极值点一定是驻点或导数不存在。</p></li><li><p>驻点导数不存在未必都是极值点。</p></li></ul><p>定理：$f(x)$ 在 $(x_0-\delta,x_0+\delta)$ 内连续在邻域内，（$x_0$ 点可除外）可导。且 $f^{‘}{(x_0)}=0$ 或不存在。</p><ul><li><p>左增右减极大值 $x\in (x_0-\delta,x_0)$，$f^{‘}{(x)}&gt;0,x\in(x_0,x_0+\delta),f^{‘}{(x)}&lt;0$</p></li><li><p>左减右增极小值 $x\in (x_0-\delta,x_0)$，$f^{‘}{(x)}&lt;0,x\in(x_0,x_0+\delta),f^{‘}{(x)}&gt;0$</p></li><li><p>左右都增（减），$x\in U(x_0)$，$f^{‘}{(x)}$ 不变号，不是极值。极值：</p></li></ul><blockquote><p>定义域：求导数 $=0$ 和不存在。</p><p>$f^{‘}{(x)}$ 左右符号：</p><p>左正右负，极大值</p><p>左负右正，极小值</p><p>左右同号，啥也不是</p></blockquote><h3 id="求函数数值"><a href="#求函数数值" class="headerlink" title="求函数数值"></a>求函数数值</h3><script type="math/tex; mode=display">y=(x-1)^2(x+1)^3</script><p>定义域：$(-\infty,+\infty)$</p><script type="math/tex; mode=display">y^{'}{(x)}=2(x-1)(x+1)^3+3(x-1)^2(x+1)^2</script><script type="math/tex; mode=display">=(x-1)(x+1)^2(5x-1)</script><script type="math/tex; mode=display">y^{'}=0,x=-1,\frac{1}{5},1</script><div class="table-container"><table><thead><tr><th style="text-align:center">$x$</th><th style="text-align:center">$(-\infty,-1)$</th><th style="text-align:center">$-1$</th><th style="text-align:center">$(-1,\frac{1}{5})$</th><th style="text-align:center">$\frac{1}{5}$</th><th style="text-align:center">$(\frac{1}{5},1)$</th><th style="text-align:center">$1$</th><th style="text-align:center">$(1,\infty)$</th></tr></thead><tbody><tr><td style="text-align:center">$f^{‘}$</td><td style="text-align:center">$+$</td><td style="text-align:center">$0$</td><td style="text-align:center">$+$</td><td style="text-align:center">$0$</td><td style="text-align:center">$-$</td><td style="text-align:center">$0$</td><td style="text-align:center">$+$</td></tr><tr><td style="text-align:center">$f$</td><td style="text-align:center">增</td><td style="text-align:center">非极值点</td><td style="text-align:center">增</td><td style="text-align:center">极大值点</td><td style="text-align:center">减</td><td style="text-align:center">极小值点</td><td style="text-align:center">增</td></tr></tbody></table></div><p><img src="https://s4.ax1x.com/2021/12/12/oqa7Jf.png" alt="图-2"></p><p>定理：$x_0$ 除，二阶导数。</p><p>$f^{‘}{(x_0)}=0,f^{‘’}{(x_0)}\not=0$</p><ul><li>$f^{‘’}{(x_0)}&lt;0$ 极大值</li></ul><script type="math/tex; mode=display">f^{''}{(x_0)}=\lim_{x\to x_0}{\frac{f^{'}{(x)}-f^{'}{(x_0)}}{x-x_0}}=\lim_{x\to x_0}{\frac{f^{'}{(x)}}{x-x_0}}<0</script><p>$x_0$ 左，$x\in (x_0-\delta,x_0)$</p><p>$f^{‘}{(x)}&gt;0,x_0$ 右，$x\in(x_0,x_0+\delta)$ $f^{‘}{(x)}&lt;0$ 极大值。</p><ul><li>$f^{‘’}{(x_0)}&gt;0$ 极小值</li></ul><h3 id="全局性，局部性"><a href="#全局性，局部性" class="headerlink" title="全局性，局部性"></a>全局性，局部性</h3><ul><li><p>驻点</p></li><li><p>导数不存在</p></li><li><p>端点</p></li></ul><p>$[a,b]$ 要检验 $f(a),f(b)$ 对最后结果是否有影响。</p><ul><li><p>连续 $[a,b]$ 单调</p></li><li><p>区间内仅有一个极值，实际问题，区间内取，只有一个驻点。</p></li></ul><h2 id="函数作图"><a href="#函数作图" class="headerlink" title="函数作图"></a>函数作图</h2><ul><li><p>渐近线：水平渐近线，垂直渐近线，斜渐近线。</p></li><li><p>水平渐近线：</p></li></ul><p>最大值接近渐近线：</p><script type="math/tex; mode=display">\lim_{x\to +\infty}{f(x)}=b</script><p>最小值接近渐近线：</p><script type="math/tex; mode=display">\lim_{x\to -\infty}{f(x)}=b</script><p>极值接近渐近线;</p><script type="math/tex; mode=display">\lim_{x\to \infty}{f(x)}=b</script><p>$y=\frac{1}{x-1}$ 水平渐近线：</p><script type="math/tex; mode=display">\lim_{x\to \infty}{\frac{1}{x-1}}=0</script><p>$y=0$ 水平渐近线。</p><p>$y=\arctan x$ 渐近线;</p><script type="math/tex; mode=display">\lim_{x\to +\infty}{\arctan x=\frac{\pi}{2}}</script><script type="math/tex; mode=display">\lim_{x\to -\infty}{\arctan x=-\frac{\pi}{2}}</script><p><img src="https://s4.ax1x.com/2021/12/12/oqaIot.png" alt="图-3"></p><ul><li>垂直渐近线：</li></ul><script type="math/tex; mode=display">\lim_{x\to c^{+}}{f(x)}=\infty</script><script type="math/tex; mode=display">\lim_{x\to c^{-}}{f(x)}=\infty</script><p>$y=\frac{1}{1-x^2},x=-1,1$</p><script type="math/tex; mode=display">\lim_{x\to 1}{\frac{1}{1-x^2}}=\infty</script><script type="math/tex; mode=display">\lim_{x\to -1}{\frac{1}{1-x^2}}=\infty</script><p>$x=1,x=-1$ 垂直渐近线。</p><ul><li>斜渐近线：</li></ul><p>最大值逼近：</p><script type="math/tex; mode=display">\lim_{x\to +\infty}{(f(x)-a_x)}=b</script><script type="math/tex; mode=display">\lim_{x\to +\infty}{\frac{f(x)}{x}}=\lim_{x\to +\infty}{\frac{ax+b}{x}}=\lim_{x\to +\infty}{a+\frac{b}{x}}=a</script><p>最小值接近：</p><script type="math/tex; mode=display">\lim_{x\to -\infty}{(f(x)-a_x)}=b</script><script type="math/tex; mode=display">\lim_{x\to -\infty}{\frac{f(x)}{x}}=a</script><ul><li>练习：</li></ul><p>$f(x)\frac{x^3}{x^2+2x-3}$ 渐近线：</p><blockquote><p>水平渐近线：</p></blockquote><script type="math/tex; mode=display">\lim_{x\to \infty}{\frac{x^3}{x^2+2x-3}}=\infty</script><p>（无水平渐近线）</p><blockquote><p>垂直渐近线：</p></blockquote><script type="math/tex; mode=display">x^2+2x-3=0</script><script type="math/tex; mode=display">x=-3,x=1</script><script type="math/tex; mode=display">\lim_{x\to -3}{f(x)=\infty}</script><script type="math/tex; mode=display">\lim_{x\to 1}{f(x)=\infty}</script><p>$x=-3,x=1$ 是垂直渐近线。</p><blockquote><p>斜渐近线：</p></blockquote><script type="math/tex; mode=display">\lim_{x\to \infty}{\frac{f(x)}{x}}=\lim_{x\to \infty}{\frac{x^2}{x^2+2x-3}}=1</script><script type="math/tex; mode=display">\lim_{x\to \infty}{(f(x)-x)=\lim_{x\to \infty}{\frac{x^3-x^3-2x^2+3x}{x^2+2x-3}}}=\lim_{x\to \infty}{\frac{-2x^2+3x}{x^2+2x-3}}=-2</script><p>（看最高次）</p><p>斜渐近线： $y=x-2$</p><h3 id="微分法作图"><a href="#微分法作图" class="headerlink" title="微分法作图"></a>微分法作图</h3><ul><li><p>定义域，不连续点，坐标轴相交</p></li><li><p>奇偶周期</p></li><li><p>渐近线，无穷远状态</p></li><li><p>$f^{‘}{(x)}=0,f^{‘’}{(x)}=0$，$f^{‘},f^{‘’}$ 不存在的点，极值升降凹凸，拐点，特殊点。</p></li><li><p>练习：</p></li></ul><script type="math/tex; mode=display">y=e^{-x^2}</script><ul><li><p>定义域：$(-\infty,+\infty),x=0,y=1,y&gt;0,x$ 轴上方。 </p></li><li><p>偶函数 $y$ 轴对称。</p></li></ul><script type="math/tex; mode=display">\lim_{x\to \infty}{\frac{1}{e^{x^2}}}=0</script><ul><li><p>$y=0$ 水平渐近线。</p></li><li><p>$f^{‘}{(x)}=-2xe^{-x},f^{‘’}{(x)}=4{x^2-\frac{1}{2}}e^{-{x^2}}$</p></li></ul><p>$x=0,f^{‘}{(x)}=0,x=\pm \frac{\sqrt{2}}{2},f^{‘’}{(x)}=0$</p><div class="table-container"><table><thead><tr><th style="text-align:center">$x$</th><th style="text-align:center">$(-\infty,-\frac{\sqrt{2}}{2})$</th><th style="text-align:center">$-\frac{\sqrt{2}}{2}$</th><th style="text-align:center">$(-\frac{\sqrt{2}}{2},0)$</th><th style="text-align:center">$0$</th><th style="text-align:center">$(0,\frac{\sqrt{2}}{2})$</th><th style="text-align:center">$\frac{\sqrt{2}}{2}$</th><th style="text-align:center">$(\frac{\sqrt{2}}{2},+\infty)$</th></tr></thead><tbody><tr><td style="text-align:center">$f^{‘}$</td><td style="text-align:center">$+$</td><td style="text-align:center">$+$</td><td style="text-align:center">$+$</td><td style="text-align:center">$0$</td><td style="text-align:center">$-$</td><td style="text-align:center">$-$</td><td style="text-align:center">$-$</td></tr><tr><td style="text-align:center">$f^{‘’}$</td><td style="text-align:center">$+$</td><td style="text-align:center">$0$</td><td style="text-align:center">$-$</td><td style="text-align:center">$-$</td><td style="text-align:center">$-$</td><td style="text-align:center">$0$</td><td style="text-align:center">$+$</td></tr><tr><td style="text-align:center">$f$</td><td style="text-align:center">增，凹</td><td style="text-align:center">拐点</td><td style="text-align:center">增，凸</td><td style="text-align:center">极大值</td><td style="text-align:center">减，凸</td><td style="text-align:center">拐点</td><td style="text-align:center">减，凹</td></tr></tbody></table></div><p><img src="https://s4.ax1x.com/2021/12/12/oqa5dI.png" alt="图-4"></p><ul><li>练习：</li></ul><script type="math/tex; mode=display">y=\frac{(x-1)^3}{(x+1)^2}</script><ul><li><p>$(-\infty,-1)\cup(-1,+\infty),x=-1$ 无穷间断点。$(-1,0),(0,1)$</p></li><li><p>$x=-1$ 垂直。</p></li></ul><script type="math/tex; mode=display">\lim_{x\to \infty}{\frac{y}{x}}=\lim_{x\to \infty}{\frac{(x-1)^3}{x(x+1)^2}}=1</script><script type="math/tex; mode=display">\lim_{x\to \infty}{\frac{y}{x}}=\lim_{x\to \infty}{(\frac{(x-1)^3}{(x+1)^2}-x)}=-5</script><p>斜渐近线：$y=x-5$。</p><script type="math/tex; mode=display">y^{'}=\frac{(x-1)^2(x+5)}{(x+1)^3},y^{''}=\frac{24(x-1)}{(x+1)^4}</script><p>$x=-1,y^{‘},y^{‘’}$ 不存在。</p><div class="table-container"><table><thead><tr><th style="text-align:center">$x$</th><th style="text-align:center">$(-\infty,-5)$</th><th style="text-align:center">$-5$</th><th style="text-align:center">$(-5,-1)$</th><th style="text-align:center">$-1$</th><th style="text-align:center">$(-1,1)$</th><th style="text-align:center">$1$</th><th style="text-align:center">$(1,+\infty)$</th></tr></thead><tbody><tr><td style="text-align:center">$y^{‘}$</td><td style="text-align:center">$+$</td><td style="text-align:center">$0$</td><td style="text-align:center">$-$</td><td style="text-align:center">不存在</td><td style="text-align:center">$+$</td><td style="text-align:center">$0$</td><td style="text-align:center">$+$</td></tr><tr><td style="text-align:center">$y^{‘’}$</td><td style="text-align:center">$-$</td><td style="text-align:center">$-$</td><td style="text-align:center">$-$</td><td style="text-align:center">不存在</td><td style="text-align:center">$-$</td><td style="text-align:center">$0$</td><td style="text-align:center">$+$</td></tr><tr><td style="text-align:center">$y$</td><td style="text-align:center">增，凸</td><td style="text-align:center">极大值</td><td style="text-align:center">减，凸</td><td style="text-align:center">间断</td><td style="text-align:center">增，凸</td><td style="text-align:center">拐点</td><td style="text-align:center">增，凹</td></tr></tbody></table></div><p><img src="https://s4.ax1x.com/2021/12/12/oqgIGd.png" alt="图-5"></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 极限 </tag>
            
            <tag> 数列 </tag>
            
            <tag> 导数 </tag>
            
            <tag> 泰勒展开 </tag>
            
            <tag> 洛必达法则 </tag>
            
            <tag> 微分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分基础</title>
      <link href="/2021/12/11/wei-fen-ji-chu/"/>
      <url>/2021/12/11/wei-fen-ji-chu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://wdsa001.github.io/2021/12/11/dao-shu/">导数</a></p><h2 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h2><script type="math/tex; mode=display">\Delta x,\Delta y=y(x_0+\Delta x)-y(x_0)</script><script type="math/tex; mode=display">y=e^x,x:1\to 1.01,\Delta y=e^{1.01}-e^1</script><p>人工不好计算出 $\Delta y$ 的值，并且，在现实生活中不需要那么高的精度。所以我们可以去<strong>近似值</strong>。</p><p><img src="https://s1.ax1x.com/2021/12/10/oI7z4g.png" alt="微分例子"></p><p>原来，我们有边长为 $x_0$ 的正方形，现在我们将它扩建，边长增加 $\Delta x$，那么 </p><script type="math/tex; mode=display">\Delta S=(x_0+\Delta x)^2-x_0^2=2(x_0+\Delta x)\Delta x</script><script type="math/tex; mode=display">=2x_0\Delta x+(\Delta x^2)</script><script type="math/tex; mode=display">\because \Delta x\to 0</script><script type="math/tex; mode=display">\therefore \approx 2x_0\Delta x</script><p>我们舍去了 $(\Delta x)^2$，不难发现 $\Delta x$ 越大，结果就越不精准，所以一般 $\Delta x$ 会去很小，保证结果在精度范围内。（$x_0$ 是常量，$\Delta x$ 是变量）。</p><p>$f(x)$ 在邻域范围内有定义，$(x+\Delta x)$ 在邻域内。</p><script type="math/tex; mode=display">\Delta y=f(x_0+\Delta x)-f(x_0)</script><p>可以表示为：</p><script type="math/tex; mode=display">\Delta y=A\Delta x+o(\Delta x)</script><p><strong>$\Delta y$：精确值，$dy$：近似值（$o(\Delta x)$ 舍去）。</strong></p><p>$f(x)$ 在 $x_0$ 可微 $\Leftrightarrow$ $dy=f^{‘}{(x_0)}\Delta x$</p><p>其中，上文中的 $A=f^{‘}{(x_0)}$</p><p><strong>$\Delta x=dx,\Delta y\approx dy$</strong></p><p>$\frac{dy}{dx}=f^{‘}{(x)}$ 导数也叫“微商”。</p><ul><li>练习：</li></ul><p>$f(x)=x^2$ 在 $x=2$ 处的微分，$\Delta x=0.01$，该变量和微分值。</p><script type="math/tex; mode=display">dy=2x\Delta x,\left.dy\right|_{x=2}=2\Delta x,\Delta x=0.01,dy=0.04</script><p>微分值。</p><script type="math/tex; mode=display">\Delta y=(2.01)^2-2^2=0.0401</script><p>精确值。</p><p>为什么会出现细微的差距呢？因为我们舍了 $(\Delta x)^2$。</p><p><img src="https://s1.ax1x.com/2021/12/10/oI7xUS.png" alt="微分"></p><p>图中形象的区别了 $\Delta y$ 和 $dy$ 的差距是如何出现的，我们在 $x_0$ 处求了导数，利用导数找到在 $x_0+\Delta x$ 处的 $y$ 值。所以和真实出现了偏差。</p><script type="math/tex; mode=display">\Delta y=A\Delta x+o(\Delta x)</script><script type="math/tex; mode=display">\Delta y\approx dy</script><script type="math/tex; mode=display">dy=A\Delta x=f^{'}{(x)}dx</script><ul><li>基本公式：$dc=c^{‘}dx$</li></ul><h3 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h3><script type="math/tex; mode=display">d(u\pm v)=du\pm dv</script><script type="math/tex; mode=display">d(u+v)=(u+v)^{'}dx=u^{'}dx+v^{'}dx=du+dv</script><script type="math/tex; mode=display">d(uv)=udv+vdu</script><script type="math/tex; mode=display">d(cu)=cdu</script><p>（$c$ 是常数）。</p><script type="math/tex; mode=display">d(\frac{u}{v})=\frac{vdu-udv}{v^2}</script><script type="math/tex; mode=display">(\frac{u}{v})^{'}=\frac{u^{'}v-v^{'}u}{v^2}</script><ul><li><p>练习：</p></li><li><p>$1$：</p></li></ul><script type="math/tex; mode=display">y=x^2+\ln x-3^x</script><script type="math/tex; mode=display">dy=dx^2+d\ln x-d3^x</script><script type="math/tex; mode=display">=2xdx+\frac{1}{x}dx-3^x(\ln 3)dx</script><script type="math/tex; mode=display">=(2x+\frac{1}{x}-3^x\ln 3)dx</script><script type="math/tex; mode=display">dy=y^{'}dx=(2x+\frac{1}{x}-3^x\ln 3)dx</script><ul><li>$2$：</li></ul><script type="math/tex; mode=display">y=x^3e^x\sin x</script><script type="math/tex; mode=display">d(uvw)=vwdu+uwdv+uvdw</script><script type="math/tex; mode=display">dy=e^x\sin x d x^3+x^3\sin d e^x+x^3 e^x d\sin x</script><script type="math/tex; mode=display">=(3e^x\sin x x^2+x^3\sin x e^x+x^3e^x\cos x)dx</script><ul><li>$3$：</li></ul><script type="math/tex; mode=display">y=\frac{x^2+1}{x+1},dy=d(\frac{x^2-1+2}{x+1})=d(x-1+\frac{2}{x+1})</script><script type="math/tex; mode=display">=dx+d(\frac{2}{x+2})=dx-\frac{2}{(x+1)^2}dx</script><h3 id="一阶微分形式不变性"><a href="#一阶微分形式不变性" class="headerlink" title="一阶微分形式不变性"></a>一阶微分形式不变性</h3><script type="math/tex; mode=display">y=f(x)</script><p>$x$ 是自变量 $dy=f^{‘}{(x)}dx$</p><p>$x$ 是函数 $x=g(k),y=f(g(k))$</p><script type="math/tex; mode=display">dy=f^{'}{(x)}g^{'}{(k)}dk=f^{'}{(x)}dx</script><script type="math/tex; mode=display">dx=g^{'}{(x)}dk</script><ul><li><p>练习：</p></li><li><p>$1$：</p></li></ul><script type="math/tex; mode=display">y=e^{\sin^2 x}</script><script type="math/tex; mode=display">dy=de^{\sin^2 x}=e^{\sin^2 x}d\sin^2 x</script><script type="math/tex; mode=display">=e^{\sin^2 x}2\sin(x) d\sin (x)</script><script type="math/tex; mode=display">=e^{\sin^2 x}2\sin(x) \cos (x)dx</script><ul><li>$2$：</li></ul><script type="math/tex; mode=display">y=\ln(x+\sqrt{1+x^2})</script><script type="math/tex; mode=display">dy=\frac{1}{x+\sqrt{1+x^2}}d(x+\sqrt{1+x^2})</script><script type="math/tex; mode=display">=\frac{1}{x+\sqrt{1+x^2}}(dx+\frac{d(1+x^2)}{2\sqrt{1+x^2}})</script><script type="math/tex; mode=display">=\frac{1}{x+\sqrt{1+x^2}}(dx+\frac{2xdx}{2\sqrt{1+x^2}})</script><script type="math/tex; mode=display">=\frac{1}{x+\sqrt{1+x^2}}(1+\frac{2x}{2\sqrt{1+x^2}})dx</script><script type="math/tex; mode=display">=\frac{1}{\sqrt{1+x^2}}dx</script><ul><li>$3$ 复杂：</li></ul><script type="math/tex; mode=display">x^2+2xy-y^2=2x</script><p>两边同时对 $x$ 求导：</p><script type="math/tex; mode=display">2x+2y+2xy^{'}-2yy^{'}=2</script><script type="math/tex; mode=display">y^{'}=\frac{1-x-y}{x-y}</script><script type="math/tex; mode=display">dy=\frac{1-x-y}{x-y}dx</script><p>也可以用今天刚学的微分方法：</p><script type="math/tex; mode=display">2xdx+2ydx+2xdy-2ydy=2dx</script><script type="math/tex; mode=display">(2x-2y)dy=(2-2x-2y)dx</script><script type="math/tex; mode=display">dy=\frac{2-2x-2y}{2x-2y}dx</script><script type="math/tex; mode=display">dy=\frac{1-x-y}{x-y}dx</script><ul><li>总结：</li></ul><script type="math/tex; mode=display">\Delta y\approx dy=f^{'}{(x_0)}\Delta x</script><script type="math/tex; mode=display">f(x_0+\Delta x)-f(x_0)\approx f^{'}{(x_0)}\Delta x</script><script type="math/tex; mode=display">f(x_0+\Delta x)\approx f(x_0)+f^{'}{(x_0)}\Delta x</script><p>$|\Delta x|$ 取得很小。</p><ul><li>练习：</li></ul><p>$f(x)=2x^2-3x,x_0=5,\Delta x=0.2,\Delta x=1$ 分别求 $\Delta y,dy$。</p><script type="math/tex; mode=display">\Delta y=f(5+\Delta x)-f(5)=17\Delta x+2(\Delta x)^2</script><script type="math/tex; mode=display">dy=17\Delta x</script><script type="math/tex; mode=display">\Delta x=0.2,\Delta y=3.48,dy=3.4</script><script type="math/tex; mode=display">\Delta x=1,\Delta y=19,dy=17</script><p>可以直观的看出 $\Delta x$ 对于精度的影响。</p><h3 id="常见微分"><a href="#常见微分" class="headerlink" title="常见微分"></a>常见微分</h3><p>取 $x_0=0,\Delta x=x$</p><script type="math/tex; mode=display">f(x)\approx f(0)+f^{'}{(0)}x</script><ul><li>$1$：</li></ul><script type="math/tex; mode=display">\sqrt[n]{1\pm x}\approx 1\pm \frac{x}{n}</script><script type="math/tex; mode=display">\sqrt[n]{1+x} \approx f(0)+f^{'}{(0)}x=1+\frac{x}{n}</script><ul><li>$2$：</li></ul><script type="math/tex; mode=display">\sin x\approx x</script><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{\sin x}{x}}=1</script><ul><li>$3$：</li></ul><script type="math/tex; mode=display">\tan x=x</script><ul><li>$4$：</li></ul><script type="math/tex; mode=display">e^x\approx 1+x</script><ul><li>$5$：</li></ul><script type="math/tex; mode=display">\ln{(1+x)}\approx x</script><ul><li>$6$：</li></ul><script type="math/tex; mode=display">\frac{1}{1+x}\approx 1-x</script><script type="math/tex; mode=display">1\approx 1-x^2</script><ul><li>$7$：</li></ul><script type="math/tex; mode=display">\arcsin x\approx x</script><ul><li>$8$：</li></ul><script type="math/tex; mode=display">\arctan x\approx x</script><h3 id="利用微思想求值"><a href="#利用微思想求值" class="headerlink" title="利用微思想求值"></a>利用微思想求值</h3><script type="math/tex; mode=display">\sqrt[3]{997}=\sqrt[3]{1000-3}=10\sqrt[3]{1-0.003}\approx 10\times (1-\frac{0.003}{3})=9.99</script><script type="math/tex; mode=display">\ln{1.03}=\ln{(1+0.03)}\approx 0.03</script><p>现在我们可以通过学习的知识对一些无理数求大概的值了。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 极限 </tag>
            
            <tag> 数列 </tag>
            
            <tag> 导数 </tag>
            
            <tag> 微积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导数</title>
      <link href="/2021/12/11/dao-shu/"/>
      <url>/2021/12/11/dao-shu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://wdsa001.github.io/2021/12/10/chong-yao-ji-xian-xing-shi-wu-qiong-xiao-bi-jiao-han-shu-lian-xu-xing/">重要极限形式&amp;无穷小比较&amp;函数连续性</a></p><h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><p>连续 $\Delta x\to 0,\Delta y\to 0$。</p><p>变化率：$x_0\to x_0+\Delta x,f(x_0)\to f(x_o+\Delta x)$</p><script type="math/tex; mode=display">\lim_{\Delta \to x}{\frac{f(x_o+\Delta x)-f(x_0)}{\Delta x}}=\lim_{\Delta  x\to 0}{\frac{\Delta y}{\Delta x}}</script><p>$y=f(x)$，在 $x_0$ 邻域 $U(x_0)$ 有定义 $\Delta x\not= 0,x_0+\Delta x\in U(x_0)$</p><p>导数四种符号：</p><script type="math/tex; mode=display">f^{'}(x_0)</script><script type="math/tex; mode=display">\left.y^{'}\right|_{x=x_0}</script><script type="math/tex; mode=display">\left.\dfrac{dy}{dx}\right|_{x=x_0}</script><script type="math/tex; mode=display">\left.\dfrac{df(x)}{dx}\right|_{x=x_0}</script><p>平常有时候也写成：</p><script type="math/tex; mode=display">(x_0)^{'}</script><p>表示对 $x_0$ 求导。</p><p>切线斜率：</p><p><img src="https://s1.ax1x.com/2021/12/10/oI7XHf.png" alt="切线斜率"></p><script type="math/tex; mode=display">\lim_{\Delta x\to 0}{\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}}</script><h3 id="常用导数公式"><a href="#常用导数公式" class="headerlink" title="常用导数公式"></a>常用导数公式</h3><script type="math/tex; mode=display">y=x^2\Rightarrow y^{'}=2x</script><script type="math/tex; mode=display">y=x^n\Rightarrow y^{'}=nx^{n-1}</script><p>$n$ 为实数。</p><script type="math/tex; mode=display">y=c\Rightarrow y^{'}=0</script><p>$c$ 为常数。</p><script type="math/tex; mode=display">y=\sin{x}\Rightarrow y^{'}=\cos{x}</script><script type="math/tex; mode=display">y=\cos{x}\Rightarrow y^{'}=-\sin{x}</script><script type="math/tex; mode=display">y=\log_a{x}\Rightarrow y^{'}=\frac{1}{x}\log_a{e}</script><script type="math/tex; mode=display">y=\ln{x}\Rightarrow y^{'}=\frac{1}{x}</script><script type="math/tex; mode=display">y=a^x\Rightarrow y^{'}=a^x\ln{a}</script><script type="math/tex; mode=display">y=e^x\Rightarrow y^{'}=e^x</script><h3 id="可导"><a href="#可导" class="headerlink" title="可导"></a>可导</h3><p><img src="https://s1.ax1x.com/2021/12/10/oI7ODP.png" alt="切线法线"></p><p>切线：</p><script type="math/tex; mode=display">y-y_0=f^{'}(x_0)(x-x_0)</script><p>法线：</p><script type="math/tex; mode=display">y-y_0=-\frac{1}{f^{'}(x_0)}(x-x_0)</script><script type="math/tex; mode=display">\lim_{\Delta x\to 0}\frac{\Delta y}{\Delta x}</script><script type="math/tex; mode=display">\Delta x\to 0^{+},\Delta x\to 0^{-}</script><script type="math/tex; mode=display">\lim_{\Delta x\to 0^{-}}\frac{\Delta y}{\Delta x}</script><p>左可导，$f^{‘}_{-}{(x_0)}$</p><script type="math/tex; mode=display">\lim_{\Delta x\to 0^{+}}\frac{\Delta y}{\Delta x}</script><p>右可导，$f^{‘}_{+}{(x_0)}$</p><p>$[a,b]$</p><script type="math/tex; mode=display">f^{'}_{+}{(a)},f^{'}_{-}{(b)}</script><p>可导。 </p><p>可导 $\Leftrightarrow$ </p><script type="math/tex; mode=display">f^{'}_{+}{(a)}=f^{'}_{-}{(b)}</script><ul><li><p>可导必连续</p></li><li><p>练习：</p></li></ul><p>$y=\sqrt[3]{x}$ 在 $x=0$ 处。</p><script type="math/tex; mode=display">\lim_{\Delta x\to 0}{\frac{f(0+\Delta x)-f(0)}{\Delta x}}=\lim_{\Delta x\to 0}{\frac{\sqrt[3]{x}}{\Delta x}}=\lim_{\Delta x\to 0}{\frac{1}{(\Delta x)^{\frac{2}{3}}}}=+\infty</script><h3 id="求导法则"><a href="#求导法则" class="headerlink" title="求导法则"></a>求导法则</h3><ul><li>加法：</li></ul><p>$u(x),v(x)$ 可导。</p><script type="math/tex; mode=display">(u(x)+v(x))^{'}=u^{'}(x)+v^{'}(x)</script><script type="math/tex; mode=display">(u_1(x)+u_2(x)+…+u_n(x))^{'}=u_1^{'}(x)+u_2^{'}(x)+…+u_{n}^{'}(x)</script><p>左边是<strong>有限</strong>个函数。</p><ul><li>练习：</li></ul><script type="math/tex; mode=display">(x+\sin{x}+-\ln{x})^{'}=1+\cos{x}-\frac{1}{x}</script><script type="math/tex; mode=display">(\frac{1-x^3}{\sqrt{x}})^{'}=(\frac{1}{\sqrt{x}}-\frac{x^3}{\sqrt{x}})^{'}=(x^{-\frac{1}{2}}-x^{\frac{3}{2}})^{'}=-\frac{1}{2}x^{-\frac{3}{2}}-\frac{3}{2}x^{\frac{1}{2}}</script><ul><li>乘法：</li></ul><script type="math/tex; mode=display">(uv)^{'}=u^{'}v+uv^{'}</script><p>设 $c$ 是常数：$(cu)^{‘}=c^{‘}u+cu^{‘}=cu^{‘}$</p><script type="math/tex; mode=display">(u_1u_2u_3)^{'}=u_1^{'}u_2u_3+u_1u_2^{'}u_3+u_1u_2u_3^{'}</script><ul><li>除法：</li></ul><script type="math/tex; mode=display">(\frac{u}{v})^{'}=\frac{u^{'}v-uv^{'}}{v^2}</script><ul><li>练习：</li></ul><script type="math/tex; mode=display">(\tan{x})^{'}=(\frac{\sin{x}}{\cos{x}})^{'}=\frac{(\sin{x})^{'}\cos{x}-\sin{x}(\cos{x})^{'}}{\cos^2{x}}=\frac{1}{\cos^2{x}}=\sec^2{x}</script><script type="math/tex; mode=display">(\tan{x})^{'}=\sec^2{x}</script><script type="math/tex; mode=display">(\cot{x})^{'}=-\csc^2{x}</script><script type="math/tex; mode=display">(\sec{x})^{'}=\sec{x}\tan{x}</script><script type="math/tex; mode=display">(\csc{x})^{'}=-\csc{x}\cot{x}</script><ul><li>反函数：</li></ul><p>$y=f(x),x=g(y)$（互为反函数）</p><p>$g^{‘}(y)=\frac{1}{f^{‘}(x)}$（互为倒数）</p><p>$y=a^x$ 反函数： $x=\log_a{y}(y&gt;0)$</p><script type="math/tex; mode=display">(a^x)^{'}=\frac{1}{(\log_a{y})^{'}}=\frac{1}{\frac{1}{y\ln a}}=y\ln a=a^x\ln a</script><script type="math/tex; mode=display">(arc\sin{x})^{'}=\frac{1}{\sqrt{1-x^2}}</script><script type="math/tex; mode=display">(arc\cos{x})^{'}=-\frac{1}{\sqrt{1-x^2}}</script><script type="math/tex; mode=display">(arc\tan{x})^{'}=\frac{1}{1+x^2}</script><script type="math/tex; mode=display">(arc\cot{x})^{'}=-\frac{1}{1+x^2}</script><ul><li>复合函数：</li></ul><script type="math/tex; mode=display">(\ln{\sin(\cos{(x)^2})})^{'}=\frac{1}{\sin{(\cos(x)^2)}}\times \cos{(\cos{(x)^2})}\times \sin{(x)^2}\times 2x</script><script type="math/tex; mode=display">y=f(k),k=g(x)</script><script type="math/tex; mode=display">\frac{dy}{dx}=\frac{dy}{dk}\frac{dk}{dx}</script><p>这就是“链式法则”。</p><script type="math/tex; mode=display">y=f(a),a=f(b),b=f(c),c=f(x)</script><script type="math/tex; mode=display">\frac{dy}{dx}=\frac{dy}{da}\frac{da}{db}\frac{db}{dc}\frac{dc}{dx}</script><ul><li>练习：</li></ul><script type="math/tex; mode=display">(\ln\sin{x})^{'}=\frac{1}{\sin{x}}\times \cos{x}</script><script type="math/tex; mode=display">(e^{\sin^2\frac{1}{x}})^{'}</script><script type="math/tex; mode=display">=e^{\sin^2\frac{1}{x}}\times 2\sin\frac{1}{x}\times \cos{\frac{1}{x}}\times (-\frac{1}{x^2})</script><script type="math/tex; mode=display">(\ln\ln\ln x)^{'}=\frac{1}{\ln\ln x}\times \frac{1}{\ln x}\times \frac{1}{x}</script><h2 id="高阶导数"><a href="#高阶导数" class="headerlink" title="高阶导数"></a>高阶导数</h2><script type="math/tex; mode=display">y=x^3</script><script type="math/tex; mode=display">y^{'}=3x^2</script><script type="math/tex; mode=display">y^{''}=(y^{'})^{'}=2\times (3x)=6x=\frac{d^2y}{dx^2}</script><p>这是二阶导数。</p><p>三阶导数：</p><script type="math/tex; mode=display">f^{'''}(x)=\frac{d^3y}{dx^3}</script><p>四阶导数：</p><script type="math/tex; mode=display">f^{(4)}(x)=\frac{d^4y}{dx^4}</script><p><strong>$4$</strong> 阶及以上的导数直接写数字即可，注意<strong>加括号</strong>，和幂区分。</p><p>$n$ 阶导数：</p><script type="math/tex; mode=display">f^{(n)}(x)=\frac{d^ny}{dx^n}</script><ul><li>练习：</li></ul><script type="math/tex; mode=display">y=x^3\ln{x}</script><script type="math/tex; mode=display">y^{'}=3x^2\ln{x}+x^2</script><script type="math/tex; mode=display">y^{''}=6x\ln x+3x^2\frac{1}{x}+2x=6x\ln x+5x</script><script type="math/tex; mode=display">y^{'''}=6\ln{x}+6+5=6\ln{x}+11</script><ul><li>对于某个未知数求导要表明！</li></ul><script type="math/tex; mode=display">x^2+y^2=r^2</script><p>求 $\dfrac{d^2y}{dx^2}$ 即 $f^{‘’}{(x)}$（$r$ 是常数）。</p><p>如果用一般的思路用 $y$ 去表达 $x$ 会发现要对式做很复杂的调整，所以我们直接整体求导：</p><p>两边同时对 $x$ 求导：</p><script type="math/tex; mode=display">2x+2y\frac{dy}{dx}=0</script><script type="math/tex; mode=display">\frac{dy}{dx}=-\frac{x}{y}</script><script type="math/tex; mode=display">\frac{d^2y}{dx^2}=-\frac{y-x\frac{dy}{dx}}{y^2}</script><script type="math/tex; mode=display">=-\frac{y+x\frac{x}{y}}{y^2}</script><script type="math/tex; mode=display">=-\frac{x^2+y^2}{y^3}=-\frac{r^2}{y^3}</script><ul><li>第四种求导表示法（上面介绍的四种书写方法的最后一种）：</li></ul><script type="math/tex; mode=display">x=a(t-\sin t),y=a(1-\cos t)</script><script type="math/tex; mode=display">\frac{dy}{dx}=\frac{\frac{dy}{dt}}{\frac{dx}{dt}}=\frac{a\sin t}{a-a\cos t}</script><script type="math/tex; mode=display">\frac{d}{dx}(\frac{dy}{dx})=\frac{d(\frac{dy}{dx})}{dx}</script><p>这里我们一般采用第一种写法，但是要知道上面的等式成立。</p><script type="math/tex; mode=display">\frac{d}{dx}(\frac{a\sin t}{a-a\cos t})=\frac{d}{dt}(\frac{a\sin t}{a-a\cos t})\frac{1}{\frac{dx}{dt}}</script><p>这里的时候 $\frac{dx}{dt}$ 我们用的是整体思想，但是其实 $dx$ 和 $dt$ 是个体，在后面的微分中介绍。意义是 $dx$ 对于 $dt$ 求导。</p><h2 id="导数规律小结"><a href="#导数规律小结" class="headerlink" title="导数规律小结"></a>导数规律小结</h2><ul><li>降幂：</li></ul><script type="math/tex; mode=display">y=x^4,y^{'}=4x^3,y^{''}=12x^2,y^{'''}=24x,y^{(4)}=24,y^{(5)}=0,…</script><ul><li>自然对数：</li></ul><script type="math/tex; mode=display">y=e^x,y^{'}=e^x,y^{''}=e^x,…</script><ul><li>分式：</li></ul><script type="math/tex; mode=display">y=\ln{x},y^{'}=\frac{1}{x},y^{''}=-\frac{1}{x^2},y^{'''}=\frac{2}{x^3},y^{4}=-\frac{6}{x^4},…</script><script type="math/tex; mode=display">y^{(n)}=(-1)^{n-1}\frac{(n-1)!}{x^n}</script><ul><li>三角函数：</li></ul><script type="math/tex; mode=display">y=\sin x,y^{'}=\cos x,y^{''}=-\cos x,…</script><script type="math/tex; mode=display">(\sin x)^{(n)}=\sin(x+\frac{n\pi}{2})</script><script type="math/tex; mode=display">(\cos x)^{(n)}=\cos(x+\frac{n\pi}{2})</script><ul><li>分配律：</li></ul><script type="math/tex; mode=display">(u\pm v)^{(n)}=u^{(n)}\pm v^{(n)}</script><script type="math/tex; mode=display">(cu)^{(n)}=cu^{(n)}</script><script type="math/tex; mode=display">(uv)^{'}=u^{'}v+uv^{'}</script><script type="math/tex; mode=display">(uv)^{''}=u^{''}v+u^{'}v^{'}+u^{'}v^{'}+uv^{''}=u^{''}v+2u^{'}v^{'}+uv^{''}</script><script type="math/tex; mode=display">(uv)^{'''}=u^{'''}v+3u^{''}v^{'}+3u^{'}v^{''}+uv^{'''}</script><script type="math/tex; mode=display">(uv)^{(n)}=\sum_{i=0}^{n}{C^i_n u^{(n-i)}v^{(i)}}</script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 极限 </tag>
            
            <tag> 数列 </tag>
            
            <tag> 导数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重要极限形式&amp;无穷小比较&amp;函数连续性</title>
      <link href="/2021/12/10/chong-yao-ji-xian-xing-shi-wu-qiong-xiao-bi-jiao-han-shu-lian-xu-xing/"/>
      <url>/2021/12/10/chong-yao-ji-xian-xing-shi-wu-qiong-xiao-bi-jiao-han-shu-lian-xu-xing/</url>
      
        <content type="html"><![CDATA[<p>前置文章：</p><p><a href="https://wdsa001.github.io/2021/10/05/shu-lie-ji-xian-ji-xian-ji-chu/">数列极限&amp;极限基础</a></p><p><a href="https://wdsa001.github.io/2021/10/06/han-shu-ji-xian-ji-xian-yun-suan-ji-xian-cun-zai-zhun-ze/">函数极限&amp;极限运算&amp;极限存在准则</a></p><p><a href="https://wdsa001.github.io/2021/12/06/zi-ran-dui-shu-e/">自然对数e</a></p><h2 id="重要极限形式"><a href="#重要极限形式" class="headerlink" title="重要极限形式"></a>重要极限形式</h2><p>一般我们通过正常的运算来凑出形式，求解。</p><h3 id="值为-1"><a href="#值为-1" class="headerlink" title="值为 $1$"></a>值为 $1$</h3><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{\sin{x}}{x}}=1</script><ul><li><p>练习（求值）：</p></li><li><p>$1$:</p></li></ul><script type="math/tex; mode=display">\lim_{n\to \infty}{n\sin{\frac{2}{n}}}</script><script type="math/tex; mode=display">=\lim_{n\to \infty}{\frac{ {\sin{\frac{2}{n}}}}{\frac{1}{n}}}=2\lim_{n\to \infty}{\frac{ {\sin{\frac{2}{n}}}}{\frac{2}{n}}}</script><script type="math/tex; mode=display">\because n \to \infty</script><script type="math/tex; mode=display">\therefore \frac{2}{n} \to 0</script><script type="math/tex; mode=display">=2\lim_{\frac{2}{n}\to 0}{\frac{ {\sin{\frac{2}{n}}}}{\frac{2}{n}}}</script><script type="math/tex; mode=display">=2</script><ul><li>$2$:</li></ul><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{\tan{x}}{x}}</script><script type="math/tex; mode=display">=\lim_{x\to 0}{\frac{\sin{x}}{x}\frac{1}{\cos{x}}}</script><script type="math/tex; mode=display">\because \lim_{x\to 0}{\cos{x}}=1</script><script type="math/tex; mode=display">\therefore \lim_{x\to 0}{\frac{1}{\cos{x}}}=1</script><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{\sin{x}}{x}\frac{1}{\cos{x}}}=1</script><h3 id="值为-e"><a href="#值为-e" class="headerlink" title="值为 $e$"></a>值为 $e$</h3><script type="math/tex; mode=display">\lim_{x\to \infty}{(1+\frac{1}{x})^x}=e</script><ul><li><p>练习（求值）：</p></li><li><p>$1$：</p></li></ul><script type="math/tex; mode=display">\lim_{x\to \infty}{(1+\frac{2}{x})^x}</script><script type="math/tex; mode=display">=\lim_{x\to \infty}{((1+\frac{1}{\frac{x}{2}})^{\frac{x}{2}})^2}</script><script type="math/tex; mode=display">=\lim_{\frac{x}{2}\to \infty}{((1+\frac{1}{\frac{x}{2}})^{\frac{x}{2}})^2}=e^2</script><ul><li>$2$：</li></ul><script type="math/tex; mode=display">\lim_{x\to \infty}{(1-\frac{1}{x})^x}</script><p>将分母化为负数，凑指数后得到结构，直接计算即可：</p><script type="math/tex; mode=display">=e^{-1}=\frac{1}{e}</script><ul><li>$3$：</li></ul><script type="math/tex; mode=display">\lim_{x\to \infty}{(\frac{x+2}{x-1})^x}</script><script type="math/tex; mode=display">=\lim_{x \to \infty}{(\frac{\frac{x+2}{x}}{\frac{x-1}{x}})^x}</script><script type="math/tex; mode=display">=\lim_{x \to \infty}{(\frac{1+\frac{2}{x}}{1-\frac{1}{x}}})^x</script><script type="math/tex; mode=display">=\lim_{x \to \infty}{\frac{((1+\frac{1}{\frac{x}{2}})^{\frac{x}{2}})^2}{((1-\frac{1}{-x})^{-x})^{-1}}}</script><script type="math/tex; mode=display">=\frac{e^2}{e^{-1}}=e^3</script><h2 id="无穷小比较"><a href="#无穷小比较" class="headerlink" title="无穷小比较"></a>无穷小比较</h2><p>设：</p><script type="math/tex; mode=display">\lim{g(x)=0},\lim{f(x)}=0(x\not=0)</script><ul><li>$1$：$f(x)$ 比 $g(x)$ 高阶无穷小 $f(x)=o(g(x))$，</li></ul><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{f(x)}{g(x)}}=0</script><ul><li>$2$：$f(x)$ 比 $g(x)$ 低阶无穷小 $o(f(x))=g(x)$，</li></ul><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{f(x)}{g(x)}}=\infty</script><ul><li>$3$：$f(x)$ 比 $g(x)$ 同阶无穷小 $f(x)=cg(x)$，其中 $c$ 是常数，</li></ul><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{f(x)}{g(x)}}=c</script><ul><li>$4$：$f(x)$ 比 $g(x)$ 等价无穷小 $f(x)=g(x)$，$c=1$ 时，</li></ul><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{f(x)}{g(x)}}=1</script><p>记作：$f(x)\sim g(x)$</p><h3 id="重点比较"><a href="#重点比较" class="headerlink" title="重点比较"></a>重点比较</h3><ul><li>$1$：$\ln(1+x)\sim x(x\to 0)$</li></ul><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{\ln{(1+x)}}{x}}=\lim_{x\to 0}{\ln{(1+x)}^{\frac{1}{x}}}=\ln{e}=1</script><ul><li>$2$：$e^x-1\sim x$</li></ul><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{e^x-1}{x}}</script><p>设：$k=e^x-1$，则有 $e^x=k+1$，$x=\ln{(k+1)}$</p><script type="math/tex; mode=display">=\lim_{k\to 0}{\frac{k}{\ln{(k+1)}}}=1</script><p>可以结合第一个比较来看。</p><ul><li>$3$：$\sqrt[n]{1+x}-1\sim \frac{x}{n}$</li></ul><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{(1+x)^{\frac{1}{n}}}{\frac{x}{n}}}</script><script type="math/tex; mode=display">\because a^n-1=(a-1)(a^{n-1}+a^{n-2}+…+a+1)</script><script type="math/tex; mode=display">\therefore a^n=(a-1)(a^{n-1}+a^{n-2}+…+a+1)+1</script><script type="math/tex; mode=display">\therefore a^{\frac{1}{n}}=(a-1)(a^{\frac{n-1}{n}}+a^{\frac{n-2}{n}}+…+a^{\frac{1}{n}}+1)+1</script><p>设 $a=x+1$</p><script type="math/tex; mode=display">=\lim_{x\to 0}{\frac{1+x-1}{\frac{x}{n}((1+x)^{\frac{n-1}{n}}+…+(1+x)^{\frac{1}{n}}+1)}}</script><script type="math/tex; mode=display">\because x\to 0</script><script type="math/tex; mode=display">\therefore (1+x)^{\frac{n-1}{n}}=(1+0)^{\frac{n-1}{n}}=1</script><script type="math/tex; mode=display">=\lim_{x\to 0}\frac{x}{\frac{x}{n}\times n}</script><script type="math/tex; mode=display">=1</script><h3 id="无穷小替换"><a href="#无穷小替换" class="headerlink" title="无穷小替换"></a>无穷小替换</h3><script type="math/tex; mode=display">(x\to 0):\sin{x}\sim x,\tan{x}\sim x</script><p>如果：$f_1(x)\sim f_2(x),g_1(x)\sim g_2(x),\lim{\frac{f_2(x)}{g_2(x)}}$ 存在。</p><script type="math/tex; mode=display">\lim{\frac{f_1(x)}{g_1(x)}}=\lim{\frac{f_2(x)}{g_2(x)}}</script><p>（定理）</p><ul><li><p>两个无穷小之比<strong>才能用</strong>，$\lim(f_1(x)+g_1(x))\not=\lim(f_2(x)+g_2(x))$。</p></li><li><p>分子或分母是因子乘积（无穷小），选部分因子替换。</p></li></ul><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{\sin{2x}}{x^3+3x}}=\lim_{x\to 0}{\frac{2x}{x^3+3x}}=\frac{2}{x^2+3}=\frac{2}{3}</script><script type="math/tex; mode=display">\lim_{x\to 0}{\frac{(e^x-1)\sin x}{1-\cos x}}=\lim_{x\to 0}{\frac{x\times x}{\frac{1}{2}x^2}}=2</script><h2 id="函数连续性"><a href="#函数连续性" class="headerlink" title="函数连续性"></a>函数连续性</h2><script type="math/tex; mode=display">\Delta y=f(x_0+\Delta x)-f(x_0)</script><p><img src="https://s1.ax1x.com/2021/12/10/oI7HgA.png" alt="连续"></p><script type="math/tex; mode=display">\Delta x\to 0,\Delta y\to 0</script><p><img src="https://s1.ax1x.com/2021/12/10/oI7bjI.png" alt="间断"></p><script type="math/tex; mode=display">\Delta x\to 0,\Delta y \not\to 0</script><p>$f(x)$ 在 $x_0$ 领域内有定义，$\Delta x\to 0,\Delta y\to 0$</p><script type="math/tex; mode=display">\lim_{\Delta x\to 0}{\Delta y=\lim_{\Delta x\to 0}}{(f(x_0+\Delta x)-f(x))}=0</script><p>在点上连续（某点连续定义）。</p><ul><li>左连续：$(x_o-\delta,x_o]$</li></ul><script type="math/tex; mode=display">\lim_{x\to x^{-}}{f(x)=f(x_0)}</script><ul><li>右连续：$[x_o,x_o+\delta)$</li></ul><script type="math/tex; mode=display">\lim_{x\to x^{+}}{f(x)=f(x_0)}</script><p>区间连续：</p><script type="math/tex; mode=display">[1,2]=\begin{cases}(1,2)\\1\\2 \end{cases}</script><p>$(1,2)$ 连续，$1$ 右连续，$2$ 左连续。</p><script type="math/tex; mode=display">\lim_{x\to x_0}f(x)=f(x_0)</script><p>间断点：</p><ul><li><p>$x_0$ 有定义</p></li><li><p>$x\to x_0$ ，$f(x)$ 有极限</p></li><li><p>极限 $= f(x_0)$ </p></li></ul><h3 id="间断点"><a href="#间断点" class="headerlink" title="间断点"></a>间断点</h3><ul><li>第一类</li></ul><p>当左右极限相等，则称为可去间断点；左右极限不等，则称为跳跃间断点。</p><p>可取间断点：</p><p><img src="https://s1.ax1x.com/2021/12/10/oI7Lut.png" alt="可取间断点"></p><p>跳跃间断点：</p><p><img src="https://s1.ax1x.com/2021/12/10/oI7vE8.png" alt="跳跃"></p><ul><li>第二类</li></ul><p>左右几点至少有一个不存在。</p><p>无穷间断（$y=\frac{1}{x},x=0$）：</p><p><img src="https://s1.ax1x.com/2021/12/10/oIHpCQ.png" alt="无穷间断"></p><p>振荡：</p><p>举例：</p><script type="math/tex; mode=display">y=\begin{cases}\sin{\frac{1}{x}},(x\not =0)\\0,(x=0)\end{cases}</script><p>图示也算是一种振荡间断点。</p><p><img src="https://s1.ax1x.com/2021/12/10/oIH93j.png" alt="振荡"></p><ul><li>练习：</li></ul><script type="math/tex; mode=display">y=\lim_{n \to \infty}{\frac{1}{1+x^n}},x=1</script><script type="math/tex; mode=display">y=\begin{cases}1,(0\leqslant x < 1)\\\frac{1}{2},(x=1)\\0,(x>1)\end{cases}</script><p>第一类间断点。</p><h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><script type="math/tex; mode=display">g(x)\pm f(x)</script><script type="math/tex; mode=display">g(x)f(x)</script><script type="math/tex; mode=display">\frac{f(x)}{g(x)}</script><p>其中：</p><script type="math/tex; mode=display">(g(x)\not = 0)</script><p>连续多项式：</p><p>$a<em>0x^n+a_1x^{n-1}+…+a</em>{n-1}x+a_n(-\infty,+\infty)$</p><p>分式：多项式除多项式</p><p>复合多项式：</p><script type="math/tex; mode=display">y=f(k),k=g(x)</script><p>分别连续，极限可以换到另一个函数中（括号内）。</p><p>反函数</p><p>练习：</p><script type="math/tex; mode=display">f(x)=\begin{cases}a+x,(x\leqslant 0)(-\infty,0]\\x^2+1,(0 < x < 1),(0,1)\\\frac{b}{x},(x \geqslant 1),[1,+\infty))\end{cases}</script><p>$x=0$ 时，$f(0)=a$</p><script type="math/tex; mode=display">\lim_{x\to 0^{-}}{f(x)}=a</script><script type="math/tex; mode=display">\lim_{x\to 0^{+}}{f(x)}=1</script><script type="math/tex; mode=display">a=1</script><p>$x=1$ 时，$f(1)=b$</p><script type="math/tex; mode=display">\lim_{x\to 1^{-}}{f(x)}=2</script><script type="math/tex; mode=display">\lim_{x\to 1^{+}}{f(x)}=b</script><script type="math/tex; mode=display">b=2</script><p>闭区间上的连续性质</p><ul><li><p>（有界性）$[a,b]$ 连续有界</p></li><li><p>（最值性）有最大最小值</p></li><li><p>（介值性）$x_1 &lt; k &lt; x_2$ 必定存在 $f(x_0)=k$</p></li></ul><h2 id="零点存在定理"><a href="#零点存在定理" class="headerlink" title="零点存在定理"></a>零点存在定理</h2><p>$[a,b]$ 连续，$f(a)f(b) &lt; 0$</p><p><img src="https://s1.ax1x.com/2021/12/10/oI773d.png" alt="零点存在"></p><p>在 $[a,b]$ 有一点 $x$，$f(x)=0$</p><ul><li>练习：</li></ul><p>$e_{3x}-x=2$，求 $(0,1)$ 至少有一个实根。</p><p>$f(x)=e^{3x}-x-2=0$ 在 $[0,1]$ 连续。</p><p>$f(0)=1-2=-1,f(1)=e^3-3&gt;0$</p><p>根据零点存在定理，$\exists x \in(0,1),f(x)=e^{3x}-x-2=0$</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 极限 </tag>
            
            <tag> 邻域 </tag>
            
            <tag> 数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树套树</title>
      <link href="/2021/12/10/shu-tao-shu/"/>
      <url>/2021/12/10/shu-tao-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="树套树"><a href="#树套树" class="headerlink" title="树套树"></a>树套树</h2><p>在学习 <a href="https://wdsa001.github.io/2021/12/08/er-wei-xian-duan-shu/">二维线段树</a> 时，介绍了线段树套线段树。</p><p>同时确保您已经学会 <a href="https://wdsa001.github.io/2021/09/20/ping-heng-shu-ji-chu/">平衡树</a>。</p><p><a href="https://www.luogu.com.cn/problem/P3380">P3380 【模板】二逼平衡树（树套树）</a></p><ul><li><p>查询 $k$ 在区间内的排名</p></li><li><p>查询<strong>区间</strong>内排名为 $k$ 的值</p></li><li><p>修改某一位值上的数值</p></li><li><p>查询 $k$ 在<strong>区间</strong>内的前驱（前驱定义为严格小于 $x$，且最大的数，若不存在输出 $-2147483647$）</p></li><li><p>查询 $k$ 在<strong>区间</strong>内的后继（后继定义为严格大于 $x$，且最小的数，若不存在输出 $2147483647$）</p></li></ul><p>题目让我们维护的 $5$ 个操作中，但如果没有要求区间，那么就是平衡树模板题，但是要求了区间后，我们就要找区间之间的关系，可以用线段树维护区间之间直接的关系。和二维线段树相同的，先开一个线段树，然后每个节点维护一个平衡树。然后就是基础的模板操作了（只是难写了亿点点）。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">5e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token comment">//一定设到极限大（0x3f3f3f3f 会被卡） </span><span class="token keyword">struct</span> <span class="token class-name">sp</span><span class="token punctuation">{</span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//树的大小 </span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//值相同节点数量 </span><span class="token keyword">int</span> v_l<span class="token punctuation">;</span><span class="token comment">//节点价值 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//左右儿子 </span><span class="token keyword">int</span> f_a<span class="token punctuation">;</span><span class="token comment">//父节点 </span><span class="token punctuation">}</span>t_s<span class="token punctuation">[</span>o_o<span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//平衡树 </span><span class="token keyword">struct</span> <span class="token class-name">tr</span><span class="token punctuation">{</span><span class="token keyword">int</span> l<span class="token punctuation">;</span><span class="token comment">//左儿子 </span><span class="token keyword">int</span> r<span class="token punctuation">;</span><span class="token comment">//右儿子 </span><span class="token keyword">int</span> g_g<span class="token punctuation">;</span><span class="token comment">//平衡树根节点 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//线段树 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原序列 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>x_p<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左子树 </span><span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右子树 </span><span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新子树大小 </span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_s<span class="token punctuation">[</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_s<span class="token punctuation">[</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">t_n</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//旋转平衡树 </span><span class="token keyword">int</span> f<span class="token operator">=</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token punctuation">;</span><span class="token keyword">int</span> f_f<span class="token operator">=</span>t_s<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token punctuation">;</span><span class="token keyword">int</span> k_k<span class="token operator">=</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断节点在父节点的方位 </span><span class="token comment">//旋转操作 </span>t_s<span class="token punctuation">[</span>f_f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>f_f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token operator">=</span>f_f<span class="token punctuation">;</span>t_s<span class="token punctuation">[</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>k_k<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token operator">=</span>f<span class="token punctuation">;</span>t_s<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>k_k<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>k_k<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">;</span>t_s<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//更新新子节点 </span><span class="token function">u_p</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新父节点 </span><span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">s_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> g_g<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token operator">!=</span>g_g<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//没有旋转到根 </span><span class="token keyword">int</span> f<span class="token operator">=</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token punctuation">;</span><span class="token comment">//父节点 </span><span class="token keyword">int</span> f_f<span class="token operator">=</span>t_s<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token punctuation">;</span><span class="token comment">//爷节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>f_f<span class="token operator">!=</span>g_g<span class="token punctuation">)</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>f_f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">t_n</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">t_n</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同方位儿子转节点父亲，否则转接节点 </span><span class="token function">t_n</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//旋转节点 </span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>g_g<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//更新根节点 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">yv</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> f_a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//初始化节点 </span>t_s<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//初值 </span>t_s<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token operator">=</span>f_a<span class="token punctuation">;</span><span class="token comment">//祖先 </span>t_s<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化相同节点数量 </span><span class="token function">u_p</span><span class="token punctuation">(</span>x_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新子树大小 </span><span class="token keyword">return</span> x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n_n<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token punctuation">;</span><span class="token comment">//记录根节点 </span><span class="token keyword">int</span> f_a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化父节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n_n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//初始化平衡树的根 </span>n_n<span class="token operator">=</span><span class="token function">yv</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token operator">=</span>n_n<span class="token punctuation">;</span><span class="token comment">//更新根 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>n_n<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">!=</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找到与当前值相等的点 </span>f_a<span class="token operator">=</span>n_n<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&lt;</span>v<span class="token punctuation">)</span>n_n<span class="token operator">=</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span> n_n<span class="token operator">=</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&amp;&amp;</span>n_n<span class="token punctuation">)</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//找到节点相同的点 </span><span class="token keyword">else</span><span class="token punctuation">{</span>n_n<span class="token operator">=</span><span class="token function">yv</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>f_a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化新节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>f_a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断左右儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>f_a<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&lt;</span>v<span class="token punctuation">)</span>t_s<span class="token punctuation">[</span>f_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>n_n<span class="token punctuation">;</span><span class="token keyword">else</span> t_s<span class="token punctuation">[</span>f_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>n_n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">s_p</span><span class="token punctuation">(</span>n_n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//旋转平衡树</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n_n<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token punctuation">;</span><span class="token comment">//根节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n_n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//找排名 </span><span class="token keyword">while</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&lt;</span>v<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">!=</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//子树有节点，并且找前驱所以值不能相等 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&lt;</span>v<span class="token punctuation">)</span>n_n<span class="token operator">=</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span> n_n<span class="token operator">=</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">s_p</span><span class="token punctuation">(</span>n_n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//旋转平衡树 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">n_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> b_b<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//b_b 0 后继,b_b 1 前驱 </span><span class="token function">f_i</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找 x 的排名 </span><span class="token keyword">int</span> n_n<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token punctuation">;</span><span class="token comment">//记录根节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b_b<span class="token operator">&amp;&amp;</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token operator">&amp;&amp;</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&gt;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> n_n<span class="token punctuation">;</span><span class="token comment">//达到边界，找到目标 </span>n_n<span class="token operator">=</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>b_b<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//跳过边界，往回找 </span><span class="token keyword">while</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>b_b<span class="token punctuation">]</span><span class="token punctuation">)</span>n_n<span class="token operator">=</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>b_b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//逼近目标 </span><span class="token keyword">return</span> n_n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n_n<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token punctuation">;</span><span class="token comment">//记录根节点 </span><span class="token keyword">int</span> q_q<span class="token operator">=</span><span class="token function">n_t</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前驱 </span><span class="token keyword">int</span> h_j<span class="token operator">=</span><span class="token function">n_t</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后继 </span><span class="token function">s_p</span><span class="token punctuation">(</span>h_j<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将后继变为根节点 </span><span class="token function">s_p</span><span class="token punctuation">(</span>q_q<span class="token punctuation">,</span>h_j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将前驱变为根节点子节点 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t_s<span class="token punctuation">[</span>q_q<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//目标节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">--</span>t_s<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">,</span><span class="token function">s_p</span><span class="token punctuation">(</span>k_k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//有多个相同值，减去一个并将目标节点转到根节点 </span><span class="token keyword">else</span> t_s<span class="token punctuation">[</span>q_q<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清空节点 </span><span class="token function">u_p</span><span class="token punctuation">(</span>q_q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//控制边界 </span><span class="token function">a_d</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加最大节点 </span><span class="token function">a_d</span><span class="token punctuation">(</span><span class="token operator">-</span>m_a<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加最小节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//叶子节点 </span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">b_t</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span><span class="token function">b_t</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">s_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> v_l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span>v_l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点平衡树加点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//到叶子节点返回 </span><span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>i<span class="token punctuation">)</span><span class="token function">s_d</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>v_l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span><span class="token keyword">else</span> <span class="token function">s_d</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>i<span class="token punctuation">,</span>v_l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">s_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>y<span class="token operator">||</span>r<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//超过边界 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;=</span>x<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在范围内 </span><span class="token function">f_i</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找排名 </span><span class="token keyword">int</span> n_n<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token punctuation">;</span><span class="token comment">//根据子树大小输出排名 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&gt;=</span>i<span class="token punctuation">)</span><span class="token keyword">return</span> t_s<span class="token punctuation">[</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> t_s<span class="token punctuation">[</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">s_p</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">s_p</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//统计左右子树排名 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">s_g</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k_l<span class="token punctuation">,</span><span class="token keyword">int</span> v_l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">d_l</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>k_l<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删旧点 </span><span class="token function">a_d</span><span class="token punctuation">(</span>v_l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//补新点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token operator">&amp;&amp;</span>l<span class="token operator">==</span>k_l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//达到目标节点 </span>a_a<span class="token punctuation">[</span>k_l<span class="token punctuation">]</span><span class="token operator">=</span>v_l<span class="token punctuation">;</span><span class="token comment">//更新 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>k_l<span class="token punctuation">)</span><span class="token function">s_g</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>k_l<span class="token punctuation">,</span>v_l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span><span class="token keyword">else</span> <span class="token function">s_g</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>k_l<span class="token punctuation">,</span>v_l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">s_q</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>y<span class="token operator">||</span>r<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span>m_a<span class="token punctuation">;</span><span class="token comment">//不在范围内 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;=</span>x<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_s<span class="token punctuation">[</span><span class="token function">n_t</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token punctuation">;</span><span class="token comment">//在范围内 </span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">s_q</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">s_q</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回最大值（越大越逼近） </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">s_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>y<span class="token operator">||</span>r<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> m_a<span class="token punctuation">;</span><span class="token comment">//不在范围内 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;=</span>x<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_s<span class="token punctuation">[</span><span class="token function">n_t</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token punctuation">;</span><span class="token comment">//在范围内 </span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">s_h</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">s_h</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回最小值（越小越逼近） </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">s_k</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1e8</span><span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//二分找值 </span>m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b_b<span class="token operator">=</span><span class="token function">s_p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//查数的排名 </span><span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token operator">&gt;</span>i<span class="token punctuation">)</span>r<span class="token operator">=</span>m_i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//超过目标排名 </span><span class="token keyword">else</span> l<span class="token operator">=</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a_s<span class="token operator">=</span>m_i<span class="token punctuation">;</span><span class="token comment">//记录目前情况 </span><span class="token punctuation">}</span><span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">b_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">s_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">s_p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查排名 </span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">s_k</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查值 </span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">s_g</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改 </span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">s_q</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前驱 </span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">s_h</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后继 </span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意最导致初始化的时候要保证值足够大。</p><p>会发现不开 $O_2$ 只能过 $3,4$ 个点，开了 $O_2$ 仍有一个点会被卡掉。那就只能玄学优化了。</p><p>我们将建树的过程更改：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//控制边界 </span><span class="token function">a_d</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加最大节点 </span><span class="token function">a_d</span><span class="token punctuation">(</span><span class="token operator">-</span>m_a<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加最小节点 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入范围内节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//叶子节点 </span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">b_t</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span><span class="token function">b_t</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接将每个线段树节点的值范围办函的点全部读入。</p><p>再加两个宏：<br></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">l_s</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">r_s</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>来访问左右儿子。<p></p><p>注意多次调用函数，会使效率降低，所以<strong>删去</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左子树 </span><span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右子树 </span><span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接计算。</p><p>还有判断“优化”：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&lt;</span>v<span class="token punctuation">)</span>n_n<span class="token operator">=</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span> n_n<span class="token operator">=</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以写成：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">n_n<span class="token operator">=</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&lt;</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后函数前加上 <code>inline</code>。</p><p><del>记得开 $O_2$</del></p><h3 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">il</span> <span class="token expression"><span class="token keyword">inline</span></span></span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e4</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">l_s</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">r_s</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ts</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> s_z<span class="token punctuation">,</span>n<span class="token punctuation">,</span>v_l<span class="token punctuation">,</span>s_n<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f_a<span class="token punctuation">;</span><span class="token punctuation">}</span>t_s<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">t_r</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>g_g<span class="token punctuation">;</span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>x_p<span class="token punctuation">;</span>il <span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_s<span class="token punctuation">[</span><span class="token function">l_s</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_s<span class="token punctuation">[</span><span class="token function">r_s</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">;</span><span class="token punctuation">}</span> il <span class="token keyword">void</span> <span class="token function">t_n</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> f<span class="token operator">=</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token punctuation">;</span><span class="token keyword">int</span> f_f<span class="token operator">=</span>t_s<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token punctuation">;</span><span class="token keyword">int</span> b_b<span class="token operator">=</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    t_s<span class="token punctuation">[</span>f_f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>f_f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token operator">=</span>f_f<span class="token punctuation">;</span>    t_s<span class="token punctuation">[</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>b_b<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token operator">=</span>f<span class="token punctuation">;</span>t_s<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>b_b<span class="token punctuation">]</span><span class="token operator">=</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>b_b<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>b_b<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">;</span>t_s<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token function">u_p</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>il <span class="token keyword">void</span> <span class="token function">s_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> g_g<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token operator">!=</span>g_g<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> f<span class="token operator">=</span>t_s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token punctuation">,</span>f_f<span class="token operator">=</span>t_s<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f_f<span class="token operator">!=</span>g_g<span class="token punctuation">)</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>f_f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">t_n</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">t_n</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">t_n</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>g_g<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span>il <span class="token keyword">int</span> <span class="token function">yv</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> f_a<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_s<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">=</span>v<span class="token punctuation">;</span>t_s<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f_a<span class="token operator">=</span>f_a<span class="token punctuation">;</span>t_s<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">u_p</span><span class="token punctuation">(</span>x_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> x_p<span class="token punctuation">;</span><span class="token punctuation">}</span>il <span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n_n<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token punctuation">;</span><span class="token keyword">int</span> f_a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n_n<span class="token punctuation">)</span><span class="token punctuation">{</span>n_n<span class="token operator">=</span><span class="token function">yv</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token operator">=</span>n_n<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n_n<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l <span class="token operator">!=</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>f_a<span class="token operator">=</span>n_n<span class="token punctuation">,</span>n_n<span class="token operator">=</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&lt;</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&amp;&amp;</span>n_n<span class="token punctuation">)</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>n <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        n_n<span class="token operator">=</span><span class="token function">yv</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>f_a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f_a<span class="token punctuation">)</span>t_s<span class="token punctuation">[</span>f_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>t_s<span class="token punctuation">[</span>f_a<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&lt;</span>x<span class="token punctuation">]</span><span class="token operator">=</span>n_n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">s_p</span><span class="token punctuation">(</span>n_n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>il <span class="token keyword">void</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n_n<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n_n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&lt;</span>x<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">!=</span>x<span class="token punctuation">)</span>        n_n<span class="token operator">=</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&lt;</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">s_p</span><span class="token punctuation">(</span>n_n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>il <span class="token keyword">int</span> <span class="token function">n_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> b_b<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">f_i</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_n<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b_b<span class="token operator">&amp;&amp;</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token operator">&amp;&amp;</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&gt;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> n_n<span class="token punctuation">;</span>    n_n<span class="token operator">=</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>b_b<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>b_b<span class="token punctuation">]</span><span class="token punctuation">)</span>n_n<span class="token operator">=</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>b_b<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n_n<span class="token punctuation">;</span><span class="token punctuation">}</span>il <span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n_n<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token punctuation">;</span><span class="token keyword">int</span> q_q<span class="token operator">=</span><span class="token function">n_t</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_j<span class="token operator">=</span><span class="token function">n_t</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">s_p</span><span class="token punctuation">(</span>h_j<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">s_p</span><span class="token punctuation">(</span>q_q<span class="token punctuation">,</span>h_j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k_l<span class="token operator">=</span>t_s<span class="token punctuation">[</span>q_q<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>k_l<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">--</span>t_s<span class="token punctuation">[</span>k_l<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">;</span><span class="token function">s_p</span><span class="token punctuation">(</span>k_l<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> t_s<span class="token punctuation">[</span>q_q<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">u_p</span><span class="token punctuation">(</span>q_q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">a_d</span><span class="token punctuation">(</span><span class="token operator">-</span>m_a<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">b_t</span><span class="token punctuation">(</span>k<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">b_t</span><span class="token punctuation">(</span>k<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>il <span class="token keyword">int</span> <span class="token function">s_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>y<span class="token operator">||</span>r<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;=</span>x<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">f_i</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_n<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>g_g<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token operator">&gt;=</span>i<span class="token punctuation">)</span><span class="token keyword">return</span> t_s<span class="token punctuation">[</span><span class="token function">l_s</span><span class="token punctuation">(</span>n_n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> t_s<span class="token punctuation">[</span><span class="token function">l_s</span><span class="token punctuation">(</span>n_n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_s<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">s_p</span><span class="token punctuation">(</span>k<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">s_p</span><span class="token punctuation">(</span>k<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>il <span class="token keyword">void</span> <span class="token function">s_g</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k_l<span class="token punctuation">,</span><span class="token keyword">int</span> v_l<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">d_l</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>k_l<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span>v_l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token operator">&amp;&amp;</span>l<span class="token operator">==</span>k_l<span class="token punctuation">)</span><span class="token punctuation">{</span>a_a<span class="token punctuation">[</span>k_l<span class="token punctuation">]</span><span class="token operator">=</span>v_l<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>k_l<span class="token punctuation">)</span><span class="token function">s_g</span><span class="token punctuation">(</span>k<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>k_l<span class="token punctuation">,</span>v_l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">s_g</span><span class="token punctuation">(</span>k<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>k_l<span class="token punctuation">,</span>v_l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>il <span class="token keyword">int</span> <span class="token function">s_q</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>y<span class="token operator">||</span>r<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span>m_a<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;=</span>x<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_s<span class="token punctuation">[</span><span class="token function">n_t</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">s_q</span><span class="token punctuation">(</span>k<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">s_q</span><span class="token punctuation">(</span>k<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>il <span class="token keyword">int</span> <span class="token function">s_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>y<span class="token operator">||</span>r<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> m_a<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;=</span>x<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_s<span class="token punctuation">[</span><span class="token function">n_t</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v_l<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">s_h</span><span class="token punctuation">(</span>k<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">s_h</span><span class="token punctuation">(</span>k<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>il <span class="token keyword">int</span> <span class="token function">s_k</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1e8</span><span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>b_b<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        b_b<span class="token operator">=</span><span class="token function">s_p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token operator">&gt;</span>i<span class="token punctuation">)</span>r<span class="token operator">=</span>m_i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> l<span class="token operator">=</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a_s<span class="token operator">=</span>m_i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> op<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">s_p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">s_k</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">s_g</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">s_q</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">s_h</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题可以用分块的方法写，而且跑的非常快。虽然数据点卡常，但是为了练手，建议写一写，还可以树状数组套平衡树，这里不再赘述，感兴趣可以自己试一试。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀自动机SAM</title>
      <link href="/2021/12/09/hou-zhui-zi-dong-ji-sam/"/>
      <url>/2021/12/09/hou-zhui-zi-dong-ji-sam/</url>
      
        <content type="html"><![CDATA[<p>建议先学会 <a href="https://wdsa001.github.io/2021/09/06/zi-dian-shu-ac-zi-dong-ji/">Trie 图和 AC 自动机</a> 了解自动机大概是什么。</p><h2 id="后缀自动机SAM"><a href="#后缀自动机SAM" class="headerlink" title="后缀自动机SAM"></a>后缀自动机SAM</h2><p><a href="https://www.luogu.com.cn/problem/P3804">P3804 【模板】后缀自动机 (SAM)</a></p><p>请你求出 $S$ 的所有出现次数不为 $1$ 的子串的出现次数乘上该子串长度的最大值。</p><p>对于题目要求，我们首先要统计所有子串的出现次数，还要记录所有子串的长度。如果暴力枚举字符串复杂度为 $O(n^3)$（$O(n^2)$ 的子串枚举，$O(n^2)$ 的子串每位判断），但是如果处理每个字符的新加入的情况，虽然复杂没变，但是如果放在字典树（$Trie$ 树）上匹配时，是 $O(n^2)$ 的复杂度（叶子节点）。因为从整个字符串的判断，变成了点个字符的判断。</p><p>如果要继续优化，那么就要建 $Trie$ 图了。</p><p>这里为了更加直观的描述思路，我们讨论的是一个新考虑字符要经历什么。</p><p>读入后遍历到当前位置了，进入处理函数，初始化新节点出现的次数（子串次数），打一个结尾编号（所有子串，包含以当前字符结尾的情况），开始爬祖先，如果没有量过当前字符，那么更新。</p><p>如果爬<strong>过</strong>了根节点，要特判一下父节点是根节点，返回。否则，就是碰见了相同字符打过的标记，开一个新变量记录一下，如果打过的标记的编号是当前的结束标记之后且相邻的（$+1$），标记打过标记的节点为父节点。</p><p>否则，说明打过标记的节点不是当前编号“亲生”（当前节点出现之后立刻出现的节点），那么开一个新节点，结束编号为当前节点之后（$+1$）。</p><p>新节点继承当前节点所有儿子情况，继承父亲，当前节点重新认新节点为父亲，当前遍历的字符也认新节点为父（新节点是虚点），爬祖先更新节点为新节点。</p><p>统计完了，加边，将所有节点和父节点连边，统计子树大小（字符串出现次数），和结束标记（字符长度）相乘更新结果即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">3e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">char</span> s_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原字符串 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">;</span><span class="token comment">//结果统计 </span><span class="token keyword">int</span> m_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存 trie 树 </span><span class="token keyword">int</span> f_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//父节点 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> s_n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//节点编号 </span><span class="token keyword">int</span> e_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//结束长度 </span><span class="token keyword">int</span> n_m<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子树大小 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//加边 </span>p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">i_n</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l_t<span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//记录上一个字符的位置 </span>n_m<span class="token punctuation">[</span>k_k<span class="token operator">=</span><span class="token operator">++</span>s_n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化新节点次数 </span>e_d<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//新字符串结尾编号</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l_t<span class="token operator">&amp;&amp;</span>m_p<span class="token punctuation">[</span>l_t<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存在上一个字符，上一个字符没有连接当前字符 </span>m_p<span class="token punctuation">[</span>l_t<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//连接字符 </span>l_t<span class="token operator">=</span>f_a<span class="token punctuation">[</span>l_t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//爬祖先，回找 </span><span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l_t<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//达到根节点 </span>f_a<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//特判设置父节点 </span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n_w<span class="token operator">=</span>m_p<span class="token punctuation">[</span>l_t<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录当前位置的字符 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e_d<span class="token punctuation">[</span>l_t<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>e_d<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果两个节点是相邻的 </span>f_a<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span>n_w<span class="token punctuation">;</span><span class="token comment">//新节点的父亲为当前位置的字符 </span><span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    e_d<span class="token punctuation">[</span><span class="token operator">++</span>s_n<span class="token punctuation">]</span><span class="token operator">=</span>e_d<span class="token punctuation">[</span>l_t<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//记录结束编号 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>m_p<span class="token punctuation">[</span>s_n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>m_p<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//继承节点儿子 </span>    f_a<span class="token punctuation">[</span>s_n<span class="token punctuation">]</span><span class="token operator">=</span>f_a<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//继承父节点 </span>f_a<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token operator">=</span>s_n<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>f_a<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span>s_n<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l_t<span class="token punctuation">;</span>m_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>n_w<span class="token punctuation">;</span>i<span class="token operator">=</span>f_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>m_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>s_n<span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token function">d_f</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>n_m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>n_m<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//累计每个节点的出现次数 </span><span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n_m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>n_m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>e_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取最大值 </span><span class="token punctuation">}</span><span class="token keyword">int</span> l_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s_s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    l_s<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s_s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>l_s<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">i_n</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s_n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>f_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//父节点和节点之间加边 </span><span class="token function">d_f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出答案 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字典树 </tag>
            
            <tag> SAM自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维线段树</title>
      <link href="/2021/12/08/er-wei-xian-duan-shu/"/>
      <url>/2021/12/08/er-wei-xian-duan-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="二维线段树"><a href="#二维线段树" class="headerlink" title="二维线段树"></a>二维线段树</h2><p>二维线段树目前有两种较为常见的写法：四分树，树套树。这种算法空间要求极大。</p><p><strong>注意：请务必保证您已经学会了 <a href="https://wdsa001.github.io/2021/09/16/xian-duan-shu/">线段树</a>，并有一定程度自己的见解。</strong></p><h3 id="四分树"><a href="#四分树" class="headerlink" title="四分树"></a>四分树</h3><p>将线段树从一维变成二维可以加两个对于 $y$ 轴位置描述条件（就像描述 $x$ 轴的两个描述一样）即可。</p><p>原来的树的节点 $x$ 轴有两个儿子：左右儿子。现在由于多了一维，儿子的数会变多，但是仍可以描述（复杂至极）。现在我们节点 $y$ 轴看也有两个儿子，那么一共就是 $4$ 个儿子，这些儿子的称呼长度也增加了，为了区分必须要加一维的描述，才能知道说的是哪一个。</p><p>需要注意的是：在找中位数的时候（确定范围时，不断二分）我们要两维都满足是叶子，才是真正的叶子。那么就会出现其中一维是叶子结点，但另一维没有达到叶子结点，这是要判断已经确定叶子结点的边界。</p><p>每回二分区间：$[l,mid]$ 和 $[mid+1,r]$，但是当一维已经确定是叶子节点时： $l=r$，所以要判断边界，否则会出现类似：$[4,3]$，$[8,7]$，$…$ 一类的情况（别问我是怎么知道的）。这直接就会导致死循环。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="四分树-1"><a href="#四分树-1" class="headerlink" title="四分树"></a>四分树</h4><p>实现：区间修改，区间求和，区间最大值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">4e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> m_k<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> m_a<span class="token punctuation">;</span><span class="token comment">//记录区间最大值 </span><span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token punctuation">;</span><span class="token comment">//记录区间和 </span><span class="token keyword">long</span> <span class="token keyword">long</span> l_n<span class="token punctuation">;</span><span class="token comment">//懒标记 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//树 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//矩阵原值 </span><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左儿子 </span><span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右儿子 </span><span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点最大值，区结和更新 </span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//更新区间和 </span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新最大值 </span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l_x<span class="token punctuation">,</span><span class="token keyword">int</span> r_x<span class="token punctuation">,</span><span class="token keyword">int</span> l_y<span class="token punctuation">,</span><span class="token keyword">int</span> r_y<span class="token punctuation">,</span><span class="token keyword">int</span> k_x<span class="token punctuation">,</span><span class="token keyword">int</span> k_y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>l_x<span class="token operator">==</span>r_x<span class="token operator">&amp;&amp;</span>l_y<span class="token operator">==</span>r_y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在目标范围内 </span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>a_a<span class="token punctuation">[</span>l_x<span class="token punctuation">]</span><span class="token punctuation">[</span>l_y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//初始化节点值 </span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token operator">=</span>a_a<span class="token punctuation">[</span>l_x<span class="token punctuation">]</span><span class="token punctuation">[</span>l_y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//初始化最大值 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>m_k<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m_k<span class="token punctuation">,</span>k_x<span class="token punctuation">)</span><span class="token punctuation">;</span>m_k<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m_k<span class="token punctuation">,</span>k_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m_x<span class="token operator">=</span><span class="token punctuation">(</span>l_x<span class="token operator">+</span>r_x<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>m_y<span class="token operator">=</span><span class="token punctuation">(</span>l_y<span class="token operator">+</span>r_y<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//注意 if 特判边界，防止死循环 </span><span class="token function">b_t</span><span class="token punctuation">(</span>l_x<span class="token punctuation">,</span>m_x<span class="token punctuation">,</span>l_y<span class="token punctuation">,</span>m_y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//x 轴左儿子，y 轴左儿子（左上角） </span><span class="token keyword">if</span><span class="token punctuation">(</span>m_y<span class="token operator">&lt;</span>r_y<span class="token punctuation">)</span><span class="token function">b_t</span><span class="token punctuation">(</span>l_x<span class="token punctuation">,</span>m_x<span class="token punctuation">,</span>m_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//x 轴左儿子，y 轴右儿子（右上角）（注意判断边界） </span><span class="token keyword">if</span><span class="token punctuation">(</span>m_x<span class="token operator">&lt;</span>r_x<span class="token punctuation">)</span><span class="token function">b_t</span><span class="token punctuation">(</span>m_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_x<span class="token punctuation">,</span>l_y<span class="token punctuation">,</span>m_y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//x 轴右儿子，y 轴右儿子（左下角）（注意判断边界）  </span><span class="token keyword">if</span><span class="token punctuation">(</span>m_x<span class="token operator">&lt;</span>r_x<span class="token operator">&amp;&amp;</span>m_y<span class="token operator">&lt;</span>r_y<span class="token punctuation">)</span><span class="token function">b_t</span><span class="token punctuation">(</span>m_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_x<span class="token punctuation">,</span>m_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//x 轴右儿子，y 轴右儿子（右下角）（注意判断边界）  </span><span class="token function">u_p</span><span class="token punctuation">(</span>k_x<span class="token punctuation">,</span>k_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> l_x<span class="token punctuation">,</span><span class="token keyword">int</span> r_x<span class="token punctuation">,</span><span class="token keyword">int</span> l_y<span class="token punctuation">,</span><span class="token keyword">int</span> r_y<span class="token punctuation">,</span><span class="token keyword">int</span> k_x<span class="token punctuation">,</span><span class="token keyword">int</span> k_y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//没有标记，直接跳过 </span><span class="token keyword">int</span> m_x<span class="token operator">=</span><span class="token punctuation">(</span>l_x<span class="token operator">+</span>r_x<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>m_y<span class="token operator">=</span><span class="token punctuation">(</span>l_y<span class="token operator">+</span>r_y<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//更新子节点区间和 </span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">*</span><span class="token punctuation">(</span>m_x<span class="token operator">-</span>l_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>m_y<span class="token operator">-</span>l_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">*</span><span class="token punctuation">(</span>m_x<span class="token operator">-</span>l_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r_y<span class="token operator">-</span>m_y<span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">*</span><span class="token punctuation">(</span>r_x<span class="token operator">-</span>m_x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>m_y<span class="token operator">-</span>l_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">*</span><span class="token punctuation">(</span>r_x<span class="token operator">-</span>m_x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r_y<span class="token operator">-</span>m_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新子节点区间最大值 </span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">;</span><span class="token comment">//更新子节点区间懒标记 </span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> l_x<span class="token punctuation">,</span><span class="token keyword">int</span> r_x<span class="token punctuation">,</span><span class="token keyword">int</span> x_l<span class="token punctuation">,</span><span class="token keyword">int</span> x_r<span class="token punctuation">,</span><span class="token keyword">int</span> l_y<span class="token punctuation">,</span><span class="token keyword">int</span> r_y<span class="token punctuation">,</span><span class="token keyword">int</span> y_l<span class="token punctuation">,</span><span class="token keyword">int</span> y_r<span class="token punctuation">,</span><span class="token keyword">int</span> k_x<span class="token punctuation">,</span><span class="token keyword">int</span> k_y<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>x_l<span class="token operator">&lt;=</span>l_x<span class="token operator">&amp;&amp;</span>r_x<span class="token operator">&lt;=</span>x_r<span class="token operator">&amp;&amp;</span>y_l<span class="token operator">&lt;=</span>l_y<span class="token operator">&amp;&amp;</span>r_y<span class="token operator">&lt;=</span>y_r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在目标范围内 </span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>v<span class="token operator">*</span><span class="token punctuation">(</span>r_x<span class="token operator">-</span>l_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r_y<span class="token operator">-</span>l_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新区间和 </span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//更新区间最大值 </span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//更新懒标记 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">p_d</span><span class="token punctuation">(</span>l_x<span class="token punctuation">,</span>r_x<span class="token punctuation">,</span>l_y<span class="token punctuation">,</span>r_y<span class="token punctuation">,</span>k_x<span class="token punctuation">,</span>k_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解放当前点懒标记 </span><span class="token keyword">int</span> m_x<span class="token operator">=</span><span class="token punctuation">(</span>l_x<span class="token operator">+</span>r_x<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>m_y<span class="token operator">=</span><span class="token punctuation">(</span>l_y<span class="token operator">+</span>r_y<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//分别更新子节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>m_x<span class="token operator">&gt;=</span>x_l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_y<span class="token operator">&gt;=</span>y_l<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>l_x<span class="token punctuation">,</span>m_x<span class="token punctuation">,</span>x_l<span class="token punctuation">,</span>x_r<span class="token punctuation">,</span>l_y<span class="token punctuation">,</span>m_y<span class="token punctuation">,</span>y_l<span class="token punctuation">,</span>y_r<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_y<span class="token operator">&lt;</span>y_r<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>l_x<span class="token punctuation">,</span>m_x<span class="token punctuation">,</span>x_l<span class="token punctuation">,</span>x_r<span class="token punctuation">,</span>m_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_y<span class="token punctuation">,</span>y_l<span class="token punctuation">,</span>y_r<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_x<span class="token operator">&lt;</span>x_r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_y<span class="token operator">&gt;=</span>y_l<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>m_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_x<span class="token punctuation">,</span>x_l<span class="token punctuation">,</span>x_r<span class="token punctuation">,</span>l_y<span class="token punctuation">,</span>m_y<span class="token punctuation">,</span>y_l<span class="token punctuation">,</span>y_r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_y<span class="token operator">&lt;</span>y_r<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>m_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_x<span class="token punctuation">,</span>x_l<span class="token punctuation">,</span>x_r<span class="token punctuation">,</span>m_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_y<span class="token punctuation">,</span>y_l<span class="token punctuation">,</span>y_r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">u_p</span><span class="token punctuation">(</span>k_x<span class="token punctuation">,</span>k_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点最大值和区间和 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">q_s</span><span class="token punctuation">(</span><span class="token keyword">int</span> l_x<span class="token punctuation">,</span><span class="token keyword">int</span> r_x<span class="token punctuation">,</span><span class="token keyword">int</span> x_l<span class="token punctuation">,</span><span class="token keyword">int</span> x_r<span class="token punctuation">,</span><span class="token keyword">int</span> l_y<span class="token punctuation">,</span><span class="token keyword">int</span> r_y<span class="token punctuation">,</span><span class="token keyword">int</span> y_l<span class="token punctuation">,</span><span class="token keyword">int</span> y_r<span class="token punctuation">,</span><span class="token keyword">int</span> k_x<span class="token punctuation">,</span><span class="token keyword">int</span> k_y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span><span class="token function">p_d</span><span class="token punctuation">(</span>l_x<span class="token punctuation">,</span>r_x<span class="token punctuation">,</span>l_y<span class="token punctuation">,</span>r_y<span class="token punctuation">,</span>k_x<span class="token punctuation">,</span>k_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span><span class="token keyword">if</span><span class="token punctuation">(</span>x_l<span class="token operator">&lt;=</span>l_x<span class="token operator">&amp;&amp;</span>r_x<span class="token operator">&lt;=</span>x_r<span class="token operator">&amp;&amp;</span>y_l<span class="token operator">&lt;=</span>l_y<span class="token operator">&amp;&amp;</span>r_y<span class="token operator">&lt;=</span>y_r<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//返回区间统计的值 </span><span class="token keyword">int</span> m_x<span class="token operator">=</span><span class="token punctuation">(</span>l_x<span class="token operator">+</span>r_x<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>m_y<span class="token operator">=</span><span class="token punctuation">(</span>l_y<span class="token operator">+</span>r_y<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//分别统计子节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>m_x<span class="token operator">&gt;=</span>x_l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_y<span class="token operator">&gt;=</span>y_l<span class="token punctuation">)</span>a_s<span class="token operator">+=</span><span class="token function">q_s</span><span class="token punctuation">(</span>l_x<span class="token punctuation">,</span>m_x<span class="token punctuation">,</span>x_l<span class="token punctuation">,</span>x_r<span class="token punctuation">,</span>l_y<span class="token punctuation">,</span>m_y<span class="token punctuation">,</span>y_l<span class="token punctuation">,</span>y_r<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_y<span class="token operator">&lt;</span>y_r<span class="token operator">&amp;&amp;</span>m_y<span class="token operator">&lt;</span>r_y<span class="token punctuation">)</span>a_s<span class="token operator">+=</span><span class="token function">q_s</span><span class="token punctuation">(</span>l_x<span class="token punctuation">,</span>m_x<span class="token punctuation">,</span>x_l<span class="token punctuation">,</span>x_r<span class="token punctuation">,</span>m_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_y<span class="token punctuation">,</span>y_l<span class="token punctuation">,</span>y_r<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_x<span class="token operator">&lt;</span>x_r<span class="token operator">&amp;&amp;</span>m_x<span class="token operator">&lt;</span>r_x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_y<span class="token operator">&gt;=</span>y_l<span class="token punctuation">)</span>a_s<span class="token operator">+=</span><span class="token function">q_s</span><span class="token punctuation">(</span>m_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_x<span class="token punctuation">,</span>x_l<span class="token punctuation">,</span>x_r<span class="token punctuation">,</span>l_y<span class="token punctuation">,</span>m_y<span class="token punctuation">,</span>y_l<span class="token punctuation">,</span>y_r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_y<span class="token operator">&lt;</span>y_r<span class="token operator">&amp;&amp;</span>m_y<span class="token operator">&lt;</span>r_y<span class="token punctuation">)</span>a_s<span class="token operator">+=</span><span class="token function">q_s</span><span class="token punctuation">(</span>m_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_x<span class="token punctuation">,</span>x_l<span class="token punctuation">,</span>x_r<span class="token punctuation">,</span>m_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_y<span class="token punctuation">,</span>y_l<span class="token punctuation">,</span>y_r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">q_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> l_x<span class="token punctuation">,</span><span class="token keyword">int</span> r_x<span class="token punctuation">,</span><span class="token keyword">int</span> x_l<span class="token punctuation">,</span><span class="token keyword">int</span> x_r<span class="token punctuation">,</span><span class="token keyword">int</span> l_y<span class="token punctuation">,</span><span class="token keyword">int</span> r_y<span class="token punctuation">,</span><span class="token keyword">int</span> y_l<span class="token punctuation">,</span><span class="token keyword">int</span> y_r<span class="token punctuation">,</span><span class="token keyword">int</span> k_x<span class="token punctuation">,</span><span class="token keyword">int</span> k_y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token comment">//最小化最大值 </span><span class="token function">p_d</span><span class="token punctuation">(</span>l_x<span class="token punctuation">,</span>r_x<span class="token punctuation">,</span>l_y<span class="token punctuation">,</span>r_y<span class="token punctuation">,</span>k_x<span class="token punctuation">,</span>k_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span><span class="token keyword">if</span><span class="token punctuation">(</span>x_l<span class="token operator">&lt;=</span>l_x<span class="token operator">&amp;&amp;</span>r_x<span class="token operator">&lt;=</span>x_r<span class="token operator">&amp;&amp;</span>y_l<span class="token operator">&lt;=</span>l_y<span class="token operator">&amp;&amp;</span>r_y<span class="token operator">&lt;=</span>y_r<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">;</span><span class="token comment">//返回区间统计的值 </span><span class="token keyword">int</span> m_x<span class="token operator">=</span><span class="token punctuation">(</span>l_x<span class="token operator">+</span>r_x<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>m_y<span class="token operator">=</span><span class="token punctuation">(</span>l_y<span class="token operator">+</span>r_y<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//分别统计子节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>m_x<span class="token operator">&gt;=</span>x_l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_y<span class="token operator">&gt;=</span>y_l<span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span><span class="token function">q_m</span><span class="token punctuation">(</span>l_x<span class="token punctuation">,</span>m_x<span class="token punctuation">,</span>x_l<span class="token punctuation">,</span>x_r<span class="token punctuation">,</span>l_y<span class="token punctuation">,</span>m_y<span class="token punctuation">,</span>y_l<span class="token punctuation">,</span>y_r<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_y<span class="token operator">&lt;</span>y_r<span class="token operator">&amp;&amp;</span>m_y<span class="token operator">&lt;</span>r_y<span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span><span class="token function">q_m</span><span class="token punctuation">(</span>l_x<span class="token punctuation">,</span>m_x<span class="token punctuation">,</span>x_l<span class="token punctuation">,</span>x_r<span class="token punctuation">,</span>m_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_y<span class="token punctuation">,</span>y_l<span class="token punctuation">,</span>y_r<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_x<span class="token operator">&lt;</span>x_r<span class="token operator">&amp;&amp;</span>m_x<span class="token operator">&lt;</span>r_x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_y<span class="token operator">&gt;=</span>y_l<span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span><span class="token function">q_m</span><span class="token punctuation">(</span>m_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_x<span class="token punctuation">,</span>x_l<span class="token punctuation">,</span>x_r<span class="token punctuation">,</span>l_y<span class="token punctuation">,</span>m_y<span class="token punctuation">,</span>y_l<span class="token punctuation">,</span>y_r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_y<span class="token operator">&lt;</span>y_r<span class="token operator">&amp;&amp;</span>m_y<span class="token operator">&lt;</span>r_y<span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span><span class="token function">q_m</span><span class="token punctuation">(</span>m_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_x<span class="token punctuation">,</span>x_l<span class="token punctuation">,</span>x_r<span class="token punctuation">,</span>m_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r_y<span class="token punctuation">,</span>y_l<span class="token punctuation">,</span>y_r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"rd.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机数据生成文件 </span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"x_d.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//线段树方法结果 </span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原始矩阵 </span><span class="token function">b_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树 </span><span class="token keyword">int</span> q<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span><span class="token keyword">int</span> x_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>x_1<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>y_1<span class="token punctuation">,</span>y_2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间求和 </span><span class="token keyword">int</span> x_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">q_s</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>x_1<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>y_1<span class="token punctuation">,</span>y_2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//区间最大值 </span><span class="token keyword">int</span> x_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">q_m</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>x_1<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>y_1<span class="token punctuation">,</span>y_2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*3 31 2 34 5 67 8 972 1 1 2 33 2 2 3 31 1 1 2 2 53 1 3 2 31 2 2 3 3 -12 1 2 2 33 2 2 2 3*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是它的复杂度并不优秀。</p><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">2e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"rd.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机数据生成文件 </span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"b_l.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//暴力方法结果 </span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原始矩阵 </span><span class="token keyword">int</span> q<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span><span class="token keyword">int</span> x_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x_1<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_2<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>y_1<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y_2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间求和 </span><span class="token keyword">int</span> x_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x_1<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_2<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>y_1<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y_2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">+=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//区间最大值 </span><span class="token keyword">int</span> x_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> m_a<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x_1<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_2<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>y_1<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y_2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过测试发现，小数据和暴力时间差不多，大数据空间直接爆炸……但是毕竟还是快一点。</p><h4 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e3</span><span class="token punctuation">;</span>mt19937 <span class="token function">m_t</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"rd.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成随机数文件 </span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>o_o<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>o_o<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>m<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//矩形大小 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//初始矩阵 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>o_o<span class="token punctuation">)</span><span class="token operator">-</span>o_o<span class="token operator">/</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> q<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>o_o<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//询问次数 </span>cout<span class="token operator">&lt;&lt;</span>q<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x_1<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x_2<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y_1<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y_2<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x_2<span class="token operator">&lt;</span>x_1<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>x_1<span class="token punctuation">,</span>x_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>y_2<span class="token operator">&lt;</span>y_1<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>y_1<span class="token punctuation">,</span>y_2<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>op<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>x_1<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>y_1<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>x_2<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>y_2<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">//询问区间 </span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token comment">//修改的值 </span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对拍："><a href="#对拍：" class="headerlink" title="对拍："></a>对拍：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;windows.h&gt;</span><span class="token comment">//用来调用 system 的头文件 </span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* while(1){system("rd.exe &gt; rd.txt");//将随机数据放入 rd.txt 中 system("x_d.exe &lt; rd.txt &gt; x_d.txt");//rd.txt 中的数据放到  x_d.exe 中运行，结果放入 x_d.txt system("b_l.exe &lt; rd.txt &gt; b_l.txt");//rd.txt 中的数据放到  b_l.exe 中运行，结果放入 b_l.txt if(system("fc x_d.txt b_l.txt"))break;//比对输出 }*/</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//分别运行代码对应可执行文件 </span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"rd.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"x_d.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"b_l.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"fc x_d.txt b_l.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//比对输出 </span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="树套树"><a href="#树套树" class="headerlink" title="树套树"></a>树套树</h3><p>个人认为这才是真正二维线段树写法。</p><p>先建一棵普通线段树，然后将它的每个节点当成一个新的线段树的根（没错，如果再换一层就是三维线段树）。这是将矩形分为 $x$ 维和 $y$ 维分开考虑。这回先将其中一维确定，在另一位找真正位置，然后更新，而不是同时考虑两维的叶节点。</p><p><a href="https://www.luogu.com.cn/problem/UVA11297">UVA11297 Census</a></p><p>维护单点修改，区间最大值，最小值。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>注意：</p><ul><li><p>建树时，是<strong>每个节点</strong>都是一棵线段树，所以所有节点都要遍历第二维。</p></li><li><p>建树时，第一维的左右节点要保留参数到第二维，判断更新的是叶子节点（赋值），还是“树”节点（更新最大值最小值）。</p></li><li><p>单点更改时，节点最大值最小值更新，要赋特殊值，重新遍历“更新”第二维，否则会更新不全，思考为什么？</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">3e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>m_a<span class="token punctuation">,</span>m_i<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> m_a<span class="token punctuation">;</span><span class="token comment">//最大值 </span><span class="token keyword">int</span> m_i<span class="token punctuation">;</span><span class="token comment">//最小值 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左子树 </span><span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右子树 </span><span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_y</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新第二位 </span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_x</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新第二位 </span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> k_x<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k_y<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">!=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//非叶子节点 </span>        <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token function">b_2</span><span class="token punctuation">(</span>k_x<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">b_2</span><span class="token punctuation">(</span>k_x<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">u_y</span><span class="token punctuation">(</span>k_x<span class="token punctuation">,</span>k_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新第二维的最大最小值 </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token operator">=</span>a_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//矩形小单位 </span>        <span class="token keyword">else</span> <span class="token function">u_x</span><span class="token punctuation">(</span>k_x<span class="token punctuation">,</span>k_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新第一维最大最小值 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">b_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> k_x<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">!=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//非叶子节点 </span>        <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token function">b_1</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">b_1</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//处理第二维 </span>    <span class="token function">b_2</span><span class="token punctuation">(</span>k_x<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">q_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> k_y<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k_x<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;=</span>x<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在范围内，更新结果 </span>        m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_i<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>m_i<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//找范围 </span>        <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>m_i<span class="token punctuation">)</span><span class="token function">q_2</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>k_x<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&gt;</span>m_i<span class="token punctuation">)</span><span class="token function">q_2</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>k_x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">q_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> k_x<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> x_2<span class="token punctuation">,</span><span class="token keyword">int</span> y_2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//第一维查找 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;=</span>x<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token function">q_2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span>y_2<span class="token punctuation">,</span>k_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在范围内，找第二维 </span>    <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//找范围 </span>        <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>m_i<span class="token punctuation">)</span><span class="token function">q_1</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span>y_2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&gt;</span>m_i<span class="token punctuation">)</span><span class="token function">q_1</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span>y_2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> k_y<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> q<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> k_x<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找到节点 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">u_x</span><span class="token punctuation">(</span>k_x<span class="token punctuation">,</span>k_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新第一维 </span><span class="token keyword">else</span> t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token punctuation">[</span>k_y<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//更新节点 </span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment">//找范围 </span>    <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>q<span class="token punctuation">)</span><span class="token function">u_2</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>q<span class="token punctuation">,</span>v<span class="token punctuation">,</span>k_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">u_2</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_y<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>q<span class="token punctuation">,</span>v<span class="token punctuation">,</span>k_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">u_y</span><span class="token punctuation">(</span>k_x<span class="token punctuation">,</span>k_y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">u_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> k_x<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token function">u_2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>y<span class="token punctuation">,</span>v<span class="token punctuation">,</span>k_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到要改的点的第一维 </span>    <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//找范围 </span>        <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>m_i<span class="token punctuation">)</span><span class="token function">u_1</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">u_1</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k_x<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">u_2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>k_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入初始矩阵 </span>    <span class="token function">b_1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树 </span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">!=</span><span class="token string">'c'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">!=</span><span class="token string">'q'</span><span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间最大，最小值 </span>            <span class="token keyword">int</span> x_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_i<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>m_a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">q_1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>x_1<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span>y_1<span class="token punctuation">,</span>y_2<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>m_a<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//单点更新 </span>            <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">u_1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然这道题暴力能过，但是建议用来练手。题解区有大佬用的四分树，但是时间要比树套树慢的多。</p><p>个人推荐第二种写法。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 对拍 </tag>
            
            <tag> 二维线段树 </tag>
            
            <tag> 四分树 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prufer序</title>
      <link href="/2021/12/07/prufer-xu/"/>
      <url>/2021/12/07/prufer-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="prufer-序"><a href="#prufer-序" class="headerlink" title="prufer 序"></a>prufer 序</h2><p><a href="https://www.luogu.com.cn/problem/P6086">P6086 【模板】Prufer 序列</a></p><p>$prufer$ 序列可以将一个<strong>带标号</strong> $n$ 个结点的树用 $[1,n]$ 中的 $n-2$ 个整数表示。或者可以说，一个 $prufer$ 序对应一个无根树。</p><p>$prufer$ 构造方式：每回将编号最小的叶节点删掉，记录连接它的<strong>唯一</strong>节点，最后就剩两个节点就结束操作。得到的记录的数列就是 $prufer$ 序列。一个简单的图示：</p><p><img src="https://s4.ax1x.com/2021/12/07/ocSqY9.png" alt="prufer序"></p><p>我们根据它的构造原理，很简单就能搞明白为什么会有<strong>唯一对应关系</strong>。</p><p>$prufer$ 序列的性质：</p><ul><li><p>在构造完 $prufer$ 序列后原树中会剩下两个结点，其中一个一定是编号最大的点 。</p></li><li><p>每个结点在序列中出现的次数是其度数减 $1$。（没有出现的就是叶结点）</p></li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>在这到题目中，规定了根节点 $n$，这样，在父节点确定时，$prufer$ 序是唯一的，我们已经知道了每个点的父节点，或者 $prufer$ 序，即让我们无根树和 $prufer$ 序相互转换。由于结果已经知道是唯一的，所以只要知道构造方法就可以得出结果。</p><p>互相转换的关键在于，$pruerl$ 构造原理：每回都是将最小节点除去，记录它的唯一连接节点。</p><p><del>细节就看代码吧。</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> f_f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//父数组 </span><span class="token keyword">int</span> p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//prufer 序 </span><span class="token keyword">int</span> s_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//统计节点出现的次数 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有根树转 prufer 序列 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>f_f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入序列 </span><span class="token operator">++</span>s_s<span class="token punctuation">[</span>f_f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//（父）节点的度加 1  </span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">++</span>j<span class="token punctuation">;</span><span class="token comment">//找编号最小的节点 </span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f_f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//加入 prufer 序列 </span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token operator">--</span>s_s<span class="token punctuation">[</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>p_p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f_f<span class="token punctuation">[</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//父节点小，加入 prufer 序列。 </span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">^=</span><span class="token number">1ll</span><span class="token operator">*</span>i<span class="token operator">*</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//统计权值 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">s_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//prufer 序列转有根树 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入序列 </span><span class="token operator">++</span>s_s<span class="token punctuation">[</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//（父）节点深度加一 </span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token comment">//题目中说读入将 n 设为根，最后一定的 prufer 一定是 n。  </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">++</span>j<span class="token punctuation">;</span><span class="token comment">//找编号最小的节点 </span>f_f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//加入父序列 </span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token operator">--</span>s_s<span class="token punctuation">[</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>f_f<span class="token punctuation">[</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//父节点小，加入父序列 </span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">^=</span><span class="token number">1ll</span><span class="token operator">*</span>i<span class="token operator">*</span>f_f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//统计权值 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入树的点数 </span><span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转化类型 </span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">f_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//父亲序列 </span><span class="token keyword">else</span> <span class="token function">s_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//prufer 序列 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li>如果题目中没有规定 $n$ 为根节点，也没有规定父子节点关系，有多少种 $prufer$ 序？</li></ul><p>这就是 $Cayley$ 公式。</p><p>若该完全图有 $n$ 个节点，则任意一个长度为 $n-2$ 的 $prufer$ 序列都可以重构出其一棵生成树，且各不相同。又因为 $prufer$ 序列的值域在 $[1,n]$ ，所以总共有 $n^{n-2}$ 种情况。</p><ul><li>有 $n$ 个点，能组成多少个有根树？</li></ul><p>和无根树不同出在于根节点不同，一共有 $n\times n^{n-2}=n^{n-1}$ 种情况。</p><p>我们知道每个点的度数和在 $prufer$ 序中出现的次数关系有关：</p><ul><li>给定 $n$ 个点，每个点的度数为 $d_i$，无根树有多少种？</li></ul><p>因为 $prefur$ 序的长度 $n-2$ 则有 $(n-2)!$ 中排法，其中每个点又会出现重复的贡献 $(d_i-1)!$ 次。</p><p>所以最后一共有：</p><script type="math/tex; mode=display">\frac{(n-2)!}{\Pi^{n}_{i=1}{(d_i-1)!}}</script><p>种结果。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 模板 </tag>
            
            <tag> prufer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀数组</title>
      <link href="/2021/12/07/hou-zhui-shu-zu/"/>
      <url>/2021/12/07/hou-zhui-shu-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h2><p>后缀数组释然给我们讲原串的每个元素在原串中的后缀按照字典序从大到小排序。</p><p>首先介绍几个数组的意义 <code>sa</code>，<code>rank</code>，<code>height</code>：</p><p><img src="https://s4.ax1x.com/2021/12/07/o6CjgI.png" alt="后缀数组"></p><p>在排序的时候一般会用 $n^2\log{n}$ 的 <code>string</code> $\times $ <code>sort</code>，字符串比对的复杂度 $n$，共排序 $n$ 次，$n\log{n}$ 的排序复杂度。</p><p>但是它是字符串，是逐位匹配，所以可以用 <a href="https://wdsa001.github.io/2021/08/10/pai-xu/#toc-heading-10">基数排序</a> 的思想，然后套一个倍增的思路。</p><p><img src="https://s4.ax1x.com/2021/12/07/o6uVBj.png" alt="倍增优化"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存原字符串 </span><span class="token keyword">int</span> c_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储字符串以某种元素开头的大致位置 </span><span class="token keyword">int</span> s_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//复制 s 字符串 </span><span class="token keyword">int</span> s_y<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//新的需要排序的元素 </span><span class="token keyword">int</span> s_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//根据字典排序后，按顺序的每个字符串的原位置 </span><span class="token keyword">int</span> r_k<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//排好序后，原位置的字符串去到的新的位置 </span><span class="token keyword">int</span> g_q<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//相邻的两个串的最长公前缀（排好序的字符串） </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token number">66</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">f_n</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//字符重新赋值权值 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> c<span class="token operator">-</span><span class="token string">'0'</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isupper</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> c<span class="token operator">-</span><span class="token string">'A'</span><span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">islower</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> c<span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">+</span><span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">h_z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>s_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>c_c<span class="token punctuation">[</span>s_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//将 s 复制到 s_i 中，并用 c_c 记录各种字符开头的数量 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>c_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>c_c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前缀和，计算每种字符开头的字符串的排名的大致范围（c_c[i-1]-1~c_c[i]） </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>s_a<span class="token punctuation">[</span><span class="token operator">--</span>c_c<span class="token punctuation">[</span>s_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//第一次排序 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//每次比较的长度翻一倍 </span>    <span class="token keyword">int</span> t_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//需要比较元素数组的下标 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>s_y<span class="token punctuation">[</span>t_p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//将需要新比较的元素下标存储 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//从头遍历 </span>      <span class="token keyword">if</span><span class="token punctuation">(</span>s_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span>k<span class="token punctuation">)</span><span class="token comment">//上一次排序后，排名在 k 及之后的数 </span>        s_y<span class="token punctuation">[</span>t_p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>s_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>k<span class="token punctuation">;</span><span class="token comment">//将排名后元素中心赋值排名并存储  </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>c_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>c_c<span class="token punctuation">[</span>s_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//统计每种元素开头数量 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>c_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>c_c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前缀和，每种元素排名的范围 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>s_a<span class="token punctuation">[</span><span class="token operator">--</span>c_c<span class="token punctuation">[</span>s_i<span class="token punctuation">[</span>s_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>s_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//排序 </span>        <span class="token function">swap</span><span class="token punctuation">(</span>s_i<span class="token punctuation">,</span>s_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换 s_y，s_i 数组 </span>    <span class="token comment">//比较新的排名时需要用到旧的位置来确定最后的排名 </span>        t_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化数组下标 </span>    s_i<span class="token punctuation">[</span>s_a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化最高排名 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//全部遍历 </span>      s_i<span class="token punctuation">[</span>s_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>s_y<span class="token punctuation">[</span>s_a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>s_y<span class="token punctuation">[</span>s_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">&gt;</span>n<span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s_y<span class="token punctuation">[</span>s_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token punctuation">(</span>s_a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">&gt;</span>n<span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s_y<span class="token punctuation">[</span>s_a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>t_p<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>t_p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//生成下一次排序的关键字</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>t_p<span class="token operator">&gt;=</span>n<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//超过原字符串长度 </span>    m<span class="token operator">=</span>t_p<span class="token punctuation">;</span><span class="token comment">//更新元素总数 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">g_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找排好序后的最长公共前缀 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>r_k<span class="token punctuation">[</span>s_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//排好序后，原位置的字符串去到的新的位置 </span>  <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化公共长度 </span>  g_q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//最开始的公共前缀一定是 0 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>r_k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//去 1 的位置的数直接跳过 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>k<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//相邻的字符串至少 -1 公共长度 </span>    <span class="token keyword">int</span> j<span class="token operator">=</span>s_a<span class="token punctuation">[</span>r_k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取排序后的 s_a 的当前下标 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">+</span>k<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>j<span class="token operator">+</span>k<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//在字符串内并且可以进行更长的匹配字符串 </span>    g_q<span class="token punctuation">[</span>r_k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//按排好序后，原位置的字符串去到的新的位置，记录匹配长度 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">isupper</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">islower</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不是数字，大小写 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">isupper</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">islower</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//读入字符串 </span>    s<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">f_n</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">h_z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//搞 s_a </span>  <span class="token function">g_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//搞 r_k，g_q </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>s_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出根据字典排序后，按顺序的每个字符串的原位置 </span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>r_k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出排好序后，原位置的字符串去到的新的位置  </span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>g_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出相邻的两个串的最长公前缀（排好序的字符串） </span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 后缀数组 </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然对数e</title>
      <link href="/2021/12/06/zi-ran-dui-shu-e/"/>
      <url>/2021/12/06/zi-ran-dui-shu-e/</url>
      
        <content type="html"><![CDATA[<h2 id="自然对数-e"><a href="#自然对数-e" class="headerlink" title="自然对数 e"></a>自然对数 e</h2><p>很自然的一个常数（<del>手动划掉</del>）</p><p>再网上翻看了不少资料后，发现它并没有 $\pi$ 那么简单理解，更多的解释是一个值为 $2.71828182845904523536⋯$ 的常数，原因是发现不同方面都有它的身影。</p><p>我们从几个简单的例子入手，来大概了解一下它的“自然”。</p><h3 id="增长极限"><a href="#增长极限" class="headerlink" title="增长极限"></a>增长极限</h3><p>我们知道到银行存钱可以“生钱”，一般都会标明“复利”这一概念（通俗来讲：存多少钱，存几年，给多少钱）。那么如果增加涨钱，你会立刻得到很多钱么？</p><p>先在假设在 $1$ 个单位时间内，涨<strong>一</strong>次钱，每次涨<strong>一倍</strong>，那么用公式来表达：</p><script type="math/tex; mode=display">growth=(1+100\%)=2</script><p>$growth$ 代表增长率，现在我们让他增长的快一些，在 $1$ 个单位时间内，涨<strong>两</strong>次钱，那么平均 $\frac{1}{2}$ 个单位时间涨<strong>一</strong>次钱：</p><script type="math/tex; mode=display">growth=(1+\frac{100\%}{2})^2=2.25</script><p>如果单位时间内涨 $10000$ 次，你会一夜暴富么？</p><script type="math/tex; mode=display">growth=(1+\frac{100\%}{10000})^{10000}\approx 2.7181459268</script><p>嗯？怎么和想象的不一样？别急，如果我们单位时间内增长 $n$ 次，就有公式：</p><script type="math/tex; mode=display">growth=\lim_{n\to \infty}(1+\frac{100\%}{n})^n\approx 2.7182818284…=e</script><p>我们的 $e$ 出现了。根据自然增长，“涨”的次数越多，却不会很快的变多，而是有极限的 $e$（虽然它是无限不循环小数）。试想，这其实和现实中的细胞分裂道理相同，如果不加限制的快速增长，那世界会变成什么样子？所以这个常数确实非常“符合”“自然”。</p><script type="math/tex; mode=display">e=\lim_{x\to \infty}{(1+\frac{1}{n})^{n}}</script><p>注意：如果增加涨钱，确实会立刻的到很多钱，我们刚刚讨论的是<strong>增长率</strong>。</p><h3 id="“加减术”"><a href="#“加减术”" class="headerlink" title="“加减术”"></a>“加减术”</h3><p>$2\sin A\times \cos B=\sin(A+B)+\sin(A-B)$</p><p>在很久很久以前如果要计算 $0.258819\times 0.984808$ 会是一个非常麻烦的事情，只能靠手算还要考虑进位。但是有了“加减术”后，可以在三角函数表中找到 $0.258819\approx \sin{15}^{\circ},0.984808\approx \cos{10}^{\circ}$。</p><p>那么就可以直接套公式了：</p><script type="math/tex; mode=display">\sin{15}^{\circ}\times\cos{10}^{\circ}=\frac{1}{2}(\sin{25}^{\circ}+\sin{5}^{\circ})</script><p>然后在三角函数表中找到：$\sin{25}^{\circ}\approx0.422618,\sin{5}^{\circ}\approx0.087156$，得出结果：$\approx0.254887$。</p><p>乘法运算变成了加法运算，是不是很神奇？和 <a href="https://wdsa001.github.io/2021/12/03/fft/">FFT</a> 的想法有些相似。</p><h3 id="约翰-纳皮尔对数"><a href="#约翰-纳皮尔对数" class="headerlink" title="约翰.纳皮尔对数"></a>约翰.纳皮尔对数</h3><p><img src="https://s4.ax1x.com/2021/12/06/oyCsL8.jpg" alt="约翰.纳皮尔对数"></p><p>约翰.纳皮尔用运动来描述对数，一开始有两个粒子，分别在直线和线段上运动，在一开始时两个粒子的初速度相同，但是上面的 $b$ 粒子是匀速直线运动，下面的 $\beta$ 粒子的速度在数值上与它终点的距离相等。</p><p>经过对 $\beta$ 粒子速度的分析（需要微积分的知识，感兴趣的读者可以上网查阅相关内容），最后的到约翰.纳皮尔对数是 $\frac{1}{e}$ 为底的对数。</p><p>随后他有制成了 $10^7$ 的对数表（把圆等分成 $10^7$ 份的精确度），运用方法和“加减术”相同。单他简化的是开放乘法计算，类似于：$\sqrt{a\times b}$ 在表中分别找到 $a$ 对应的值 $k_a$，$b$ 对应的值 $k_b$，最后 $\sqrt{a\times b}=\frac{k_a+k_b}{2}$</p><h3 id="无穷级数"><a href="#无穷级数" class="headerlink" title="无穷级数"></a>无穷级数</h3><script type="math/tex; mode=display">e=\sum_{x=0}^{\infty}{\frac{1}{i!}}=\frac{1}{0!}+\frac{1}{1!}+\frac{1}{2!}+\frac{1}{3!}+…</script><h3 id="相关公式"><a href="#相关公式" class="headerlink" title="相关公式"></a>相关公式</h3><ul><li>欧拉公式：</li></ul><script type="math/tex; mode=display">e^{i\pi}+1=0</script><ul><li>素数定理：</li></ul><script type="math/tex; mode=display">\lim_{e\to \infty}{\frac{\pi(x)\ln{x}}{x}}=1</script><p>$\pi(x)$ 代表小于等于x的素数的个数。 </p><ul><li>高斯正态分布：</li></ul><script type="math/tex; mode=display">f(x)=(\sqrt{2\pi}\times \sigma)^{-1}\times e^{-\frac{(x-a)^2}{2{\sigma}^2}}</script><p>$\sigma$ 代表标准差，$\sigma^2$ 代表方差。</p><p><strong>平时就当成和 $\pi$ 一样的常数处理就行了，只不过，它很“自然”。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 自然对数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展kmp</title>
      <link href="/2021/12/05/kuo-zhan-kmp/"/>
      <url>/2021/12/05/kuo-zhan-kmp/</url>
      
        <content type="html"><![CDATA[<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p><a href="https://www.luogu.com.cn/problem/P3375">P3375 【模板】KMP字符串匹配</a></p><p>首先复习一下 <a href="https://wdsa001.github.io/2021/09/03/kmp-suan-fa/">kmp</a> 算法。在 <code>kmp</code> 算法中，我们不断的“记忆”匹配位置，匹配失败后不重新匹配而是返回上次“记忆”的位置。这种“记忆”想法使得它的复杂度大大降低，而后面所说的 <code>manchar</code> 和扩展 <code>kmp</code> 也用到了这种想法。</p><h2 id="manachar"><a href="#manachar" class="headerlink" title="manachar"></a>manachar</h2><p><a href="https://www.luogu.com.cn/problem/P3805">P3805 【模板】manacher 算法</a></p><p><del>嗯？这不 <code>kmp</code> 吗？和马拉车（<a href="https://wdsa001.github.io/2021/09/03/manacher-suan-fa/">manachar</a>）有啥关系？</del></p><p>通过对比两者代码会发现：相似度极高。这是因为两者的做法虽然不同，但用到的“唤醒”“记忆”的方法却很相似。所以这里放到了一起，进行类比。</p><p>在马拉车中，在确定了一个回文串时，在当前回文串的回文中心后面并被当前回文串包含的回文中心，可以直接“唤醒”这个串的部分“回忆”，然后“记忆”这些“回忆”，在这些“记忆”上继续找即可，而不是重新寻寻找。扩展 <code>kmp</code> 的做法，和它极其相似，甚至代码结构都一模一样。</p><h2 id="扩展KMP"><a href="#扩展KMP" class="headerlink" title="扩展KMP"></a>扩展KMP</h2><p><a href="https://www.luogu.com.cn/problem/P5410">P5410 【模板】扩展 KMP（Z 函数）</a></p><p>题目让我们求 $z$ 权值和 $p$ 权值，不难发现 $z$ 权值要在自身身上“搞事情”，而 $p$ 权值是要在别人身上“搞事情”。这和 <code>kmp</code> 很相似，先自身找匹配，再让别人在自己这里找匹配。所以我们如果解决了自身的“问题”，别人的“问题”也就水到渠成了。</p><p>那么如何解决自己的“问题”呢？</p><p>题目让我们求得是字符串的所有后缀和原串的 <code>LCP</code> （最长公共前缀）。</p><p>我们遍历的过程就是下图：</p><p><img src="https://s4.ax1x.com/2021/12/05/oDDHfg.png" alt="扩展kmp"></p><p><del>画图真费劲</del></p><p>第一个匹配成功是假设已经有匹配成功的段。大棕箭头是当前匹配的位置，大粉箭头是需要“唤醒”的“记忆”的位置。小粉箭头是“记忆”的大小（$z$ 的值），小棕箭头先“读取”小粉箭头的“记忆”，在向后匹配，如果匹配成功结尾超出了目前的范围（$[l,r]$之间的位置）要更新新的区间。</p><p>自己的“问题”解决了，处理别人的“问题”时，注意“唤醒”的是自己身上的“问题”的“记忆”。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">2e7</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_1<span class="token punctuation">,</span>n_2<span class="token punctuation">,</span>z<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//读入字符串 </span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&gt;</span><span class="token string">'z'</span><span class="token operator">||</span>c<span class="token operator">&lt;</span><span class="token string">'a'</span><span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&gt;=</span><span class="token string">'a'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span><span class="token operator">++</span>n_1<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&gt;</span><span class="token string">'z'</span><span class="token operator">||</span>c<span class="token operator">&lt;</span><span class="token string">'a'</span><span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&gt;=</span><span class="token string">'a'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span>b_b<span class="token punctuation">[</span><span class="token operator">++</span>n_2<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算 Z 函数 </span>z<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>n_2<span class="token punctuation">;</span><span class="token comment">//第一位的 z 函数是原串长度 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_2<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理 z 权值 </span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>z<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">+</span>z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n_2<span class="token operator">&amp;&amp;</span>b_b<span class="token punctuation">[</span>i<span class="token operator">+</span>z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>b_b<span class="token punctuation">[</span>z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">++</span>z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span>z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span>r<span class="token punctuation">)</span>l<span class="token operator">=</span>i<span class="token punctuation">,</span>r<span class="token operator">=</span>i<span class="token operator">+</span>z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理 p 权值 </span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>z<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">+</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n_1<span class="token operator">&amp;&amp;</span>a_a<span class="token punctuation">[</span>i<span class="token operator">+</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>b_b<span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">++</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span>r<span class="token punctuation">)</span>l<span class="token operator">=</span>i<span class="token punctuation">,</span>r<span class="token operator">=</span>i<span class="token operator">+</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//计算结果 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_2<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">^=</span><span class="token number">1ll</span><span class="token operator">*</span>i<span class="token operator">*</span><span class="token punctuation">(</span>z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span>a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">^=</span><span class="token number">1ll</span><span class="token operator">*</span>i<span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 模板 </tag>
            
            <tag> KMP </tag>
            
            <tag> manacher </tag>
            
            <tag> 扩展kmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>费用流</title>
      <link href="/2021/12/05/fei-yong-liu/"/>
      <url>/2021/12/05/fei-yong-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="最小费用最大流"><a href="#最小费用最大流" class="headerlink" title="最小费用最大流"></a>最小费用最大流</h2><p><a href="https://www.luogu.com.cn/problem/P3381">P3381 【模板】最小费用最大流</a></p><h3 id="Dinic-费用流"><a href="#Dinic-费用流" class="headerlink" title="Dinic(费用流)"></a>Dinic(费用流)</h3><p>和 <a href="https://wdsa001.github.io/2021/12/04/dinic/">Dinic最大流</a> 的最大的区别在于多了“费用”这一概念（所以不能随心所欲的“流”了）。</p><p>既然不能随心所欲的“流”了，那分层（找增广路的）的意义也不大了。所以就不用写 <code>Bfs</code>，取而代之的 <code>Spfa</code>（或者 <code>Dij</code>），思路变为每回找到花费最小的一条路，一条一条的找，不断更新即可。</p><p>在记录路径时，我们新开两个数组，一个负责存储流过来的节点是谁（类似于存父节点），另一个存储是从那条路流过来的（方便更新反向弧）。在最后更新流量时，通过不断的“爬树”即可。</p><p>注意：</p><ul><li><p>由于多了“费用”，所以连反向边的时候，要将费用取反。</p></li><li><p>虽然要找最小费用，但前提是能流出最大流。</p></li></ul><h3 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h3><ul><li><p>加边（注意反向弧）。</p></li><li><p>判断汇点源点联通（同时计算联通的最小价值）。</p></li><li><p>累计价值和流量。</p></li><li><p>更新经过路径的流量。</p></li><li><p>输出最大流，最小费用。</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">;</span><span class="token comment">//流量 </span><span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token comment">//费用 </span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//标记是否重复访问节点（跑环） </span><span class="token keyword">int</span> l_v<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//节点剩余流量 </span><span class="token keyword">int</span> v_l<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//到当前节点最小价值 </span><span class="token keyword">int</span> f_f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存流向当前点的点 </span><span class="token keyword">int</span> l_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存流向当前点的边 </span><span class="token keyword">int</span> m_l<span class="token punctuation">,</span>m_v<span class="token punctuation">;</span><span class="token comment">//最大流，最小花费 </span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//加边 </span>p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">=</span>c<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q_q<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">s_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//初始化所有数组 </span><span class="token function">memset</span><span class="token punctuation">(</span>b_b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> b_b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>l_v<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> l_v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>v_l<span class="token punctuation">,</span><span class="token number">0x3</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> v_l<span class="token punctuation">)</span><span class="token punctuation">;</span>q_q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//源点入队 </span>b_b<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记 </span>v_l<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//价值初始化 </span>f_f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q_q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k_k<span class="token operator">=</span>q_q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q_q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b_b<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//取消标记 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举出边 </span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>v_l<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&gt;</span>v_l<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">+</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有流量并且价值可以减小 </span>v_l<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>v_l<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">+</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span><span class="token comment">//更新价值 </span>f_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//记录来的点 </span>l_t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//记录来的边的编号 </span>l_v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_v<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最多能流多少 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//没有被标记过（不会跑环） </span>b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记 </span>q_q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入队 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> f_f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//源点汇点是否联通 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加边 </span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反向弧，注意花费取反 </span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">s_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//源点汇点联通，还有流量可流 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t<span class="token punctuation">;</span>m_l<span class="token operator">+=</span>l_v<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//累计流量 </span>m_v<span class="token operator">+=</span>l_v<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">*</span>v_l<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//累计价值 </span><span class="token keyword">while</span><span class="token punctuation">(</span>k_k<span class="token operator">!=</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//没有返回源点 </span>p_p<span class="token punctuation">[</span>l_t<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">-=</span>l_v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新边的流量 </span>p_p<span class="token punctuation">[</span>l_t<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+=</span>l_v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新反向弧的流量 </span>k_k<span class="token operator">=</span>f_f<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//跳上一级 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>m_l<span class="token punctuation">,</span>m_v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出最大流，最小费用 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="有负圈的费用流"><a href="#有负圈的费用流" class="headerlink" title="有负圈的费用流"></a>有负圈的费用流</h2><p><a href="https://www.luogu.com.cn/problem/P7173">P7173 【模板】有负圈的费用流</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>和普通的最小费用最大流的区别在于出现了“负圈”的情况。</p><p>而在上面的 <code>Dinic</code> 算法中，我们用到了 <code>SPFA</code> 来判最小花费，所以如果出现“负圈”，那么就会陷入死循环。</p><p>为了避免这种情况，我们可以先将所有的负边先流满，这样，它就和没有流满的正边的反向弧性质相同了，注意此时我们记录每个点的流量情况。可以让一些节点先“透支”一些流量，注意代价要记录结果。</p><p>现在，对于一些节点剩余的“量”是正数，而另一些是负数。这些值，我们肯定要处理的，这时，我们可以建两个新节点，一个新源点和所有大于零的节点连边（这样才能满足它们的“需求”），一个新汇点和所有小于零的节点连边（让它们多余的“流走”）。</p><p>这时通过新源点和新汇点跑一遍最大费用最小流，尽量满足不同节点的不同“需求”（此时已经不存在负边了，负边是越跑越划算的所以也是跑最小费用最大流）。因为我们一开始假设的是所有负边“流满”，而这之中可定有多余的（达不到最大流量的边），所以通过这次最大费用最小流来将这些“冗余”的“流量”除去。</p><p>满足尽量多的节点后，就可以将源点和汇点正常再跑一遍最小费用最大流了，因为还有一些没有“需求”的节点（没有负边的节点）需要统计。</p><h3 id="代码思路-1"><a href="#代码思路-1" class="headerlink" title="代码思路"></a>代码思路</h3><ul><li><p>加边（注意反向弧）。</p></li><li><p>将所有负边“流满”，并记录节点状态和费用。</p></li><li><p>建新源点和新汇点，并和有需要的节点连边。</p></li><li><p>用新源点和新汇点跑一遍最小费用最大流，去除“冗余”。</p></li><li><p>在跑一遍真正的源点和汇点的最小费用最大流，统计结果，输出即可。</p></li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">;</span><span class="token comment">//边的最大流量 </span><span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token comment">//“路费” </span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> v_l<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//到当前节点最小价值 </span><span class="token keyword">int</span> l_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录流到当前节点的路 </span><span class="token keyword">int</span> l_v<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//最多能流的量 </span><span class="token keyword">int</span> s_m<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//当前点剩余流量 </span><span class="token keyword">bool</span> b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//标记是否重复访问节点（跑环）</span><span class="token keyword">int</span> m_l<span class="token punctuation">,</span>m_v<span class="token punctuation">;</span><span class="token comment">//最大流量，最小花费 </span><span class="token keyword">int</span> s_i<span class="token punctuation">,</span>t_i<span class="token punctuation">;</span><span class="token comment">//临时节点 </span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//加边 </span>p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">=</span>c<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q_q<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">s_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>b_b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> b_b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标记是否重复访问节点（跑环）</span><span class="token function">memset</span><span class="token punctuation">(</span>v_l<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> v_l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化流到当前节点的最小费用 </span>q_q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>v_l<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化费用 </span>b_b<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记 </span>l_v<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>m_a<span class="token punctuation">;</span><span class="token comment">//初始化最多流的量 </span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q_q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k_k<span class="token operator">=</span>q_q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q_q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b_b<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//标记 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>v_l<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&gt;</span>v_l<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">+</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有流量并且更新最小费用 </span>v_l<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>v_l<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">+</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span><span class="token comment">//更新最小费用 </span>l_t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//记录流过来的路 </span>l_v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_v<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最多能流的量 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//标记是否重复访问节点（跑环）</span>b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记 </span>q_q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入队 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> v_l<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">!=</span>v_l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//检查源点汇点是否联通 </span><span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>k_k<span class="token operator">!=</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//未回到原点 </span><span class="token keyword">int</span> i<span class="token operator">=</span>l_t<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//返回流过来的路 </span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">-=</span>l_v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新路径流量 </span>p_p<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+=</span>l_v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新流量 </span>k_k<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//回到流过来的点 </span><span class="token punctuation">}</span>m_l<span class="token operator">+=</span>l_v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//统计流量 </span>m_v<span class="token operator">+=</span>l_v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">*</span>v_l<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//统计费用 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>w<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入 </span><span class="token comment">//加边 </span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>w<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加反向弧 </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//假设所有负边全部流完了 </span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//流量清零 </span><span class="token function">a_d</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">,</span><span class="token operator">-</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反向弧更新 </span>s_m<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">-=</span>w<span class="token punctuation">;</span><span class="token comment">//节点流量更新 </span>s_m<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">+=</span>w<span class="token punctuation">;</span><span class="token comment">//节点流量更新 </span>m_v<span class="token operator">+=</span>w<span class="token operator">*</span>c<span class="token punctuation">;</span><span class="token comment">//统计费用流 </span><span class="token punctuation">}</span><span class="token punctuation">}</span>s_i<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//新源点 </span>t_i<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//新汇点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s_m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//没有流量跳过 </span><span class="token keyword">if</span><span class="token punctuation">(</span>s_m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点需要流量 </span><span class="token function">a_d</span><span class="token punctuation">(</span>s_i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>s_m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//和新源点连边（可以让“量”流过来） </span><span class="token function">a_d</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>s_i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反向弧 </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//节点不需要这些流量 </span><span class="token function">a_d</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>t_i<span class="token punctuation">,</span><span class="token operator">-</span>s_m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//和新汇点连边（可以让“量”流走）</span><span class="token function">a_d</span><span class="token punctuation">(</span>t_i<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反向弧 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//处理所有需求和多余有关的“流动” </span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">s_p</span><span class="token punctuation">(</span>s_i<span class="token punctuation">,</span>t_i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">u_p</span><span class="token punctuation">(</span>s_i<span class="token punctuation">,</span>t_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新节点流量 </span>m_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化最大流量 </span><span class="token comment">//此时问题已经解决了，可以跑正常的最小费用最大流了 </span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">s_p</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">u_p</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//真正流量计算 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>m_l<span class="token punctuation">,</span>m_v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出最大流量，最小费用 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> Dinic </tag>
            
            <tag> spfa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HLPP（最高标号预流推进）</title>
      <link href="/2021/12/04/hlpp/"/>
      <url>/2021/12/04/hlpp/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4722">传送门</a></p><h2 id="HLPP"><a href="#HLPP" class="headerlink" title="HLPP"></a>HLPP</h2><p>它是 <a href="https://wdsa001.github.io/2021/12/04/dinic/">Dinic</a> 进阶的思想。</p><p>因为 <code>Dinic</code> 的复杂度满足不了本题了，就需要更高级的算法：<code>HLPP</code> 是目前网络流最大流的<strong>最先进</strong>的算法了（起码目前是的）。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>仍要将整个图分层，但这次抽象的分成高度的图，将汇点定义为 $0$ 的高度，所有能到达它的点高度为 $1$，以此类推。具体的操作是将所有的点的高度的初值为最大值，然后不断取最小值，可以达到的最小高度。最后将源点提升到最高的高度（但<strong>不是</strong>最大值！）</p><p>我们知道的是高处的水可以流向低处（常识）。那么我们将源点看成真正的“源泉”，有无穷的水。往下流（限制是每条路的最大流量），如果一个节点的流量用完了，就是说水到了之后，无路可流了，我们就将这个点的高度从新赋成最大值，这样原来能流向它的点，也由于“地势”的变化，流不过去。（简单来说，就是扔掉了这个点。）</p><p>我们不难发现一个事实：从高处流下来的水可能继续向下流。所以我们可以先将高处的水能流的全部流完，然后再流低处的水，这样流低处水的时候，“顺带”流走了高出积累下来的水。然后由于地势的提高（被提高地势的节点会越来越多，直到不能流为止。）最后会返回源点。</p><p>而汇点能流过来的量就是“最大流量”。</p><p>优化：</p><p>由于我们根据的高度进行的点的分层，所以会出现一种情况：一层（同一高度）只剩一个点了，但是这个点已经无路可流了，那么它被提高的同时意味着，<strong>比它高的所有的点都已经没用了</strong>。</p><h3 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h3><ul><li><p>加边（双向边）</p></li><li><p>分层（节点设置高度）</p></li><li><p>统计同一高度节点数量（方便判断上面所说的“优化”）</p></li><li><p>枚举源点的流程（源点的水是无尽的所以特殊处理）</p></li><li><p>处理所有节点流量情况（我们可以开一个优先队列，然高度高的先处理）</p></li><li><p>判断“断层”情况（上面所说的“优化”）</p></li><li><p>输出最终流向汇点的“量”</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>注：本篇代码本着“原汁原味”，没有别的题解的玄学优化，所以时间复杂度会差一些。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">4e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//下一个节点 </span><span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">;</span><span class="token comment">//流量 </span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建边 </span>p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> h_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//节点高度 </span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q_q<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> s_v<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//节点剩余的“量” </span><span class="token keyword">int</span> b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//标记节点是否已经遍历过（防止跑环） </span><span class="token keyword">int</span> g_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//当前高度有多少节点 </span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span><span class="token keyword">return</span> h_t<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&lt;</span>h_t<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>pp<span class="token operator">&gt;</span>p_q<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">b_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//分层图</span><span class="token function">memset</span><span class="token punctuation">(</span>h_t<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> h_t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化高度数组</span>h_t<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//从汇点开始提高度 </span>q_q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q_q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k_k<span class="token operator">=</span>q_q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q_q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举出边 </span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>h_t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&gt;</span>h_t<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//因为是往回找，所以判断反向弧 </span>h_t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>h_t<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//更新高度，使高度尽量小 </span>q_q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入队 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> h_t<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">!=</span>h_t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//源点汇点是否联通 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">x_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点“量”下流 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举出边 </span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>h_t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>h_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//边有流量并且深度是顺着下一层 </span><span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>s_v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">-=</span>a_s<span class="token punctuation">;</span><span class="token comment">//更新边流量 </span>p_p<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+=</span>a_s<span class="token punctuation">;</span><span class="token comment">//更新反向弧流量 </span>s_v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-=</span>a_s<span class="token punctuation">;</span><span class="token comment">//更新节点剩余的“量” </span>s_v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+=</span>a_s<span class="token punctuation">;</span><span class="token comment">//更新下一节点的“量” </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">!=</span>s<span class="token operator">&amp;&amp;</span>v<span class="token operator">!=</span>t<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//流向的不是源点不是汇点并且没遍历过 </span>p_q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入队 </span>b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记 </span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s_v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//没有流量了，退出 </span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">n_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> k_k<span class="token punctuation">)</span><span class="token punctuation">{</span>h_t<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span>h_t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将节点初始化为“不可到达”节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举出边 </span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>h_t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>h_t<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//有可以流的边 </span>h_t<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span>h_t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//更新高度，尽可能的小 </span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建边 </span><span class="token function">a_d</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建反向弧 </span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">b_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//源点汇点不连通直接返回 </span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>h_t<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//源点提到最高的位置 </span><span class="token function">memset</span><span class="token punctuation">(</span>g_p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> g_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//高度节点数初始化为 0  </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>h_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>h_t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>g_p<span class="token punctuation">[</span>h_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//如果节点高度没有被扔掉，说明可以流到，当前高度节点数量增加 1 </span><span class="token comment">//处理源点的流动 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a_s<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">-=</span>a_s<span class="token punctuation">;</span><span class="token comment">//更新边流量 </span>p_p<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+=</span>a_s<span class="token punctuation">;</span><span class="token comment">//更新反向弧流量 </span>s_v<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">-=</span>a_s<span class="token punctuation">;</span><span class="token comment">//更新节点剩余的“量” </span>s_v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+=</span>a_s<span class="token punctuation">;</span><span class="token comment">//更新下一节点的“量” </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">!=</span>s<span class="token operator">&amp;&amp;</span>v<span class="token operator">!=</span>t<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//流向的不是源点不是汇点并且没遍历过 </span>p_q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入队 </span>b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//处理每个节点</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>p_q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k_k<span class="token operator">=</span>p_q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p_q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b_b<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//删除标记 </span><span class="token function">x_l</span><span class="token punctuation">(</span>k_k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点下流 </span><span class="token keyword">if</span><span class="token punctuation">(</span>s_v<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前节点仍有流量 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>g_p<span class="token punctuation">[</span>h_t<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//当前深度没有别的节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举所有节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>s<span class="token operator">&amp;&amp;</span>i<span class="token operator">!=</span>t<span class="token operator">&amp;&amp;</span>h_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>h_t<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>h_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//不为源点和汇点并且比当前节点高度大且没有被扔掉 </span>h_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//将可以到达它的节点扔掉 </span><span class="token function">n_h</span><span class="token punctuation">(</span>k_k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点高度 </span><span class="token operator">++</span>g_p<span class="token punctuation">[</span>h_t<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//当前深度的节点增加 1 </span>p_q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>k_k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入队 </span>b_b<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记 </span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s_v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出最终流向汇点的“量”</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> Dinic </tag>
            
            <tag> HLPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dinic（最大流）</title>
      <link href="/2021/12/04/dinic/"/>
      <url>/2021/12/04/dinic/</url>
      
        <content type="html"><![CDATA[<h2 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h2><p>复习 <a href="https://wdsa001.github.io/2021/10/14/wang-luo-liu-ru-men/">网络流入门</a> <strong>反向弧</strong>（残留网络中改变路径流向的方式）知识。</p><p>最大流就是从源点最多能流向汇点的量。也是图论基础题。</p><p>首先正常一点的思路就是：建边，从源点开始尝试找路径，找到就记录，更新每条边的流量上限，不断找，直到不能流为止。</p><p>但是这样会导致有些路径并不是最优路径，所以就加上反向弧的优化，这样保证了最后计算的一定是最优解。</p><p>虽然结果却是无误，但是这样并不能通过本题，会发现有 $3$~$4$ 个点 <code>TLE</code> 。</p><p><a href="https://www.luogu.com.cn/problem/P3376">P3376 【模板】网络最大流</a></p><h3 id="普通代码"><a href="#普通代码" class="headerlink" title="普通代码"></a>普通代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建边</span>p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> v_v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>t<span class="token punctuation">)</span><span class="token keyword">return</span> v_v<span class="token punctuation">;</span><span class="token comment">//到目标点，输出 </span>b_b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举出边 </span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">||</span><span class="token operator">!</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//已经走过或者没有流量结束 </span><span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//统计结果 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_s<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>v_v<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//成功流向汇点 </span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">-=</span>a_s<span class="token punctuation">;</span><span class="token comment">//更新流出量 </span>p_p<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+=</span>a_s<span class="token punctuation">;</span><span class="token comment">//反向边更新流量 </span><span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连正向边 </span><span class="token function">a_d</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建反向边 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化答案 </span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>b_b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> b_b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点标记 </span>a_s<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">1e18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新流出量 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_s<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>s_m<span class="token operator">+=</span>a_s<span class="token punctuation">;</span><span class="token comment">//统计结果 </span><span class="token punctuation">}</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>s_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h2><p>这时候，就需要介绍一下 <code>Dinic</code> 算法了。</p><p><code>Dinic</code> 算法的精髓在于<strong>图的分层且支持反向弧</strong>，我们会发现在找 <code>dfs</code> 会不断更改之前错误的决策，或者更优的决策，例如下图：</p><p><img src="https://i.loli.net/2020/02/02/kw3SLxGYOCepVZM.gif" alt="需要更新更优决策"></p><p>而 <code>Dinic</code> 解决这种方式采取的策略是，先跑一遍 <code>Bfs</code> 将整个图分层（给每个点打一个深度标志）。在 <code>Dfs</code> 的时候进行判段，如果深度刚好大 $1$，那么就可以流，否则不能流，更新后的图从新分层。</p><p>这样将长的路径流完后，不能再流了，在 <code>Bfs</code> 时，就直接“淘汰”不能用的点了，所以短路径也会被计算。</p><p>其他的和“普通代码”没有什么区别了。</p><h3 id="Dinic代码"><a href="#Dinic代码" class="headerlink" title="Dinic代码"></a>Dinic代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">;</span><span class="token comment">//边的流量 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//下一个节点 </span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建边 </span>p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//深度</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s_s<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">b_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//分层 </span><span class="token function">memset</span><span class="token punctuation">(</span>d_p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> d_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空深度 </span>s_s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从原点开始记录深度 </span>d_p<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//深度初始化 </span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s_s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k_k<span class="token operator">=</span>s_s<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s_s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举连边 </span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>d_p<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//没被遍历过并且有流向边 </span>d_p<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//赋值 </span>s_s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进入队列 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> d_p<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//如果能流返回值 &gt;1，否则返回 0 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> v_v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>t<span class="token punctuation">)</span><span class="token keyword">return</span> v_v<span class="token punctuation">;</span><span class="token comment">//到达目的地，结束 </span><span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//统计结果 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举连边 </span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>d_p<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span>d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有流边，并且深度是下一层 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token function">d_f</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v_v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录流边结果 </span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">-=</span>a_s<span class="token punctuation">;</span><span class="token comment">//更新流量 </span>p_p<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+=</span>a_s<span class="token punctuation">;</span><span class="token comment">//更新反向边流量 </span>v_v<span class="token operator">-=</span>a_s<span class="token punctuation">;</span><span class="token comment">//总流量分配一部分给成功流走的量 </span>s_m<span class="token operator">+=</span>a_s<span class="token punctuation">;</span><span class="token comment">//统计结果 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>s_m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//没找到边可流，取消标记 </span><span class="token keyword">return</span> s_m<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建正向边 </span><span class="token function">a_d</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建反向边 </span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">b_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a_s<span class="token operator">+=</span><span class="token function">d_f</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">1e18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//统计结果 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> Dinic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵求逆</title>
      <link href="/2021/12/04/ju-zhen-qiu-ni/"/>
      <url>/2021/12/04/ju-zhen-qiu-ni/</url>
      
        <content type="html"><![CDATA[<h2 id="矩阵求逆"><a href="#矩阵求逆" class="headerlink" title="矩阵求逆"></a>矩阵求逆</h2><h3 id="矩阵乘法运算"><a href="#矩阵乘法运算" class="headerlink" title="矩阵乘法运算"></a>矩阵乘法运算</h3><p>复习一下矩阵乘法的运算规则。</p><p><a href="https://wdsa001.github.io/2021/09/08/kuai-su-jiang-ci/#toc-heading-4">矩阵快速幂</a></p><script type="math/tex; mode=display">\left[\begin{matrix}a&b&c\\d&e&f\\g&h&i\\\end{matrix}\right]\left[\begin{matrix}j&k&l\\m&n&o\\p&q&r\\\end{matrix}\right]=\left[\begin{matrix}aj+bm+cp&ak+bn+cq&al+bo+cr\\dj+em+fp&dk+en+fq&dl+eo+fr\\gj+hm+ip&gk+hn+iq&gl+ho+ir\\\end{matrix}\right]</script><h3 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h3><p>有：</p><script type="math/tex; mode=display">A=\left[\begin{matrix}a&b\\c&d\\\end{matrix}\right]</script><p>则：</p><script type="math/tex; mode=display">|A|=ad-bc</script><h3 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h3><p>现在有矩阵：</p><script type="math/tex; mode=display">A=\left[\begin{matrix}1&0\\1&4\\\end{matrix}\right]</script><p>什么是逆矩阵呢？</p><p>就是我们要找到一个 $A^{-1}$，使得：</p><script type="math/tex; mode=display">AA^{-1}=\left[\begin{matrix}1&0\\0&1\\\end{matrix}\right]</script><p>二阶矩阵求逆直接套用公式即可：</p><script type="math/tex; mode=display">A=\left[\begin{matrix}a&b\\c&d\\\end{matrix}\right]</script><script type="math/tex; mode=display">A^{-1}=|A|\left[\begin{matrix}d&-b\\-c&a\\\end{matrix}\right]=\left[\begin{matrix}\frac{d}{ad-bc}&\frac{-b}{ad-bc}\\\frac{-c}{ad-bc}&\frac{a}{ad-bc}\\\end{matrix}\right]</script><p>所以</p><script type="math/tex; mode=display">A=\left[\begin{matrix}1&0\\1&4\\\end{matrix}\right]</script><p>的逆矩阵为：</p><script type="math/tex; mode=display">A^{-1}=\left[\begin{matrix}1&0\\-\frac{1}{4}&\frac{1}{4}\\\end{matrix}\right]</script><script type="math/tex; mode=display">AA^{-1}=\left[\begin{matrix}1&0\\1&4\\\end{matrix}\right]\left[\begin{matrix}1&0\\-\frac{1}{4}&\frac{1}{4}\\\end{matrix}\right]=\left[\begin{matrix}1&0\\0&1\\\end{matrix}\right]</script><h3 id="初等变换"><a href="#初等变换" class="headerlink" title="初等变换"></a>初等变换</h3><p>基本求逆矩阵的方法。</p><p>假设我们现在有一个三阶矩阵：</p><script type="math/tex; mode=display">A=\left[\begin{matrix}1&3&4\\6&2&4\\0&1&2\\\end{matrix}\right]</script><p>我们需要一个<strong>伴随矩阵</strong> $E$，当 $A$ 变成 $E$ 时，$E$ 即为 $A^{-1}$。</p><script type="math/tex; mode=display">\left[\begin{matrix}1&3&4&|&1&0&0\\6&2&4&|&0&1&0\\0&1&2&|&0&0&1\\\end{matrix}\right]</script><p>虚线右边即为伴随矩阵。</p><p>这是我们通过不断的消数，使 $A$ 变成 $E$ 的样子。</p><p>消数的方式是将两<strong>整行</strong>相减。或者是将整行乘或除一个数，使关键位置变成 $1$。</p><p>以下为<strong>其中一种</strong>过程：</p><script type="math/tex; mode=display">\left[\begin{matrix}1&3&4&|&1&0&0\\6&2&4&|&0&1&0\\0&1&2&|&0&0&1\\\end{matrix}\right]</script><p>消去第二行第一列的 $6$，可以让第二行减去六倍的第一行。</p><script type="math/tex; mode=display">\left[\begin{matrix}1&3&4&|&1&0&0\\0&-16&-20&|&-6&1&0\\0&1&2&|&0&0&1\\\end{matrix}\right]</script><p>将第二行关键位置变成 $1$，整行 $\times -\frac{1}{16}$。</p><script type="math/tex; mode=display">\left[\begin{matrix}1&3&4&|&1&0&0\\0&1&\frac{5}{4}&|&\frac{3}{8}&-\frac{1}{16}&0\\0&1&2&|&0&0&1\\\end{matrix}\right]</script><p>消去第三行第二列的 $1$，让第三行将去第二行即可。</p><script type="math/tex; mode=display">\left[\begin{matrix}1&3&4&|&1&0&0\\0&1&\frac{5}{4}&|&\frac{3}{8}&-\frac{1}{16}&0\\0&0&\frac{3}{4}&|&-\frac{3}{8}&\frac{1}{16}&1\\\end{matrix}\right]</script><p>将第三行关键位置变成 $1$，整行 $\times \frac{4}{3}$。</p><script type="math/tex; mode=display">\left[\begin{matrix}1&3&4&|&1&0&0\\0&1&\frac{5}{4}&|&\frac{3}{8}&-\frac{1}{16}&0\\0&0&1&|&-\frac{1}{2}&\frac{1}{12}&\frac{4}{3}\\\end{matrix}\right]</script><p>将第一行第二列的 $3$ 消掉，第一行减去三倍的第二行……</p><p>笔者的方法可能比较麻烦（一边先通过行之间加减，只剩关键位置，再处理整行的乘除），但是通过类似的方式，就会得到：</p><script type="math/tex; mode=display">\left[\begin{matrix}1&0&0&|&0&\frac{1}{6}&-\frac{1}{3}\\0&1&0&|&1&-\frac{1}{6}&-\frac{5}{3}\\0&0&1&|&-\frac{1}{2}&\frac{1}{12}&\frac{4}{3}\\\end{matrix}\right]</script><p>此时的</p><script type="math/tex; mode=display">E=\left[\begin{matrix}0&\frac{1}{6}&-\frac{1}{3}\\1&-\frac{1}{6}&-\frac{5}{3}\\-\frac{1}{2}&\frac{1}{12}&\frac{4}{3}\\\end{matrix}\right]=A^{-1}</script><p><strong>注意</strong></p><p>有时一行的关键位置为零，可以通过交换两行，或加减其它行，来解决问题。</p><p>例如：</p><script type="math/tex; mode=display">\left[\begin{matrix}0&1&1&|&1&0&0\\1&1&2&|&0&1&0\\0&1&0&|&0&0&1\\\end{matrix}\right]</script><p>交换一二行。</p><script type="math/tex; mode=display">\left[\begin{matrix}1&1&2&|&0&1&0\\0&1&1&|&1&0&0\\0&1&0&|&0&0&1\\\end{matrix}\right]</script><p>交换二三行。</p><script type="math/tex; mode=display">\left[\begin{matrix}1&1&2&|&0&1&0\\0&1&0&|&0&0&1\\0&1&1&|&1&0&0\\\end{matrix}\right]</script><p>现在就可以对矩阵进行处理，得带逆矩阵了。</p><h3 id="逆矩阵无解"><a href="#逆矩阵无解" class="headerlink" title="逆矩阵无解"></a>逆矩阵无解</h3><p>如果一行消项时，全部为零（$A$ 矩阵，不包括伴随矩阵），那么矩阵无逆。</p><h2 id="程序思路"><a href="#程序思路" class="headerlink" title="程序思路"></a>程序思路</h2><p><a href="https://www.luogu.com.cn/problem/P4783">P4783 【模板】矩阵求逆</a></p><ul><li><p>找到有效值（不为 $0$ 的值，可以当成关键位置使用）</p></li><li><p>将有效值所在行、列与当前行、当前列交换，并且记录下交换的行和列</p></li><li><p>把当前行元素乘关键位置的逆元（同时判无解：逆元不存在）</p></li><li><p>若果要将关键位置化为 $1$，整行乘关键位置的逆元即可</p></li><li><p>对矩阵中的其他行做和 <a href="https://wdsa001.github.io/2021/08/09/gao-si-xiao-yuan/">高斯消元</a> 几乎完全一样的操作，只有每行的有关键位置列不一样。</p></li><li><p>最后把第 $2$ 步中的交换逆序地交换回来。</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> m_d<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">long</span> <span class="token keyword">long</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>i_x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>j_x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">e_g</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找逆元 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">e_g</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    y<span class="token operator">-=</span>x<span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">n_y</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//逆元 </span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token function">e_g</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>m_d<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>m_d<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">c_z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//每行进行遍历 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>k<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                i_x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span>j_x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment">//找到一个有效值（不为 0 的值） </span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//交换行 </span>            <span class="token function">swap</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i_x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//交换列 </span>            <span class="token function">swap</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j_x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找不到有效值，无解 </span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No Solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结束程序 </span>        <span class="token punctuation">}</span>        a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">n_y</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关键位置求逆元 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//关键位置变为 1，整行都要乘它的逆元 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*=</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>m_d<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>k<span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每个位置的数更新 </span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>m_d<span class="token operator">-</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>m_d<span class="token punctuation">)</span><span class="token operator">%=</span>m_d<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//消列 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>k<span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>m_d<span class="token operator">-</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">%</span>m_d<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>n<span class="token punctuation">;</span>k<span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//交换的行列交换回来 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>j_x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i_x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//注意，j_x,i_x 的位置，改变，要正确的变换，以下错误 </span>        <span class="token comment">/*            for(int i=1;i&lt;=n;i++)swap(a_a[i_x[k]][i],a_a[k][i]);            for(int i=1;i&lt;=n;i++)swap(a_a[i][j_x[k]],a_a[i][k]);        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//读入矩阵 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">c_z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对矩阵操作 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//输出逆矩阵 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld "</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 矩阵 </tag>
            
            <tag> 高斯消元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFT（快速傅里叶变换）</title>
      <link href="/2021/12/03/fft/"/>
      <url>/2021/12/03/fft/</url>
      
        <content type="html"><![CDATA[<h2 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a><a href="https://wdsa001.github.io/2021/09/29/sheng-cheng-han-shu/#toc-heading-1">多项式</a></h2><h3 id="多项式系数表示"><a href="#多项式系数表示" class="headerlink" title="多项式系数表示"></a>多项式系数表示</h3><script type="math/tex; mode=display">f(x)=a_0+a_1x+a_2x^2+…</script><p>即：</p><script type="math/tex; mode=display">f(x)=\sum^{n}_{i=0}{a_i*x^i}</script><p>如果要我们求两个多项式的乘积后每一项的系数</p><p>例如：</p><script type="math/tex; mode=display">f_1(x)=3+5x+2x^2</script><script type="math/tex; mode=display">f_2(x)=1+6x+8x^2+9x^3</script><p>计算 $f_1(x)\times f_2(x)$ 每一项的系数。</p><p>在数学课上我们学的是将每一项两两相乘即：$3\times 1+3\times 6x+3\times 8x^2+…+2x^2\times 8x^2+2x^2\times 9x^3$</p><p>算出：</p><script type="math/tex; mode=display">f(x)=f_1(x)\times f_2(x)=3+23x+56x^2+79x^3+61x^4+18x^5</script><p>这使得在项非常多的时候计算非常麻烦，复杂度 $O(n^2)$。</p><p>还有什么别的办法得出 $f(x)$ 么？</p><h3 id="多项式点值表示"><a href="#多项式点值表示" class="headerlink" title="多项式点值表示"></a>多项式点值表示</h3><p>我们知道，如果要确认一个 $x$ 次函数需要有 $x+1$ 个点就可以确认。前提是我们选的这些点两两不同。 </p><p>矩阵表达为（范德蒙德矩阵）：</p><script type="math/tex; mode=display">\left[\begin{matrix}f(x_0) \\\\f(x_1) \\\\f(x_2) \\\\\vdots \\\\f(x_{n-1}) \\\\\end{matrix}\right]=\left[\begin{matrix}1&x_0&x_0^2&\ldots& x_0^{n-1}\\\\1&x_1&x_1^2&\ldots& x_1^{n-1} \\\\1&x_0&x_0^2&\ldots& x_0^{n-1} \\\\\vdots&\vdots&\vdots&\ddots&\vdots\\\\1&x_{n-1}&x_{n-1}^2&\ldots& x_{n-1}^{n-1} \\\\\end{matrix}\right]\left[\begin{matrix}a_0\\\\a_1\\\\a_2\\\\\vdots \\\\a_{n-1}\\\\\end{matrix}\right]</script><p>但是这样的复杂仍然是 $O(n^2)$（找到 $x+1$ 个点，每个点计算它的 $y$ 值做后的复杂度仍然很大）</p><p>难道没有办法优化了么？</p><h3 id="奇偶性"><a href="#奇偶性" class="headerlink" title="奇偶性"></a>奇偶性</h3><p>在学习而二次函数的时候，我们知道函数关于 $y$ 轴对称，所以如果我们知道了 $(x_0,y_0)$，那么我们同样知道了 $(x_1,y_0)$在函数上，（$x_0+x_1=0$）。</p><p>例如：$f(x)=x^2$</p><p>当 $x=2$ 时，$f(x)=4$，即点（$2,4$）在函数上，此时我们同样知道（$-2,4$）在函数上。</p><p>同样：$fx)=x^3$</p><p>当 $x=3$ 时，$f(x)=8$，即点（$2,8$）在函数上，此时我们同样知道（$-2,-8$）在函数上。</p><p>正是因为我们知道它们含有奇偶性，那么就可以一对一对的得知点的坐标。</p><p>这样就不用枚举 $x+1$ 个点了，只要找到其中的一半就可以了。</p><p>我们根据它的奇偶性将原多项式整理一下：</p><script type="math/tex; mode=display">f(x)=a_0+a_1x+a_2x^2+a_3x^3+a_4x^4…</script><script type="math/tex; mode=display">f(x)=(a_0+a_2x^2+a_4x^4+…)+(a_1x+a_3x^3+a_5x^5+…)</script><script type="math/tex; mode=display">f(x)=(a_0+a_2x^2+a_4x^4+…)+x(a_1+a_3x^2+a_5x^4+…)</script><p>设：</p><p>$f_1(x)=a_0+a_2x^2+a_4x^4+…$</p><p>$f_2(x)=a_1+a_3x^2+a_5x^4+…$</p><script type="math/tex; mode=display">f(x)=f_1(x^2)+xf_2(x^2)</script><p>那么我们再根据我们的奇偶性进行带入：</p><script type="math/tex; mode=display">f(x)=f_1(x^2)+xf_2(x^2)</script><script type="math/tex; mode=display">f(-x)=f_1(x^2)-xf_2(x^2)</script><p>可以发现只有一项不同，所以只要我们计算了 $f_1(x^2)$，$f_2(x^2)$，就可以得知 $f(x)$，$f(-x)$ 的值。</p><p>形象的描述一下：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">! # ! # ! # ! # ! # ! # ! # ! #! ! ! ! ! ! ! ! &lt;---&gt; # # # # # # # # ! # ! # ! # ! # &lt;---&gt; ! # ! # ! # ! # ! ! ! ! &lt;-&gt; # # # # &lt;---&gt; ! ! ! ! &lt;-&gt; # # # #<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直到全部分开。</p><p>这时我们的复杂度降到了 $O(n \log n)$（和线段树的树形结构一样）。</p><p>但是仔细一看会发现 $f_1$ 和 $f_2$ 运算时 $x$ 取不到负，这显然是个缺陷的。那么怎么完善呢，就是让 $x^2=-1$ 成为可能。</p><p>这是就要把坐标系换成复数的了。</p><h3 id="复数运算"><a href="#复数运算" class="headerlink" title="复数运算"></a>复数运算</h3><script type="math/tex; mode=display">(a+bi)\times(c+di)</script><script type="math/tex; mode=display">=ac+adi+bci-bd</script><script type="math/tex; mode=display">=(ac-bd)+(ad+bc)i</script><h2 id="单位根"><a href="#单位根" class="headerlink" title="单位根"></a>单位根</h2><p>单位根是什么呢？</p><p><strong>通俗</strong>来讲就是将一个在坐标系上的一个圆心在原点，半径为 $1$。将整个原的周长等分成 $n$ 份，那么有 $n$ 个断点，断点的坐标即为一个单位。$\omega^k_n$ 代表分为 $n$ 等份的单位圆的第 $k$ 个断点的坐标。</p><p>公式：$\omega^k_n=\cos(\frac{2k\pi}{n})+i\sin(\frac{2k\pi}{n})$</p><h3 id="幂运算"><a href="#幂运算" class="headerlink" title="幂运算"></a>幂运算</h3><script type="math/tex; mode=display">\omega^k_n=(\omega^1_n)^k</script><h3 id="化简"><a href="#化简" class="headerlink" title="化简"></a>化简</h3><script type="math/tex; mode=display">\omega^{rk}_{rn}=\cos(\frac{2rk\pi}{rn})+i\sin(\frac{2rk\pi}{rn})</script><script type="math/tex; mode=display">=\cos(\frac{2k\pi}{n})+i\sin(\frac{2k\pi}{n})=\omega^k_n</script><script type="math/tex; mode=display">\omega^{rk}_{rn}=\omega^k_n</script><h3 id="共轭"><a href="#共轭" class="headerlink" title="共轭"></a>共轭</h3><script type="math/tex; mode=display">\bar{\omega^k_n}=\cos(\frac{2k\pi}{n})-i\sin(\frac{2k\pi}{n})</script><script type="math/tex; mode=display">\bar{\omega^k_n}=\omega^{n-k}_n</script><h3 id="相反数"><a href="#相反数" class="headerlink" title="相反数"></a>相反数</h3><script type="math/tex; mode=display">\omega^{k+\frac{n}{2}}_n=-\omega^k_n</script><h2 id="结合单位根和多项式"><a href="#结合单位根和多项式" class="headerlink" title="结合单位根和多项式"></a>结合单位根和多项式</h2><script type="math/tex; mode=display">f(x)=f_1(x^2)+xf_2(x^2)</script><p>将 $\omega^k_n$和 $\omega^{k+\frac{n}{2}}_n$ 分别带入。</p><p>得到：</p><script type="math/tex; mode=display">f(\omega^k_n)=f_1((\omega^k_n)^2)+\omega^k_nf_2((\omega^k_n)^2)</script><script type="math/tex; mode=display">f(\omega^k_n)=f_1(\omega^{2k}_n)+\omega^k_nf_2(\omega^{2k}_n)</script><script type="math/tex; mode=display">f(\omega^k_n)=f_1(\omega^k_{\frac{n}{2}})+\omega^k_nf_2(\omega^k_{\frac{n}{2}})</script><script type="math/tex; mode=display">f(-\omega^k_n)=f(\omega^{k+\frac{n}{2}}_n)=f_1(\omega^k_{\frac{n}{2}})-\omega^k_nf_2(\omega^k_{\frac{n}{2}})</script><p>即：</p><script type="math/tex; mode=display">\left[\begin{matrix}f(w^0) \\\\f(w^1) \\\\f(w^2) \\\\\vdots \\\\f(w^{n-1}) \\\\\end{matrix}\right]=\left[\begin{matrix}1&1&1&\ldots&1\\\\1&w&w^2&\ldots& w^{n-1} \\\\1&w^2&w^4&\ldots& w^{n-1} \\\\\vdots&\vdots&\vdots&\ddots&\vdots\\\\1&w^{n-1}&w^{2(n-1)}&\ldots& w^{(n-1)(n-1)} \\\\\end{matrix}\right]\left[\begin{matrix}a_0\\\\a_1\\\\a_2\\\\\vdots \\\\a_{n-1}\\\\\end{matrix}\right]</script><p>这个矩阵是 $DFT$(离散傅里叶变换)</p><h3 id="点值转系数"><a href="#点值转系数" class="headerlink" title="点值转系数"></a>点值转系数</h3><p>现在我们要处理系数，所以将矩阵变换一下：</p><script type="math/tex; mode=display">\left[\begin{matrix}a_0\\\\a_1\\\\a_2\\\\\vdots \\\\a_{n-1}\\\\\end{matrix}\right]=\left[\begin{matrix}1&1&1&\ldots&1\\\\1&w&w^2&\ldots& w^{n-1} \\\\1&w^2&w^4&\ldots& w^{n-1} \\\\\vdots&\vdots&\vdots&\ddots&\vdots\\\\1&w^{n-1}&w^{2(n-1)}&\ldots& w^{(n-1)(n-1)} \\\\\end{matrix}\right]^{-1}\left[\begin{matrix}f(w^0) \\\\f(w^1) \\\\f(w^2) \\\\\vdots \\\\f(w^{n-1}) \\\\\end{matrix}\right]</script><p>逆矩阵求出来后：</p><script type="math/tex; mode=display">\left[\begin{matrix}a_0\\\\a_1\\\\a_2\\\\\vdots \\\\a_{n-1}\\\\\end{matrix}\right]=\left[\begin{matrix}1&1&1&\ldots&1\\\\1&w^{-1}&w^{-2}&\ldots& w^{-(n-1)} \\\\1&w^{-2}&w^{-4}&\ldots& w^{-2(n-1)} \\\\\vdots&\vdots&\vdots&\ddots&\vdots\\\\1&w^{-(n-1)}&w^{-2(n-1)}&\ldots& w^{-(n-1)(n-1)} \\\\\end{matrix}\right]\left[\begin{matrix}f(w^0) \\\\f(w^1) \\\\f(w^2) \\\\\vdots \\\\f(w^{n-1}) \\\\\end{matrix}\right]</script><p>设 $c$ 向量为值对于单位根的变换。</p><p>即：</p><script type="math/tex; mode=display">c_k=\sum^{n-1}_{i=0}{y_ix^i}</script><script type="math/tex; mode=display">c_k=\sum^{n-1}_{i=0}{y_i(\omega^{-k}_{n})^i}</script><script type="math/tex; mode=display">c_k=\sum^{n-1}_{i=0}{(\sum^{n-1}_{j=0}{a_j(\omega^j_n})^i)(\omega^{-k}_{n})^i}</script><script type="math/tex; mode=display">c_k=\sum^{n-1}_{i=0}{\sum^{n-1}_{j=0}{a_j(\omega^j_n})^i(\omega^{-k}_{n})^i}</script><script type="math/tex; mode=display">c_k=\sum^{n-1}_{i=0}{\sum^{n-1}_{j=0}{a_j(\omega^{j-k}_n})^i}</script><script type="math/tex; mode=display">c_k=\sum^{n-1}_{j=0}{a_j(\sum^{n-1}_{i=0}{(\omega^{j-k}_n})^i)}</script><p>设：</p><script type="math/tex; mode=display">S=\sum^{n-1}_{i=0}{(\omega^{k}_n})^i</script><script type="math/tex; mode=display">S=1+\omega^{k}_n+(\omega^{k}_n)^2+(\omega^{k}_n)^3+…+(\omega^{k}_n)^{n-1}</script><script type="math/tex; mode=display">\omega^{k}_nS=\omega^{k}_n+(\omega^{k}_n)^2+(\omega^{k}_n)^3+…+(\omega^{k}_n)^n</script><script type="math/tex; mode=display">(\omega^{k}_n-1)S=(\omega^{k}_n)^n-1</script><script type="math/tex; mode=display">S=\frac{(\omega^{k}_n)^n-1}{\omega^{k}_n-1}</script><script type="math/tex; mode=display">S=\frac{(\omega^{nk}_n)-1}{\omega^{k}_n-1}</script><script type="math/tex; mode=display">S=\frac{(\omega^{k}_1)-1}{\omega^{k}_n-1}</script><script type="math/tex; mode=display">S=\frac{1-1}{\omega^{k}_n-1}</script><p>所以当 $k$ 不为 $0$ 时，$S=0$，二挡 $k=0$ 时，推导式分母为零，所以不能使用推导式。但是我们可以直接带入原式：</p><script type="math/tex; mode=display">S=\sum^{n-1}_{i=0}{(\omega^{0}_n})^i=n\times1=n</script><script type="math/tex; mode=display">c_k=\sum^{n-1}_{j=0}{a_j(\sum^{n-1}_{i=0}{(\omega^{j-k}_n})^i)}</script><p>所以，当 $j$ 不为 $k$ 时，结果为零：</p><script type="math/tex; mode=display">c_k=a_k\sum^{n-1}_{i=0}{(\omega^0_n})^k</script><p>当 $k=0$ 时，结果为 $n$：</p><script type="math/tex; mode=display">c_k=n\times a_k</script><script type="math/tex; mode=display">a_k=\frac{c_k}{n}</script><p>这样就找到了点值和系数的关系。</p><p><strong>到此可以写的递推的代码了，但是会TLE，所以还需要优化。</strong></p><h2 id="二进制反转"><a href="#二进制反转" class="headerlink" title="二进制反转"></a>二进制反转</h2><p>在处理多项式递推时，我们用的方法是奇偶分离：</p><p>! # ! # ! # ! # ! # ! # ! # ! #</p><p>! ! ! ! ! ! ! ! &lt;—-&gt; # # # # # # # # </p><p>! # ! # ! # ! # &lt;—-&gt; ! # ! # ! # ! # </p><p>! ! ! ! &lt;-&gt; # # # # &lt;—-&gt; ! ! ! ! &lt;-&gt; # # # # </p><p>但是，有另一个技巧是，分离最后的顺序为二进数反转：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">原数：       0,  1,  2,  3,  4,  5,  6,  7二进制：    000,001,010,011,100,101,110,111分离后：      0,  4,  2,  6,  1,  5,  3,  7二进制：    000,100,010,110,001,101,011,111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以可以直接排好序然后直接从底层分好块遍历。</p><h3 id="处理二进制反转（蝴蝶变换）"><a href="#处理二进制反转（蝴蝶变换）" class="headerlink" title="处理二进制反转（蝴蝶变换）"></a>处理二进制反转（蝴蝶变换）</h3><p>用已经处理好的二进制数右移一位，判断移走的哪位是否为 $1$，直接补在最左边。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>e_d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>e_d<span class="token punctuation">[</span>i<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>l_g<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反转的二进制 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有一个可以让 <code>for</code> 优化 $1$ 毫秒的办法，但由于性价比太小导致我们并不注意，但如果这个 <code>for</code> 调用了几百次甚至几千次，那么将它优化后，就有可能从 <code>TLE</code>变成 <code>AC</code>。</p><p>在遍历 $f_1,f_2$ 时，如果直接套公式的话：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">*</span>a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>m_i<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span>a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>m_i<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token operator">-</span>k<span class="token operator">*</span>a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>m_i<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，<code>k*a_a[j+m_i+k_k]</code> 被调用了 $2$ 两变，我们可以将它存入新变量中，直接调取变量即可，这样少运算了一次.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">po x_x<span class="token operator">=</span>a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span>po y_y<span class="token operator">=</span>k<span class="token operator">*</span>a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>m_i<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span>a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span>x_x<span class="token operator">+</span>y_y<span class="token punctuation">;</span>a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>m_i<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span>x_x<span class="token operator">-</span>y_y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实测，快了 $0.12s$，平常不算什么，但对于卡常的时候来说就是天赐良药。</p><p>公式变为：</p><script type="math/tex; mode=display">y1_j=f_1(\omega^{2j}_n)</script><script type="math/tex; mode=display">y2_j=f_2(\omega^{2j}_n)</script><script type="math/tex; mode=display">f(\omega^j_n)=y1_j+\omega^j_ny2_j</script><script type="math/tex; mode=display">f(\omega^{j+\frac{n}{2}}_n)=y1_j-\omega^j_ny2_j</script><p>也方便了代码的书写。</p><p><a href="https://www.luogu.com.cn/problem/P3803">P3803 【模板】多项式乘法（FFT）</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> o_o<span class="token operator">=</span><span class="token number">3e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">k_m</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快速幂 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> r_s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>r_s<span class="token operator">*=</span>a<span class="token punctuation">;</span>        a<span class="token operator">*=</span>a<span class="token punctuation">;</span>        b<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> r_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>        <span class="token comment">//重载基本运算 </span>    po <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> po <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> po<span class="token punctuation">{</span>x<span class="token operator">+</span>n<span class="token punctuation">.</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>n<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    po <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">const</span> po <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> po<span class="token punctuation">{</span>x<span class="token operator">-</span>n<span class="token punctuation">.</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span>n<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    po <span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> po <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> po<span class="token punctuation">{</span>x<span class="token operator">*</span>n<span class="token punctuation">.</span>x<span class="token operator">-</span>y<span class="token operator">*</span>n<span class="token punctuation">.</span>y<span class="token punctuation">,</span>x<span class="token operator">*</span>n<span class="token punctuation">.</span>y<span class="token operator">+</span>y<span class="token operator">*</span>n<span class="token punctuation">.</span>x<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//复数乘法 </span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>a_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>b_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//pi 的值 </span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> e_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//最后的数的位置 </span><span class="token keyword">int</span> l_g<span class="token punctuation">;</span><span class="token comment">//需要遍历多少层 </span><span class="token keyword">int</span> m_a<span class="token punctuation">;</span><span class="token comment">//目标最大块长 </span><span class="token keyword">void</span> <span class="token function">f_i</span><span class="token punctuation">(</span>po <span class="token operator">*</span>a_a<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//根据排好的顺序调整数列 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>e_d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>e_d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>m_i<span class="token operator">&lt;</span>m_a<span class="token punctuation">;</span>m_i<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//树形结构（分治） </span>        po w<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cos</span><span class="token punctuation">(</span>PI<span class="token operator">/</span>m_i<span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>PI<span class="token operator">/</span>m_i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token operator">=</span>m_i<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m_a<span class="token punctuation">;</span>j<span class="token operator">+=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举当前操作的每个块的范围 </span>            po k<span class="token operator">=</span>po<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//幂（初值） </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k_k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k_k<span class="token operator">&lt;</span>m_i<span class="token punctuation">;</span>k_k<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">=</span>k<span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//幂的累计 </span>                po x_x<span class="token operator">=</span>a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//计算 f1 </span>                po y_y<span class="token operator">=</span>k<span class="token operator">*</span>a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>m_i<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//计算 f2 </span>                <span class="token comment">//节约小时间，积累成大时间：“蝴蝶效应” </span>                                a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span>x_x<span class="token operator">+</span>y_y<span class="token punctuation">;</span><span class="token comment">//计算 f 的 k 次 </span>                a_a<span class="token punctuation">[</span>j<span class="token operator">+</span>m_i<span class="token operator">+</span>k_k<span class="token punctuation">]</span><span class="token operator">=</span>x_x<span class="token operator">-</span>y_y<span class="token punctuation">;</span><span class="token comment">//计算 f 的 k+(n/2) 次 </span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>b_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入 </span>    l_g<span class="token operator">=</span><span class="token function">log2</span><span class="token punctuation">(</span>n<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    m_a<span class="token operator">=</span><span class="token function">k_m</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>l_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算边界 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>e_d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>e_d<span class="token punctuation">[</span>i<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>l_g<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反转的二进制 </span>    <span class="token function">f_i</span><span class="token punctuation">(</span>a_i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">f_i</span><span class="token punctuation">(</span>b_i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//系数变点值 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>b_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//计算结果 </span>    <span class="token function">f_i</span><span class="token punctuation">(</span>a_i<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点值变系数 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">/</span>m_a<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 卷积 </tag>
            
            <tag> 矩阵 </tag>
            
            <tag> 多项式 </tag>
            
            <tag> FFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火柴排队</title>
      <link href="/2021/10/19/huo-chai-pai-dui/"/>
      <url>/2021/10/19/huo-chai-pai-dui/</url>
      
        <content type="html"><![CDATA[<h2 id="火柴排队"><a href="#火柴排队" class="headerlink" title="火柴排队"></a>火柴排队</h2><p><a href="https://www.luogu.com.cn/problem/P1966">P1966 NOIP2013 提高组 火柴排队</a></p><p>获取两列火柴后，先将它们分别从小到大排序。然后建一个新数组，按骑宠一个排好序的序列的原坐标的为存另一个排好序的数列的位置的原坐标。即当前坐标的目标位置。</p><p>将数组处理好后，归并排序，每次后一半比前一半小时，统计结果，答案为结果之和，统计的结果即当前数到目标位置需要的交换次数。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token number">1e8</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//要排序的序列 </span><span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//目标排序好的序列 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//答案 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span>l_1<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>l_2<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">c_1</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>v<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//从小到大排序 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">g_s</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//归并排序 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">g_s</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//二分 </span>    <span class="token function">g_s</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//二分 </span>    <span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span><span class="token comment">//要排序的第一个序列的开头 </span><span class="token keyword">int</span> j<span class="token operator">=</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//要排序的第二个序列的开头 </span><span class="token keyword">int</span> k<span class="token operator">=</span>l<span class="token punctuation">;</span><span class="token comment">//要排序好的序列的下表 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m_i<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//从小到大排序 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">++</span>k<span class="token punctuation">;</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">++</span>k<span class="token punctuation">;</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>            a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span>m_i<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//要更新位置，统计答案 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m_i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//剩下的直接接上 </span>        p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">++</span>k<span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//剩下的直接接上 </span>        p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">++</span>k<span class="token punctuation">;</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//复制排好序的数列到原数列 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取火柴序列长度 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        l_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录价值 </span>        l_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//记录坐标 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        l_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录价值 </span>        l_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//记录坐标 </span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>l_1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l_1<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将第一列火柴排序 </span>    <span class="token function">sort</span><span class="token punctuation">(</span>l_2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l_2<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将第二列火柴排序 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x<span class="token punctuation">[</span>l_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i<span class="token punctuation">]</span><span class="token operator">=</span>l_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i<span class="token punctuation">;</span><span class="token comment">//对应坐标差，按第一列火柴排序好的顺序后的原坐标来存储第二列火柴排好顺序的原坐标 </span>    <span class="token function">g_s</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//归并排序统计答案 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络流入门</title>
      <link href="/2021/10/14/wang-luo-liu-ru-men/"/>
      <url>/2021/10/14/wang-luo-liu-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="S-T-割"><a href="#S-T-割" class="headerlink" title="$S-T$ 割"></a>$S-T$ 割</h2><p><img src="https://z3.ax1x.com/2021/10/14/5lmYDg.png" alt="原图"></p><p>我们知道，判断从 $s$ 到 $t$ 是否存在路径，可以通过 $dfs$ 和 $bfs$ 判断即可，但是如何证明 $s\rightarrow t$ 存在路径呢？</p><p>为了方便理解，我们先将原图更改一下：</p><p><img src="https://z3.ax1x.com/2021/10/14/5lmUEj.png" alt="路径判断-1"></p><p>首先，我们通过一些“笨”方法来描述，先枚举所有 $s\rightarrow t$ 的<strong>可能</strong>路径，例如： $s\rightarrow t$，$s\rightarrow a\rightarrow t$，$s\rightarrow a\rightarrow b\rightarrow t$，$…$</p><p>一条 $s\rightarrow t$ 的路径一定在上面的列表中，但是找不到合法路径，所以不存在 $s\rightarrow t$ 的路径。</p><p>这么证明非常麻烦，我们不仅要枚举所有路径，还要判断其是否合法。</p><p>现在我们将整个图分成两部分：</p><p><img src="https://z3.ax1x.com/2021/10/14/5lmaUs.png" alt="路径判断-2"></p><p>$S-T$ 割：割的大小为 $S\rightarrow T$ 中点连边的个数（$S\rightarrow T$）</p><p><img src="https://z3.ax1x.com/2021/10/14/5lmd5n.png" alt="路径判断-3"></p><p>$S=\lbrace s\rbrace $</p><p>$T=\lbrace a,b,c,d,t\rbrace $</p><p>这种分割方法 $S\rightarrow T$ 有两条边，所以割边为 $2$。</p><p>集合分的点是在随意的，如下：</p><p><img src="https://z3.ax1x.com/2021/10/14/5lm0Cq.png" alt="路径判断-4"></p><p>$S=\lbrace s,d,c\rbrace$</p><p>$T=\lbrace a,b,t\rbrace$</p><p>$S\rightarrow T$ 割边为 $3$。</p><p>大小为 $0$ 的 $S-T$ 割是“找不到路径”的证明。</p><p>求 $G$ 中最多有多少条不相交的 $S\rightarrow T$ 路径。</p><p><img src="https://z3.ax1x.com/2021/10/14/5lmB80.png" alt="不相交路径-1"></p><p>设不相交数量 $=k$</p><p>若 $k=1$，存在，那么可以找 $k=2$ 是否存在 $…$ 知道不存在为止。</p><p>我们先用一个相对简单的图学习一下。</p><p><img src="https://z3.ax1x.com/2021/10/14/5lmD2V.png" alt="不相交路径-2"></p><p><img src="https://z3.ax1x.com/2021/10/14/5lmrvT.png" alt="不相交路径-3"></p><p>分成两个集合：$S=\lbrace a,b,c,s\rbrace,T=\lbrace c,t\rbrace$</p><p>枚举路径：</p><p>$s\rightarrow a\rightarrow b\rightarrow c\rightarrow t$</p><p>$s\rightarrow d\rightarrow b\rightarrow c\rightarrow t$</p><p>$s\rightarrow d\rightarrow a\rightarrow b\rightarrow c\rightarrow t$</p><p>如果发现 $S-T=1$,那么 $s,t$ 最多有一条路径（$k\leqslant 1$）,<strong>此时 $k=0$ 也是可能的。</strong></p><p>不难发现：</p><p><img src="https://z3.ax1x.com/2021/10/14/5lmB80.png" alt="不相交路径-1"></p><p>所有的 $S-T$ 割都 $\geqslant 2$。</p><p>那么我们这么找路径呢？</p><p>我们可以随意找一条路径，然后不断“纠错”，统计答案个数（类似于求最长上升子序列的思路）</p><p>我们不幸的找到了路：$s\rightarrow d\rightarrow a\rightarrow b\rightarrow c\rightarrow t$</p><p><img src="https://z3.ax1x.com/2021/10/14/5lmyKU.png" alt="不相交路径-4"></p><p>我们找到这条路后将所有经过的路径反转：</p><p><img src="https://z3.ax1x.com/2021/10/14/5lm6rF.png" alt="不相交路径-5"></p><p>然后，我们继续找路：</p><p><img src="https://z3.ax1x.com/2021/10/14/5lm18P.png" alt="不相交路径-6"></p><p>继续反转：</p><p><img src="https://z3.ax1x.com/2021/10/14/5lm3gf.png" alt="不相交路径-7"></p><p>此时已经没有路径可以使 $S\rightarrow T$,所以结果为 $2$，而将路径反转的操作就是“纠错”。也叫作：$Ford-Fulkerson$ 残留网络。</p><h2 id="残留网络"><a href="#残留网络" class="headerlink" title="残留网络"></a>残留网络</h2><p>正确性证明：</p><p>站如现在已经找到了：$p1,p2,p3$这几条路径：</p><p><img src="https://z3.ax1x.com/2021/10/14/5lmKUA.png" alt="残留网络-1"></p><p>现在又发现了路径 $p4$ 的存在，那么我们要对原图进行一些修改：</p><p><img src="https://z3.ax1x.com/2021/10/14/5lmlCt.png" alt="残留网络-2"></p><p>由于反转操作，中间重合的部分会断掉（因为新出现的 $p4$ 经过了这些道路，所以要“纠错”）</p><p><img src="https://z3.ax1x.com/2021/10/14/5lmM4I.png" alt="残留网络-3"></p><p>将编号图进行美化：</p><p><img src="https://z3.ax1x.com/2021/10/14/5lm8v8.png" alt="残留网络-4"></p><p>所以正确性没问题。</p><h2 id="带权图（网络流）"><a href="#带权图（网络流）" class="headerlink" title="带权图（网络流）"></a>带权图（网络流）</h2><p><img src="https://z3.ax1x.com/2021/10/14/5lmJKS.png" alt="网络流"></p><p>可以将每个边的权值看成很多个重边，例如：将 $s\rightarrow a$ 可以看成有 $20$ 个 $s\rightarrow a$ 边，然后不断进行“纠错”。</p><p>容量：$C_u,v$</p><p>流量：$x_i$</p><p>设 </p><p>$x_1=s\rightarrow a\rightarrow b\rightarrow t$</p><p>$x_2=s\rightarrow a\rightarrow c\rightarrow d\rightarrow t$</p><p>$…$</p><p>$s\rightarrow a:x_1+x_2+…\leqslant 20$</p><p>$c\rightarrow d:x_2+x_3+…\leqslant 10$</p><p>$x_i\geqslant 0(1\leqslant i\leqslant p)$</p><p>这即是网络流的“原始”表达（线性规划）</p><p>设 $f(s,a)$ 表示为 $s\leftrightarrow a$ 边流量。</p><p>线性规划：</p><p>$f(s,a)=f(a,b)+f(a,c)$ （流出量守恒）</p><p>$f(a,b)=f(b,c)+f(b,t)$</p><p>$…$</p><p>可以想象成路径叠加。</p><p>线性规划“对偶”理论</p><p>最大值约束（$\leqslant$）$\Leftrightarrow$ 最小值约束（$\geqslant$）</p><p>最少的边能覆盖路径不就是 $S-T$ 割么！</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学公式整理</title>
      <link href="/2021/10/12/shu-xue-gong-shi-zheng-li/"/>
      <url>/2021/10/12/shu-xue-gong-shi-zheng-li/</url>
      
        <content type="html"><![CDATA[<h3 id="欧几里得算法（辗转相除法）"><a href="#欧几里得算法（辗转相除法）" class="headerlink" title="欧几里得算法（辗转相除法）"></a>欧几里得算法（辗转相除法）</h3><p>求 $\gcd(a,b)$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="裴蜀定理"><a href="#裴蜀定理" class="headerlink" title="裴蜀定理"></a>裴蜀定理</h3><p><a href="https://www.luogu.com.cn/problem/P4549">P4549 【模板】裴蜀定理</a></p><p>裴蜀定理 $a\times x+b\times y=c$</p><p>设 $k=\gcd(a,b)$</p><script type="math/tex; mode=display">\therefore k|a,k|b</script><script type="math/tex; mode=display">\therefore k|a\times x,k|b\times x</script><script type="math/tex; mode=display">S=\sum_{i=1}^{n}{A_i\times X_i}</script><p>求最小 $S(S&gt;0)$，$X_i$ 待定。</p><script type="math/tex; mode=display">ans=\sum_{i=1}^{n}{\gcd(ans,x_i)}</script><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">g_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">g_d</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n<span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token function">g_d</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">g_d</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><p>求 $a\times x+b\times y=\gcd(a,b)$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">e_g</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">e_g</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token operator">-=</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$x,y$ 即为所求。</p><h3 id="同余方程"><a href="#同余方程" class="headerlink" title="同余方程"></a>同余方程</h3><p><a href="https://www.luogu.com.cn/problem/P1082">P1082 NOIP2012 提高组 同余方程</a></p><script type="math/tex; mode=display">a\times x\equiv 1(\mod b)</script><script type="math/tex; mode=display">a\times x+b\times y=1</script><p>形式和扩展欧几里得算法很像，此时我们不用管 $y$ 的取值，我们只要找到满足的 $x$ 即可。</p><p>并且使 $\gcd(x,y)=1$</p><p>求出的 $x$，即为所求。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">e_g</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">e_g</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token operator">-=</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token function">e_g</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有理数取余"><a href="#有理数取余" class="headerlink" title="有理数取余"></a>有理数取余</h3><p><a href="https://www.luogu.com.cn/problem/P2613">P2613 【模板】有理数取余</a></p><script type="math/tex; mode=display">\frac{a}{b}\mod p</script><script type="math/tex; mode=display">x\equiv\frac{a}{b}(\mod p)</script><script type="math/tex; mode=display">b\times x\equiv a(\mod p)</script><script type="math/tex; mode=display">b\times x_1\equiv 1(\mod p)</script><script type="math/tex; mode=display">x=x_1\times a</script><p>注意此时的 $x$ 可能不是最小的，所以要取模处理。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">19260817</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">%=</span>m_a<span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token operator">%</span>m_a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">k_m</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> r_s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>r_s<span class="token operator">=</span><span class="token punctuation">(</span>r_s<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_a<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_a<span class="token punctuation">;</span>b<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> r_s<span class="token operator">%</span>m_a<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a<span class="token operator">*</span><span class="token function">k_m</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>m_a<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="欧拉公式"><a href="#欧拉公式" class="headerlink" title="欧拉公式"></a>欧拉公式</h3><p>$\phi(x)=$ 表示小于等于 $n$ 的正整数中与 $n$ 互质的数的个数（欧拉函数）。</p><script type="math/tex; mode=display">\phi(x)=x\times (1-\frac{1}{p_1})\times (1-\frac{1}{p_2})\times …</script><p>$p_1,p_2,p_3,…$ 是 $m$ 的质因子。</p><h3 id="扩展欧拉定理"><a href="#扩展欧拉定理" class="headerlink" title="扩展欧拉定理"></a>扩展欧拉定理</h3><p><a href="https://www.luogu.com.cn/problem/P5091">P5091 【模板】扩展欧拉定理</a></p><script type="math/tex; mode=display">a^b\mod m</script><script type="math/tex; mode=display">\because a^{\phi(m)}\equiv 1(\mod m)</script><script type="math/tex; mode=display">\therefore a^b\mod m=a^{b\%\phi(m)+\phi(m)}\mod m</script><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>m<span class="token punctuation">,</span>t_p<span class="token punctuation">,</span>m_m<span class="token punctuation">,</span>a_s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">bool</span> b_b<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">k_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token number">1LL</span><span class="token operator">*</span>a_s<span class="token operator">*</span>a<span class="token operator">%</span>m<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token number">1LL</span><span class="token operator">*</span>a<span class="token operator">*</span>a<span class="token operator">%</span>m<span class="token punctuation">;</span>b<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    t_p<span class="token operator">=</span>m_m<span class="token operator">=</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t_p<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            m_m<span class="token operator">-=</span>m_m<span class="token operator">/</span>i<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>t_p<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>t_p<span class="token operator">/=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_p<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span>m_m<span class="token operator">-=</span>m_m<span class="token operator">/</span>t_p<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        b<span class="token operator">=</span>b<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&gt;=</span>m_m<span class="token punctuation">)</span><span class="token punctuation">{</span>            b_b<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            b<span class="token operator">%=</span>m_m<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">)</span>b<span class="token operator">+=</span>m_m<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">k_m</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h3><p>可以由欧拉公式推出。</p><script type="math/tex; mode=display">a^{p-1}\equiv 1(\mod m)</script><h3 id="卢卡斯定理"><a href="#卢卡斯定理" class="headerlink" title="卢卡斯定理"></a>卢卡斯定理</h3><p><a href="https://www.luogu.com.cn/problem/P3807">卢卡斯定理/Lucas 定理</a></p><script type="math/tex; mode=display">C_{n+m}^{n}\mod p</script><script type="math/tex; mode=display">Lucas(n,m,p)=C_{n\%p}^{m\%p}\times Lucas(\frac{n}{p},\frac{m}{p},p)</script><script type="math/tex; mode=display">Lucas(x,0,p)=1</script><script type="math/tex; mode=display">C_{a}^{b}=(\frac{a!}{(a-b)!})^{(p-2)}\mod p</script><p><strong>$p$ 是质数</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>p<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">lucas</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>y<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>x<span class="token operator">-</span>y<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">lucas</span><span class="token punctuation">(</span>x<span class="token operator">/</span>p<span class="token punctuation">,</span>y<span class="token operator">/</span>p<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">lucas</span><span class="token punctuation">(</span>x<span class="token operator">%</span>p<span class="token punctuation">,</span>y<span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">%</span>p<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">-</span>p<span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token operator">*</span>a<span class="token punctuation">[</span>p<span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">lucas</span><span class="token punctuation">(</span>n<span class="token operator">+</span>m<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        k<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中国剩余定理（韩信点兵）"><a href="#中国剩余定理（韩信点兵）" class="headerlink" title="中国剩余定理（韩信点兵）"></a>中国剩余定理（韩信点兵）</h3><p><a href="https://www.luogu.com.cn/problem/P1495">P1495 【模板】中国剩余定理(CRT)</a></p><script type="math/tex; mode=display">\left\lbrace\begin{matrix}x\equiv a_1\mod m_1\\x\equiv a_2\mod m_2\\x\equiv a_3\mod m_3\\\vdots\\x\equiv a_n\mod m_n\end{matrix}\right.</script><script type="math/tex; mode=display">chj=\prod_{i=1}^{n}{a_i}</script><p>$x_i$ 通过扩展欧几里得定理求出。</p><script type="math/tex; mode=display">ans=\sum_{i=1}^{n}{\frac{chj}{a_i}\times b_i\times x_i}</script><p>注意取模，<strong>$m_i$ 互质</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>j_j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">e_g</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">e_g</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token operator">-=</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>j_j<span class="token operator">*=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> n_n<span class="token operator">=</span>j_j<span class="token operator">/</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token function">e_g</span><span class="token punctuation">(</span>n_n<span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>a_s<span class="token operator">+=</span><span class="token punctuation">(</span>x<span class="token operator">%</span>j_j<span class="token operator">*</span>b_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span>j_j<span class="token operator">*</span>n_n<span class="token operator">%</span>j_j<span class="token punctuation">)</span><span class="token operator">%</span>j_j<span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span>j_j<span class="token punctuation">)</span><span class="token operator">%</span>j_j<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 裴蜀定理 </tag>
            
            <tag> 有理数取余 </tag>
            
            <tag> 欧几里得算法（辗转相除） </tag>
            
            <tag> 扩展欧几里得算法 </tag>
            
            <tag> 中国剩余定理 </tag>
            
            <tag> 卢卡斯定理 </tag>
            
            <tag> 欧拉公式 </tag>
            
            <tag> 费马小定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扫描线</title>
      <link href="/2021/10/09/sao-miao-xian/"/>
      <url>/2021/10/09/sao-miao-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h2><p><a href="https://www.luogu.com.cn/problem/P5490">P5490 【模板】扫描线</a></p><p>现在我们有一些矩形在平面直角坐标系上：</p><p><img src="https://z3.ax1x.com/2021/10/09/5iyWUH.png" alt="原图"></p><p>现在我们要求他们的面积的并（平面直角坐标系被覆盖的面积）</p><p>我们可以将每个矩形看成有两条线组成（左边一条为蓝色，右边一条为绿色）</p><p>将所有的蓝色线标记成 $+1$，将所有的绿色线标记为 $-1$ ，从左向右扫得到的数值即为当前点被覆盖的次数，又与我们求的是并，所以只记录有无被覆盖过即可（记录被覆盖几次是记录所有矩形的面积）。</p><p>将所有线段处理出来后可以用线段树维护，每次维护的是整个 $y$ 轴（$1$ 维直线）每次统计两次之间的 $x$ 的差和之间 $y$ 轴上的长度相乘即可。</p><h3 id="扫描的过程"><a href="#扫描的过程" class="headerlink" title="扫描的过程"></a>扫描的过程</h3><p><img src="https://z3.ax1x.com/2021/10/09/5iyf5d.png" alt="开始扫描"></p><p>记录 $A,B$ 坐标，$y_{[B,A]}$ 更新到线段树上。</p><p><img src="https://z3.ax1x.com/2021/10/09/5iy4PA.png" alt="扫描-1"></p><p>统计记录 $(y_A-y_B)\times (x_C-x_A)$（小矩形面积）</p><p>记录 $C,D$ 坐标，$y_{[D,C]}$ 更新到线段树上。</p><p><img src="https://z3.ax1x.com/2021/10/09/5iy58I.png" alt="扫描-2"></p><p>统计记录 $(y_C-y_D)\times (x_E-x_D)$（小矩形面积）</p><p>记录 $E,F$ 坐标，$y_{[F,E]}$ 更新到线段树上。</p><p><img src="https://z3.ax1x.com/2021/10/09/5iyI2t.png" alt="扫描-3"></p><p>统计记录 $((y_C-y_D)+(y_E-y_F))\times (x_H-x_F)$（小矩形面积）</p><p>记录 $G,H$ 坐标，$y_{[H,G]}$ 更新到线段树上。</p><p><img src="https://z3.ax1x.com/2021/10/09/5iycDO.png" alt="扫描-4"></p><p>统计记录 $(y_G-y_F)\times (x_I-x_G)$（小矩形面积）</p><p>记录 $I,J$ 坐标，$y_{[J,I]}$ 更新到线段树上（值为负，说明有矩形到头了，要更新回去）。</p><p><img src="https://z3.ax1x.com/2021/10/09/5iysv6.png" alt="扫描-5"></p><p>统计记录 $(y_G-y_F)\times (x_K-x_I)$（小矩形面积）</p><p>记录 $K,L$ 坐标，$y_{[L,K]}$ 更新到线段树上。</p><p><img src="https://z3.ax1x.com/2021/10/09/5iyRVe.png" alt="扫描-6"></p><p>统计记录 $((y_B-y_A)+(y_E-y_F))\times (x_M-x_K)$（小矩形面积）</p><p>记录 $M,N$ 坐标，$y_{[N,M]}$ 更新到线段树上。</p><p><img src="https://z3.ax1x.com/2021/10/09/5iy6KK.png" alt="扫描-7"></p><p>统计记录 $(y_E-y_F)\times (x_O-x_M)$（小矩形面积）</p><p>记录 $O.P$ 坐标，$y_{[P,O]}$ 更新到线段树上。</p><p><img src="https://z3.ax1x.com/2021/10/09/5i6vwD.png" alt="完成"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//记录线段在 y 轴的左右边界 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">;</span><span class="token comment">//记录 x 的坐标 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span><span class="token comment">//记录位置（左边界右边界） </span>  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//x 坐标从小到大排序，x长度相同，长度长的优先</span>    <span class="token keyword">return</span> x<span class="token operator">==</span>b<span class="token punctuation">.</span>x<span class="token operator">?</span>l<span class="token operator">&gt;</span>b<span class="token punctuation">.</span>l<span class="token operator">:</span>x<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>l<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//节点价值 </span>  <span class="token keyword">int</span> l_n<span class="token punctuation">;</span><span class="token comment">//长度 </span>  <span class="token function">pp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    s_m<span class="token operator">=</span>l_n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>t_t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y_y<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">=</span>y_y<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>y_y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这一段被覆盖，更新长度 </span>  <span class="token keyword">else</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">;</span><span class="token comment">//更新长度 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;=</span>y_y<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">||</span>y_y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&gt;=</span>y<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//没有重合部分 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>y_y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>y_y<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//更新值 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token function">a_d</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//统计左边 </span>  <span class="token function">a_d</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//统计右边 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x_1<span class="token punctuation">,</span>y_1<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span>y_2<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存入矩形基本信息 </span>    l<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x_1<span class="token punctuation">;</span>    l<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>y_1<span class="token punctuation">;</span>    l<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>y_2<span class="token punctuation">;</span>    l<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//左边界标记 </span>    l<span class="token punctuation">[</span>i<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x_2<span class="token punctuation">;</span>    l<span class="token punctuation">[</span>i<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>y_1<span class="token punctuation">;</span>    l<span class="token punctuation">[</span>i<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>y_2<span class="token punctuation">;</span>    l<span class="token punctuation">[</span>i<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//右边界标记 </span>        <span class="token comment">//记录线段长度 </span>    y_y<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>y_1<span class="token punctuation">;</span>    y_y<span class="token punctuation">[</span>i<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>y_2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  n<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">sort</span><span class="token punctuation">(</span>y_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y_y<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将所有的 y 坐标排序 </span>  <span class="token function">sort</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将所有线段排序 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>y_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>y_y<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y_y<span class="token punctuation">[</span><span class="token operator">++</span>t_t<span class="token punctuation">]</span><span class="token operator">=</span>y_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//去重 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//线段的值增加 </span>    a_s<span class="token operator">+=</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span>t_r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">;</span><span class="token comment">//统计结果 </span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF476D Dreamoon and Sets</title>
      <link href="/2021/10/08/cf476d/"/>
      <url>/2021/10/08/cf476d/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF476D">传送门</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先我们要保证 $4$ 个数最大公约数是 $k$，那么我们可以最开始时枚举 $4$ 个互素的数，最后同时 $\times k$ 即可。</p><p>我们又要使最大数最小，那么我们可以枚举最小的互素的数来满足要求。</p><p>最小的互素四元组是：$1,2,3,5$</p><p>那么第一个就可以输出：$1\times k,2\times k,3\times k,5\times k$（若比 $k$ 小，那么不可能因子中有 $k$）。</p><p>但是题目让我们找的并不止有一组。那么下一组怎么找呢？</p><p>首先，我们要尽量往小找，不能有重复的数，所以接下来我们在 $4,6,7,8,…$ 中选数。</p><p>我们在来看一下第一个四元组的形式：$x,x+1,x+2,x+4$，由于连续的 $3$ 个奇数一定互质，奇数和偶数一定互质，所以找两连续的三个数再往后凑一个奇数即可满足要求。</p><p>下一个合法四元组：$7,8,9,11$</p><p>我们可以看成 $6$ 个数分成一组，然后枚举大组输出即可。</p><h3 id="证明此方法最大值最小"><a href="#证明此方法最大值最小" class="headerlink" title="证明此方法最大值最小"></a>证明此方法最大值最小</h3><p>由于找到的四元组的值不能重复，我们选的数的密度已经很大，但还是说明不了我们找的最大值是正确的。</p><p>现在假设我们目标要找 $4$ 组符合要求的四元组(为了方便描述我们取 $k=1$)。</p><p>按照我们的规律找到的最大值是 $23$，那么我们假设存在一种方法，结果的最大值比它小。</p><p>设四组的四元组值分别为：</p><p>$a_1,a_2,a_3,a_4$</p><p>$b_1,b_2,b_3,b_4$</p><p>$c_1,c_2,c_3,c_4$</p><p>$d_1,d_2,d_3,d_4$</p><p>这些的取值范围是 $[1,22]$。</p><p>我们要保证每个四元组中的数两两互质，所以每个四元组不能同时存在某一个数的倍数。</p><p>首先我们可以整理出我们有 $8$ 个质数（$2,3,5,7,11,13,17,19$）在加上 $1$，它们一定两两互质。我们现在可以保证 $9$ 个数的填充，还剩下 $7$ 个数，只要能填进去，那么就可以证明 $23$ 不是最小的最大值。</p><p>如果我们先让 $9$ 个数成两个四元组 $2,3,5,7$ 和 $11,13,17,19$ 因为 $1$ 和任何数不冲突，所以放在心的一组中，成功的可能性更大一些。</p><p>现在还剩下：$4,6,8,9,10,12,14,15,16,18,20,21,22$</p><p>在我们选出 $1,4,9$ 后发现，选不下去了。</p><p>我们换一种放质数的方法试试：</p><p>我们知道每个四元组要求两两互质，所以只能使用 $4$ 个 $2$ 的倍数的数。</p><p>我们直接选最优情况：$2,4,8,16$ 因为它们只占了一个质数。</p><p>然后选 $3$ 的倍数的数：$3,9,15,21$（注意不能再选 $2$ 的倍数的数）</p><p>现在我们已经解决了 $8$ 个数的选择，选质数一定是最优的，还剩下：$5,7,11,13,17,19$ 加上 $1$ 一共 $7$ 个数。我们将选出的数搭配一下：</p><p>$16,11,13,21$</p><p>$8,15,17,19$</p><p>$4,5,7,9$</p><p>$1,2,3,?$</p><p>我们按照最优的方法填好后，发现只剩一个位置了。我们还剩下的数：$6,10,12,14,18,20,22$。</p><p>我们每组中都用过了 $2$ 的倍数的数，选的数是通过最优的情况选出的，但是不可能再选别的数了。</p><p>为什么会这样？</p><p>其实很简单：$[1,22]$ 中有 $11$ 个数是 $2$ 的倍数，我们只能选 $4$ 个，相当于抛弃了 $7$ 个数。我们要找到 $16$ 个数，一共 $22$ 个数，扔了 $7$ 个，就剩 $15$ 个了，所以不可能选出 $16$ 个的。</p><p>同时，我们还说明了如果要找最小的最大值那么 $2$ 的倍数的数一定会出现在每一组四元组中。</p><p>我们知道了一定会选一个偶数，那么选的数越小最好。两个自然数互质，所以会选这个数的相邻的一个数，这个数是奇数。</p><p>也就是说，如果我们选出一个偶数是 $x$，那么我们一定会选 $x+1$，连续的两个奇数一定互质（下面会有连续的 $3$ 的奇数一定互质的证明），所以 $x-1$ 也会选。</p><p>但是，$x+2$ 一定不会选，因为 $\gcd(x,x+2)=2$，那么如果 $x+3$ 可以选，$x+3$ 一定是这个四元组的最大值，同时也是最小的最大值。</p><p>奇数和偶数一定互质，那么只要证明 $x-1,x+1,x+3$ 互质，就能证明方法的正确性，并且找到了最小的最大值。</p><h3 id="连续的-3-个奇数互质"><a href="#连续的-3-个奇数互质" class="headerlink" title="连续的 $3$ 个奇数互质"></a>连续的 $3$ 个奇数互质</h3><p>设三个奇数为：$2x+1,2x+3,2x+5$</p><p>假设前两个奇数不互质，有公因子 $k(k\not= 1)$,那么：$\frac{2x+3}{k}=\frac{2x+1}{k}+m$（$m$ 是整数）</p><script type="math/tex; mode=display">2x+3=2x+k\times m+1</script><script type="math/tex; mode=display">k\times m=2</script><script type="math/tex; mode=display">\because 2=1\times 2,2=2\times 1,k\not= 1</script><script type="math/tex; mode=display">\therefore k=2,m=1</script><p>但是，奇数的因数中不会出现 $2$，矛盾。所以 $2x+1,2x+3$ 互质，$2x+3,2x+5$ 同理。</p><p>假设 $x2+1,2x+5$，不互质，有公因子 $k(k\not= 1)$，那么：$\frac{2x+5}{k}=\frac{2x+1}{k}+m$ （$m$ 是整数）</p><script type="math/tex; mode=display">2x+5=2x+k\times m+1</script><script type="math/tex; mode=display">k\times m=4</script><script type="math/tex; mode=display">\because 4=1\times 4,4=4\times 4,4=2\times 2,k\not= 1</script><script type="math/tex; mode=display">k=4,k=2</script><p>但是，奇数的因数中不会出现 $4,2$，矛盾。所以 $2x+1,2x+5$ 互质。</p><p><strong>注意：连续的 $4$ 个奇数就不同了：$3,5,7,9$，$3,9$ 不互素</strong></p><p>$\frac{2x+7}{k}=\frac{2x+1}{k}+m$ （$m$ 是整数）</p><script type="math/tex; mode=display">2x+7=2x+k\times m+1</script><script type="math/tex; mode=display">k\times m=6</script><script type="math/tex; mode=display">\because 6=1\times 6,6=6\times 1,6=2 \times 3,6=3\times2, k\not= 0</script><script type="math/tex; mode=display">k=6,k=3,k=2</script><p>注意：$k=3$ 时，是可能成立的，它可能成为奇数的因数。</p><script type="math/tex; mode=display">2x+7=2x+1</script><script type="math/tex; mode=display">x=3</script><p>有解，所以四个连续的奇数不是一定是互质的。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d\n"</span><span class="token punctuation">,</span>x<span class="token operator">*</span>k<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>k<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>k<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>差分约束</title>
      <link href="/2021/10/08/chai-fen-yue-shu/"/>
      <url>/2021/10/08/chai-fen-yue-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="差分约束算法"><a href="#差分约束算法" class="headerlink" title="差分约束算法"></a>差分约束算法</h3><p><a href="https://www.luogu.com.cn/problem/P5960">P5960 【模板】差分约束算法</a></p><p>约束条件：$x_i-x_j\leqslant c_k$</p><p>可以变成：$x_i\leqslant c_k+x_j$</p><p>我们将所有条件变成只取等号的形式：$x_i=c_k+x_j$</p><p>我们将所有的条件之间连上边，然后跑最短路，这样可以保证所有的约束条件一定都符合要求。</p><p>将所有点和源点连边（防止有点在求最短路时落掉）。</p><p>但是，会出现负环的情况，即没有解的情况，我们可以考虑如果一组有解，那么一个点最多被使用 $n-1$ 次（自己不连自己），加上源点，就是 $n$ 次，而负环会一直遍历下去，所以我们直接判断点遍历的次数有没有超过 $n$，即可。若超过直接返回无解。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v<span class="token punctuation">,</span>l<span class="token punctuation">,</span>n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>t_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>v_v<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>w<span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">s_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v_v<span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>v_v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化各个节点价值 </span>  v_v<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>b_b<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化源点信息 </span>  q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入源点 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b_b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化节点价值 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>v_v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&gt;</span>v_v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找到价值更小的解法 </span>        v_v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>v_v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//更新 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//目标节点还未遍历过 </span>          b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记 </span>          t_t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//更新使用节点次数 </span>          <span class="token keyword">if</span><span class="token punctuation">(</span>t_t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&gt;</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//出现负环 </span>          q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入遍历队伍 </span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//所有未知量和源点连边 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>w<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存边 </span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">s_f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不存在路径 </span>  <span class="token keyword">else</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>v_v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="糖果"><a href="#糖果" class="headerlink" title="糖果"></a>糖果</h3><p><a href="https://www.luogu.com.cn/problem/P3275">P3275 【SCOI2011】糖果</a></p><p>我们将边权定义为当前点到下一个点如果合法的话，至少比当前点的糖果数多加几个糖果，所没回我们找到的都是至少合法。</p><p>那么我们遍历的就不能是最短路，以为如果是最短路更新边的话，一定会出现不合法情况。</p><p>本题连最长路，如果出现正环，说明不合法。</p><ul><li>如果 $X=1$， 表示第 $A$ 个小朋友分到的糖果必须和第 $B$ 个小朋友分到的糖果一样多；</li></ul><p>将 $(A,B)=0,(B,A)=0$ 连边，保证 $A,B$ 值相等。</p><ul><li>如果 $X=2$， 表示第 $A$ 个小朋友分到的糖果必须少于第 $B$ 个小朋友分到的糖果；</li></ul><p>将 $(A,B)=1$ 连边，保证表示第 $A$ 个小朋友分到的糖果必须少于第 $B$ 个小朋友分到的糖果 $1$ 个。</p><ul><li>如果 $X=3$， 表示第 $A$ 个小朋友分到的糖果必须不少于第 $B$ 个小朋友分到的糖果；</li></ul><p>将 $(B,A)=0$ 连边，保证表示第 $A$ 个小朋友分到的糖果必须不少于第 $B$ 个小朋友分到的糖果。</p><ul><li>如果 $X=4$， 表示第 $A$ 个小朋友分到的糖果必须多于第 $B$ 个小朋友分到的糖果；</li></ul><p>将 $(B,A)=1$ 连边，保证表示第 $B$ 个小朋友分到的糖果必须少于第 $A$ 个小朋友分到的糖果 $1$ 个。</p><ul><li>如果 $X=5$， 表示第 $A$ 个小朋友分到的糖果必须不多于第 $B$ 个小朋友分到的糖果；</li></ul><p>将 $(A,B)=0$ 连边，保证表示第 $A$ 个小朋友分到的糖果必须不多于第 $B$ 个小朋友分到的糖果。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v<span class="token punctuation">;</span>  <span class="token keyword">int</span> n_t<span class="token punctuation">;</span>  <span class="token keyword">int</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">,</span>v_v<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>t_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//加边 </span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">a_d</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建来回边保证值得相同 </span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">==</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自己不能小于自己 </span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>            <span class="token function">a_d</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//A 连向 B，且 B 一定比 A 至少大 1  </span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//A 不小于 B </span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>u<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自己不能小于自己 </span>              <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>            <span class="token function">a_d</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//B 连向 A，且 A 一定比 B 至少大 1 </span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//B 不小于 A </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//与源点建边 </span>    b_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从源点开始跑 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> k<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b_b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存在正环 </span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//使用次数累计 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>v_v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&lt;</span>v_v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更长 </span>                v_v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>v_v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//更新结果 </span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//没使用过 </span>                  b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记 </span>          q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历 </span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">+=</span>v_v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//统计答案 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld "</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 差分约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数极限&amp;极限运算&amp;极限存在准则</title>
      <link href="/2021/10/06/han-shu-ji-xian-ji-xian-yun-suan-ji-xian-cun-zai-zhun-ze/"/>
      <url>/2021/10/06/han-shu-ji-xian-ji-xian-yun-suan-ji-xian-cun-zai-zhun-ze/</url>
      
        <content type="html"><![CDATA[<h2 id="函数极限"><a href="#函数极限" class="headerlink" title="函数极限"></a>函数极限</h2><p>$\frac{1}{x}$ 函数在 $(x&gt;0)$ 的部分：$x \rightarrow +\infty,f(x)\rightarrow 0$</p><h3 id="公式-1"><a href="#公式-1" class="headerlink" title="公式 1"></a>公式 1</h3><p>$x\rightarrow +\infty,f(x)\rightarrow a$</p><p>若 $\exists a,\forall \varepsilon &gt; 0,\exists X,x &gt; X$ 时，$|f(x)-a| &lt; \varepsilon$ </p><script type="math/tex; mode=display">\lim_{x\rightarrow +\infty}{f(x)}=a</script><p>例：证明 </p><script type="math/tex; mode=display">\lim_{x\rightarrow +\infty}{(\frac{1}{2})^{x}}=0</script><p>$\exists \varepsilon &gt; 0(\varepsilon &lt; 1)$，要使 $|f(x)-0| &lt; \varepsilon $</p><p>$\because (\frac{1}{2})^x&lt;\varepsilon $</p><p>$\therefore \frac{1}{\varepsilon} &lt; 2^x$ </p><p>$\therefore x\lg{2} &gt; \lg{\frac{1}{\varepsilon}}$</p><p>$\therefore x &gt; \frac{\lg{\frac{1}{\varepsilon}}}{\lg{2}}$</p><p>取 $X=\frac{\lg{\frac{1}{\varepsilon}}}{\lg{2}}$</p><p>当 $x &gt; X$ 时，有 $|f(x)-a| &lt; \varepsilon$</p><p>注意：原来是<strong>数列极限</strong>，$x_n$ 代表第 $n$ 项，要 $\lfloor\rfloor$（下取整）但这里的 $x$ 是<strong>实数</strong>，所以不用取整。</p><h3 id="公式-2"><a href="#公式-2" class="headerlink" title="公式 2"></a>公式 2</h3><p>$x\rightarrow -\infty,f(x)\rightarrow a$</p><p>$\forall \varepsilon &gt; 0,\exists X(X &gt; 0),x &lt; -X$ 时，$|f(x)-a| &lt; \varepsilon$ </p><script type="math/tex; mode=display">\lim_{x\rightarrow +\infty}{f(x)}=a</script><h3 id="公式-3（合并前两个公式）"><a href="#公式-3（合并前两个公式）" class="headerlink" title="公式 3（合并前两个公式）"></a>公式 3（合并前两个公式）</h3><p>$x\rightarrow \infty,f(x)\rightarrow a$</p><p>$\forall \varepsilon &gt; 0,\exists X(X &gt; 0),|x| &gt; X$ 时，$|f(x)-a| &lt; \varepsilon$ </p><script type="math/tex; mode=display">\lim_{x\rightarrow +\infty}{f(x)}=a</script><h3 id="公式-4"><a href="#公式-4" class="headerlink" title="公式 4"></a>公式 4</h3><p>$x\rightarrow x_0$（趋于有限数）</p><p>$f(x)$ 在 $x_0$ 的<strong>去心邻域</strong>内有定义，在 $x_0$ 处可以没有定义。</p><p>$\exists a,\forall \varepsilon &gt; 0,\exists \delta &gt; 0,0 &lt; |x-x_0| &lt; \delta,|f(x)-a| &lt; \varepsilon$</p><p>（$x$ 取不到 $x_0$，趋近于 $x_0$）</p><p>$|x-x_0| &gt; 0$，$x_0$ 处是否有定义，取值。</p><p>$\varepsilon$：$a$ 的邻域半径。</p><p>$\delta$；$x_0$ 的淋浴半径。</p><p>使函数值都落在 $a$ 的邻域中。</p><p>例子：</p><script type="math/tex; mode=display">\lim_{x\rightarrow 1}{(2x+1)}=3,\lim_{x\rightarrow+\infty}{\sin{x}\rightarrow \sin{x_0}}</script><h3 id="公式-5"><a href="#公式-5" class="headerlink" title="公式 5"></a>公式 5</h3><ul><li>左极限（$x_0 &gt; x$）</li></ul><script type="math/tex; mode=display">x\rightarrow {x_{0}}^{-}</script><p>（从左边逼近），$0 &lt; x_0-x &lt; \delta$</p><script type="math/tex; mode=display">\lim_{x\rightarrow {x_{0}}^{-}}{f(x)}=a</script><p>（注意 ${x_{0}}^{-}$ 的<strong>负号</strong>，代表从左逼近极限，是左极限）</p><ul><li>右极限 （$x_0 &lt; x$）</li></ul><script type="math/tex; mode=display">x\rightarrow {x_{0}}^{+}</script><p>（从右边逼近），$0 &lt; x-x_0 &lt; \delta$</p><script type="math/tex; mode=display">\lim_{x\rightarrow {x_{0}}^{+}}{f(x)}=a</script><p>（注意 ${x_{0}}^{+}$ 的<strong>正号</strong>，代表从右逼近极限，是右极限）</p><script type="math/tex; mode=display">\lim_{x\rightarrow x_0}{f(x)}=a\Leftrightarrow \lim_{x\rightarrow{x_0}^{-}}{f(x)}=\lim_{x\rightarrow{x_0}^{+}}{f(x)}</script><ul><li><p>左右极限不存在，$x\rightarrow x_0$ 不存在。</p></li><li><p>左右极限都存在但是不相等，极限不存在。</p></li></ul><p>例：</p><script type="math/tex; mode=display">f(x)=\left\lbrace\begin{matrix}x(x \leqslant 1)\\2x+1(x>1)\end{matrix}\right.\lim_{x\rightarrow 1}{f(x)}</script><p>左极限：</p><script type="math/tex; mode=display">\lim_{x\rightarrow 1^{-}}{f(x)}=1</script><p>右极限：</p><script type="math/tex; mode=display">\lim_{x\rightarrow 1^{+}}{f(x)}=3</script><p>$1\not=3$ 所以 $x=1$ 不存在极限。</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>性质 $1$：</p><script type="math/tex; mode=display">\lim{f(x)}</script><p>存在，是唯一的。</p><p>性质 $2$：（局部有界性）</p><script type="math/tex; mode=display">\lim{f(x)}</script><p>存在，存在 $x_0$ 去心邻域，$f(x)$ 有界。</p><p>性质 $3$：（局部保号性）</p><script type="math/tex; mode=display">\lim{f(x)}=a,a > 0</script><p>一定存在去心邻域，$f(x) &gt; 0$</p><p>性质 $4$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow}{f(x)} = a\Leftrightarrow x\rightarrow x_0</script><p>任意 $\lbrace x_n\rbrace$，</p><script type="math/tex; mode=display">\lim_{n\rightarrow +\infty}{x_n\rightarrow x_0}</script><script type="math/tex; mode=display">\lim_{n\rightarrow +\infty}{x_n}=a</script><p>函数：连续</p><p>数列：分散（离散）</p><ul><li><p>若找到一个 $\lbrace x_n \rbrace$，数列极限不存在，极限不存在。</p></li><li><p>两个 $\lbrace x_n \rbrace$，数列极限不相等，原函数极限不存在。</p></li></ul><p>例：</p><p>证明</p><script type="math/tex; mode=display">\lim_{x\rightarrow 0}{\sin{\frac{1}{x}}}</script><p>不存在。</p><script type="math/tex; mode=display">x_n=\frac{1}{2n\pi+\frac{\pi}{2}} \rightarrow 0(x\rightarrow 0,x_n\rightarrow 0)</script><script type="math/tex; mode=display">\lim_{n\rightarrow \infty}{\sin{\frac{\pi}{2}}}=1</script><script type="math/tex; mode=display">x_n=\frac{1}{2n\pi} \rightarrow 0(x\rightarrow 0,x_n\rightarrow 0)</script><script type="math/tex; mode=display">\lim_{n\rightarrow \infty}{\sin{2n\pi}}=1</script><script type="math/tex; mode=display">\because 1\not=0</script><script type="math/tex; mode=display">\therefore\lim_{x\rightarrow 0}{\sin{\frac{1}{x}}}</script><p>不存在。</p><h2 id="无穷"><a href="#无穷" class="headerlink" title="无穷"></a>无穷</h2><h3 id="无穷小：趋近于-0-。"><a href="#无穷小：趋近于-0-。" class="headerlink" title="无穷小：趋近于 $0$。"></a>无穷小：趋近于 $0$。</h3><script type="math/tex; mode=display">f(x)\rightarrow 0,\lim_{x\rightarrow0}{x^2}=0</script><p>注意变化过程。</p><p>无穷小 $+$ 无穷小 $\rightarrow 0$</p><p>无穷小 $-$ 无穷小 $\rightarrow 0$</p><p>无穷小 $\times$ 无穷小 $\rightarrow 0$</p><p>无穷小 $/$ 无穷小 $\rightarrow ?$</p><script type="math/tex; mode=display">?=\left\lbrace\begin{matrix}\lim_{x\rightarrow 0}{\frac{x}{x}}=1\\\\\lim_{x\rightarrow 0}{\frac{x}{2x}}=\frac{1}{2}\\\\\lim_{x\rightarrow 0}{\frac{x^2}{x}}=0\\\\\vdots\end{matrix}\right.</script><h4 id="定理-1-："><a href="#定理-1-：" class="headerlink" title="定理 $1$："></a>定理 $1$：</h4><p>无穷小 $x$，有界（确定的数）是无穷小 $=0$。</p><p>例 $1$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow 0}{x\sin{\frac{1}{x}}}=0</script><script type="math/tex; mode=display">|\sin{\frac{1}{x}}|\leqslant 1</script><p>有界</p><script type="math/tex; mode=display">\therefore \lim_{x\rightarrow 0}{x\sin{\frac{1}{x}}}=0</script><p>例 $2$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow \infty}{\frac{\sin{x}}{x}}=\lim_{x\rightarrow \infty}{\frac{1}{x}}\sin{x}=0</script><script type="math/tex; mode=display">\because |\sin{x}|\leqslant 1</script><p>有界</p><script type="math/tex; mode=display">\because \lim_{x\rightarrow \infty}{\frac{1}{x}}=0</script><script type="math/tex; mode=display">\therefore \lim_{x\rightarrow \infty}{\frac{\sin{x}}{x}}=0</script><p>例 $3$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow \infty}{\frac{ard\tan{x}}{x}}=0</script><script type="math/tex; mode=display">\because ard\tan{x}\in[-\frac{\pi}{2},\frac{\pi}{2}]</script><script type="math/tex; mode=display">\therefore \lim_{x\rightarrow \infty}{\frac{ard\tan{x}}{x}}=0</script><h4 id="定理-2-："><a href="#定理-2-：" class="headerlink" title="定理 $2$："></a>定理 $2$：</h4><script type="math/tex; mode=display">\lim{f(x)}=a\Leftrightarrow f(x)=a+\alpha(x),\lim{\alpha(x)}=0</script><script type="math/tex; mode=display">\lim{f(x)}=\lim{a}+\lim{\alpha(x)}=a+0=a</script><h3 id="无穷大：-infty-infty-。"><a href="#无穷大：-infty-infty-。" class="headerlink" title="无穷大：$+\infty,-\infty$。"></a>无穷大：$+\infty,-\infty$。</h3><p>无穷大 $+$ 有界 $\rightarrow$ 无穷大</p><p>无穷大 $\times$ 无穷大 $\rightarrow$ 无穷大</p><p>（关于：<a href="https://wdsa001.github.io/2021/10/05/shu-lie-ji-xian-ji-xian-ji-chu/#toc-heading-7">$(+\infty)+(+\infty)$</a> 一类的运算）</p><h4 id="定理-3-："><a href="#定理-3-：" class="headerlink" title="定理 $3$："></a>定理 $3$：</h4><p>$f(x)$ 无穷大，则 $\frac{1}{f(x)}$ 无穷小，同一变化过程。</p><p>$f(x)$ 无穷小，则 $\frac{1}{f(x)}$ 无穷大。</p><h2 id="极限运算"><a href="#极限运算" class="headerlink" title="极限运算"></a>极限运算</h2><script type="math/tex; mode=display">\lim{f(x)}=a,\lim{g(x)}=b</script><p><strong>极限存在</strong></p><script type="math/tex; mode=display">\lim{(f(x)+g(x))}=\lim{f(x)}+\lim{g(x)}=a+b</script><script type="math/tex; mode=display">\lim{(f(x)-g(x))}=\lim{f(x)}-\lim{g(x)}=a-b</script><script type="math/tex; mode=display">\lim{(f(x)\times g(x))}=\lim{f(x)}\times \lim{g(x)}=a\times b</script><script type="math/tex; mode=display">\lim{\frac{f(x)}{g(x)}}=\frac{\lim{f(x)}}{\lim{g(x)}}=\frac{a}{b}</script><script type="math/tex; mode=display">\lim{nf(x)}=n\lim{f(x)}=n\times a</script><script type="math/tex; mode=display">\lim{(f(x)^n)}=(\lim{f(x)})^n=a^n</script><ul><li><p>常数外提</p></li><li><p>于 $x$ <strong>无关</strong>的变量外提</p></li></ul><p>不能拆<strong>无限个</strong>的极限运算</p><script type="math/tex; mode=display">\lim{(f_1(x)+f_2(x)+f_3(x)+…)}</script><ul><li><p>有限个</p></li><li><p>每个函数的极限存在</p></li></ul><p>例 $1$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow 1}{(2x^2-x+3)}</script><script type="math/tex; mode=display">=\lim_{x\rightarrow 1}{2x^2}-\lim_{x\rightarrow 1}{x}+3</script><script type="math/tex; mode=display">=2-1+3=4</script><p>例 $2$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow 2}{\frac{3x-1}{x^2+6}}=\frac{5}{10}=\frac{1}{2}</script><p>例 $3$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow 2}{\frac{x+2}{x-2}}=\infty</script><ul><li><p>多项式，只接代入</p></li><li><p>有理分式，多项式 $/$ 多项式（$\not=0$），只接代入</p></li></ul><p>例 $4$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow \infty}{\frac{2x^2+3x+1}{5x^2+4x+3}}</script><p>分子分母同时除去 $x^2$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow \infty}{\frac{2+\frac{3}{x}+\frac{1}{x^2}}{5+\frac{4}{x}+\frac{3}{x^2}}}</script><script type="math/tex; mode=display">\because x\rightarrow \infty</script><script type="math/tex; mode=display">\therefore \frac{3}{x}\rightarrow 0</script><script type="math/tex; mode=display">\therefore \lim_{x\rightarrow \infty}{\frac{2+\frac{3}{x}+\frac{1}{x^2}}{5+\frac{4}{x}+\frac{3}{x^2}}}=\frac{2}{5}</script><ul><li>分子分母同次，最高次的系数比即为答案。</li></ul><p>例 $5$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow 0}{\frac{2x^5+x^3+3}{10x^5+x^2-2}}=-\frac{3}{2}</script><p><strong>注意 $x$ 的极限是什么</strong></p><p>例 $6$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow \infty}{\frac{5x^2+4x-1}{3x^3-2}}</script><p>两边同时除 $x^3$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow \infty}{\frac{\frac{5}{x}+\frac{4}{x^2}-\frac{1}{x^3}}{3-\frac{2}{x^3}}}=\frac{0}{3}=0</script><ul><li>分母次数高，结果为 $0$</li></ul><p>例 $7$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow \infty}{\frac{3x^3+4x-1}{3x^2-2}}</script><p>两边同时除 $x^3$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow \infty}{\frac{3+\frac{4}{x^2}-\frac{1}{x^3}}{\frac{3}{x}-\frac{2}{x^3}}}=\frac{3}{0}=\infty</script><ul><li>分子次数高，结果为 $\infty$</li></ul><p>例 $8$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow 1}{\frac{x-1}{x^2-1}}</script><script type="math/tex; mode=display">=\lim_{x\rightarrow 1}{\frac{x-1}{(x-1)(x+1)}}</script><script type="math/tex; mode=display">=\lim_{x\rightarrow 1}{\frac{1}{x+1}}=\frac{1}{2}</script><p>例 $9$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow 0}{\frac{\sqrt{x+1}-1}{x}}</script><script type="math/tex; mode=display">=\lim_{x\rightarrow 0}{\frac{(\sqrt{x+1}-1)(\sqrt{x+1}+1)}{x(\sqrt{x+1}+1)}}</script><script type="math/tex; mode=display">=\lim_{x\rightarrow 0}{\frac{x}{x(\sqrt{x+1}+1)}}</script><script type="math/tex; mode=display">=\lim_{x\rightarrow 0}{\frac{1}{\sqrt{x+1}+1}}=\frac{1}{2}</script><p>例 $10$：</p><script type="math/tex; mode=display">\lim_{n\rightarrow \infty}{(\frac{1}{n^2}+\frac{2}{n^2}+\frac{3}{n^2}+…+\frac{n}{n^2})}</script><script type="math/tex; mode=display">=\lim_{n\rightarrow \infty}{\frac{\frac{1}{2}n(n+1)}{n^2}}</script><script type="math/tex; mode=display">=\lim_{n\rightarrow \infty}{\frac{\frac{1}{2}(n+1)}{n}}</script><script type="math/tex; mode=display">=\frac{1}{2}</script><p>（参见例 $4$ 得到的推论）</p><p>例 $11$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow +\infty}{(\sqrt{x^2+x+1}-\sqrt{x^2-x+1})}</script><script type="math/tex; mode=display">=\lim_{x\rightarrow +\infty}{\frac{x^2+x+1-(x^2-x+1)}{\sqrt{x^2+x+1}+\sqrt{x^2-x+1}}}</script><script type="math/tex; mode=display">=\lim_{x\rightarrow +\infty}{\frac{2x}{\sqrt{x^2+x+1}+\sqrt{x^2-x+1}}}</script><p>$\sqrt{x^2}=x$，指数时 $1$。</p><p>（参见例 $4$ 得到的推论）</p><script type="math/tex; mode=display">=\frac{2}{1+1}=1</script><p>例 $12$：</p><script type="math/tex; mode=display">\lim_{x\rightarrow 3}{\frac{x^2-2x+k}{x-3}}=4</script><p>因为 $\frac{0}{0}$ 会出现结果为常数的情况</p><script type="math/tex; mode=display">\lim_{x\rightarrow 3}{x^2-2x+k}=0</script><script type="math/tex; mode=display">=9-6+k=0</script><script type="math/tex; mode=display">k=-3</script><h3 id="常见求极限的情况"><a href="#常见求极限的情况" class="headerlink" title="常见求极限的情况"></a>常见求极限的情况</h3><ul><li><p>多项式</p></li><li><p>$\frac{\infty}{\infty}$</p></li><li><p>无限项之和</p></li><li><p>分子有理化</p></li><li><p>分子分母消去</p></li></ul><h2 id="极限存在准则"><a href="#极限存在准则" class="headerlink" title="极限存在准则"></a>极限存在准则</h2><h3 id="夹逼定理"><a href="#夹逼定理" class="headerlink" title="夹逼定理"></a>夹逼定理</h3><p>$f(x),g(x),h(x)$ 满足 $U(\hat{x_0},r)$</p><script type="math/tex; mode=display">g(x)\leqslant f(x)\leqslant h(x)</script><script type="math/tex; mode=display">\lim_{x\rightarrow x_0}{g(x)}=\lim_{x\rightarrow x_0}{h(x)}=a\Rightarrow\lim_{x\rightarrow x_0}{f(x)}=a</script><p>例：</p><script type="math/tex; mode=display">\lim_{n\rightarrow\infty}{\frac{2^n}{n!}}</script><script type="math/tex; mode=display">0 < \frac{2^n}{n!} =\frac{2\times 2\times 2\times …\times  2}{1\times 2\times 3\times …\times n} < \frac{2\times 2}{1\times n}=\frac{4}{n}</script><p>$n\rightarrow \infty$ 时，$\frac{4}{n}\rightarrow 0$</p><script type="math/tex; mode=display">\therefore \frac{2^n}{n!}\rightarrow 0</script><script type="math/tex; mode=display">\therefore \lim_{n\rightarrow \infty}{\frac{2^n}{n!}}\rightarrow 0</script><h3 id="定理-2"><a href="#定理-2" class="headerlink" title="定理 2"></a>定理 2</h3><p>单调有界数列必有权限。</p><script type="math/tex; mode=display">|x_n|\leqslant M,-M\leqslant x_n\leqslant M</script><p><strong>单调增有上界必有极限，单调减有下界必有极限。</strong></p><p>例：</p><script type="math/tex; mode=display">a > 0,x_1=\sqrt{a},x_n=\sqrt{a+x_{n-1}}</script><script type="math/tex; mode=display">\sqrt{a} < \sqrt{a+\sqrt{a}}</script><p>设 $x_{n-1} &lt; x_n$</p><script type="math/tex; mode=display">a+x_{n-1} < a+x_n</script><script type="math/tex; mode=display">\sqrt{a+x_{n-1}} < \sqrt{a+x_n}</script><script type="math/tex; mode=display">x_n < x_{n+1}</script><p>$\therefore$ 单调增</p><script type="math/tex; mode=display">x_1=\sqrt{a} < \sqrt{a+\sqrt{a}}</script><p>设 $x_{n-1} &lt; x_n$</p><script type="math/tex; mode=display">x_1=\sqrt{a} < \sqrt{a}+1,x_n< \sqrt{a}+1</script><script type="math/tex; mode=display">x_{n+1}=\sqrt{a+x_n} < \sqrt{a+\sqrt{a}+1}</script><script type="math/tex; mode=display">= \sqrt{(\sqrt{a})^2+\sqrt{a}+1} < \sqrt{(\sqrt{a})^2+2\sqrt{a}+1}=\sqrt{a}+1</script><p>$\therefore$ 有极限</p><p>设 </p><script type="math/tex; mode=display">\lim_{n\rightarrow\infty}{x_n}=b</script><script type="math/tex; mode=display">\lim_{n\rightarrow \infty}{x_n}=\lim_{n\rightarrow \infty}{\sqrt{a+x_{n-1}}}</script><script type="math/tex; mode=display">b=\sqrt{a+b}</script><script type="math/tex; mode=display">b^2-b-a=0</script><script type="math/tex; mode=display">b=\frac{1\pm\sqrt{1+4a}}{2}</script><script type="math/tex; mode=display">b=\frac{1+\sqrt{1+4a}}{2}(b > 0)</script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 极限 </tag>
            
            <tag> 邻域 </tag>
            
            <tag> 数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数列极限&amp;极限基础</title>
      <link href="/2021/10/05/shu-lie-ji-xian-ji-xian-ji-chu/"/>
      <url>/2021/10/05/shu-lie-ji-xian-ji-xian-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="集合-amp-元素"><a href="#集合-amp-元素" class="headerlink" title="集合&amp;元素"></a>集合&amp;元素</h2><p>集合：（一般用大写字母表示：$A$,$B$,$C$）一些确定的对象的事物由元素组成。例如：$\lbrace 1,2,3 \rbrace$，直线上所有的点（$y=x,y=x^2,y=\sqrt{x}$）。</p><p>元素：一般用小写字母表示 $a,b,c$。</p><p>元素有限个：有限集；元素无限个：无限集。</p><p>元素和集合有两种关系：元素被包含：$a\in A$；元素不被包含 $a\notin A$。</p><p>子集：$A\subset B$ 或 $A\supset B$（集合之间的关系）</p><h3 id="集合和元素关系"><a href="#集合和元素关系" class="headerlink" title="集合和元素关系"></a>集合和元素关系</h3><p>$a=1$</p><p>$A=\lbrace 1,2,3 \rbrace$</p><p>$B=\lbrace \lbrace 1,2,3 \rbrace,\lbrace 1,4 \rbrace \rbrace$</p><p>$a\in A$</p><p>$A\in B$（注意符号：对于 B 来说 A 属于元素）</p><p>$A\subset B,B\subset A\Rightarrow A=B$</p><p>空集：$\phi$</p><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>$\cup:A\cup B,A$ 和 $B$ 集合所有包含部分。</p><p>$\cap:A\cap B,A$ 和 $B$ 集合所有重叠部分。</p><p>$-:A- B,A$ 集合中所有和 $B$ 不重叠部分。</p><p>$\Omega:$ 全集。</p><p>$\overline{A}:\overline{A}=\Omega-A$，集合中不与 $A$ 重叠的部分（补集）。</p><p>多重运算：</p><p>$A\cup B=B\cup A$</p><p>$A\cap B=B\cap A$</p><p>$A\cup(B\cup C)=(A\cup B)\cup C$</p><p>$A\cap(B\cap C)=(A\cap B)\cap C$</p><p>$A\cup(B\cap C)=(A\cup B)\cap (A\cup B)$</p><p>$A\cap(B\cup C)=(A\cap B)\cup (A\cap B)$</p><p>$\overline{A\cup B}=\overline{A}\cap\overline{B}$</p><p>$\overline{A\cap B}=\overline{A}\cup\overline{B}$</p><h3 id="直积（笛卡尔乘积）"><a href="#直积（笛卡尔乘积）" class="headerlink" title="直积（笛卡尔乘积）"></a>直积（笛卡尔乘积）</h3><p>直积（笛卡尔乘积）：两个集合相乘。</p><p>$A\times B=\lbrace (a,b)|a\in A,b\in B \rbrace$ <strong>有序对</strong> $a,b$。</p><p>$A=\lbrace 1,2 \rbrace,B=\lbrace 3,4,5 \rbrace$</p><p>$A\times B=\lbrace \lbrace 1,3 \rbrace,\lbrace 1,4 \rbrace,\lbrace 1,5 \rbrace,\lbrace 2,3 \rbrace,\lbrace 2,4 \rbrace,\lbrace 2,5 \rbrace \rbrace$</p><p>$B\times A=\lbrace \lbrace 3,1 \rbrace,\lbrace 3,2 \rbrace,\lbrace 4,1 \rbrace,\lbrace 4,2 \rbrace,\lbrace 5,1 \rbrace,\lbrace 5,2 \rbrace \rbrace$</p><h3 id="邻域"><a href="#邻域" class="headerlink" title="邻域"></a>邻域</h3><p>$U(a,\delta)=\lbrace x|a-\delta &lt; x &lt; a+\delta \rbrace$</p><p>$a$：中点，$\delta$：半径。</p><p>去心邻域（不要中点的邻域）：</p><p>$U(\hat{a},\delta)=\lbrace 0 &lt; |x-a| &lt; \delta \rbrace$</p><p>$\mathring{U}(a,\delta)=\lbrace 0 &lt; |x-a| &lt; \delta \rbrace$</p><p>（符号不统一，两种表示方法同一个意思）。</p><h3 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h3><p>有限区间：</p><ul><li><p>开区间：$(a,b)$</p></li><li><p>闭区间：$[a,b]$</p></li><li><p>左开右闭：$(a,b]$</p></li><li><p>左闭右开：$[a,b)$</p></li></ul><p>无限区间：</p><ul><li><p>开区间：$(-\infty,\infty)$</p></li><li><p>左开右闭：$(-\infty,b]$</p></li><li><p>左闭右开：$[a,\infty)$</p></li></ul><h3 id="无穷的运算"><a href="#无穷的运算" class="headerlink" title="无穷的运算"></a>无穷的运算</h3><p>$(+\infty)+(+\infty)=+\infty$</p><p>$(-\infty)+(-\infty)=-\infty$</p><p>$(+\infty)-(+\infty)=$不确定</p><p>$(-\infty)-(-\infty)=$不确定</p><p>$(+\infty)+(-\infty)=$不确定</p><p>$(+\infty)\times(+\infty)=+\infty$</p><p>$(-\infty)\times(+\infty)=+\infty$</p><p>$(+\infty)\times(-\infty)=-\infty$</p><p>$\frac{+\infty}{+\infty}=$不确定</p><p>$\frac{+\infty}{-\infty}=$不确定</p><p>$\frac{-\infty}{-\infty}=$不确定</p><p>推导：$(+\infty)-(+\infty)=$不确定</p><p>设 $x=+\infty$</p><p>$(+\infty)-(+\infty)=x-x=0$（$0$）</p><p>设 $x=+\infty$</p><p>$\therefore$ $x+5=+\infty$</p><p>$(+\infty)-(+\infty)=(x+5)-x=5$（正数）</p><p>设 $x=+\infty$</p><p>$\therefore$ $x+5=+\infty$</p><p>$(+\infty)-(+\infty)=x-(x+5)=-5$（负数）</p><p>设 $x=+\infty$</p><p>$\therefore$ $x^2=+\infty$</p><p>$(+\infty)-(+\infty)=x^2-x=x\times(x-1)$</p><p>$\because x-1=+\infty$</p><p>$\therefore (+\infty)-(+\infty)=(+\infty)\times(+\infty)=+\infty$（正无穷）</p><p>设 $x=+\infty$</p><p>$\therefore$ $x^2=+\infty$</p><p>$(+\infty)-(+\infty)=x-x^2=x\times(1-x)$</p><p>$\because 1-x=1-\infty=-\infty$</p><p>$\therefore (+\infty)-(+\infty)=(+\infty)\times(-\infty)=-\infty$（负无穷）</p><p>$\therefore$ $(+\infty)-(+\infty)=$不确定</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数概念：设 $A,B$ 是非空的数集，如果按照某个确定的对应关系 $f$，使对于集合 $A$ 中的任意一个数 $x$，在集合 $B$ 中都有唯一确定的数 $f (x)$和它对应，那么就称 $f$ ： $A\to B$ 为从集合 $A$ 到集合 $B$ 的一个函数。 记作：$y=f(x)$，$x\in A$。</p><p>函数相同：<strong>定义域相同</strong>，定义域对应关系相同。</p><p>$\ln(x^2)\not=2\ln(x)$</p><p>$\because \ln(x^2)(x\not=0)$</p><p>$\because 2\ln(x)(x&gt;0)$</p><p>$\therefore \ln(x^2)\not=2\ln(x)$</p><p>例题：$f(x+1)=x^2-x$，求 $f(x)$。</p><p>设 $t=x+1$</p><p>$\therefore f(t)=(t-1)^2-(t-1)$</p><p>$\therefore f(t)=t^2-2t+1-t+1$</p><p>$\therefore f(t)=t^2-3t+2$</p><p>$\therefore f(x)=x^2-3x+2$</p><h3 id="函数表示法："><a href="#函数表示法：" class="headerlink" title="函数表示法："></a>函数表示法：</h3><ul><li>解析法（公式法）</li></ul><p>函数：$y=x$</p><p>分段函数：$y=\lfloor x\rfloor$（不超过 $x$ 的最大值 $\lfloor 1.5\rfloor=1,\lfloor -0.5\rfloor=-1,\lfloor -1.1\rfloor=-2$）</p><ul><li>列表法</li></ul><p>写出几个 $x$ 和其对应的 $y$。（要保证有函数“特色”，根据数据能表示出函数）。</p><ul><li>图像法</li></ul><p>平面直角坐标系。</p><h3 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h3><ul><li>周期函数</li></ul><p>周期函数：$f(x+T)=f(x)$，最小正数 $T$ 是它的周期。</p><p>$\because f(x)$，的周期是 $T$。</p><p>$\therefore f(ax)$，的周期是 $\frac{T}{a}$。</p><ul><li>单调递增函数</li></ul><p>$x_1 &lt; x_2,f(x_1) &lt; f(x_2)$</p><ul><li>单调递减函数</li></ul><p>$x_1 &lt; x_2,f(x_1) &gt; f(x_2)$</p><ul><li>奇函数（定义域关于原点对称)</li></ul><p>$f(-x)=-f(x)$</p><ul><li>偶函数（定义域关于原点对称)</li></ul><p>$f(-x)=f(x)$</p><ul><li>有界函数</li></ul><p>$|f(x)|\leqslant M\Rightarrow -M\leqslant f(x)\leqslant M$（$-M,M$ 即界限）</p><ul><li>反函数</li></ul><p>函数：$y=2x$</p><p>它的反函数 $x=\frac{y}{2}$</p><p>由于书写习惯左边用 $y$ 写，$y=\frac{x}{2}$</p><p>（也可以看成根据 $y=x$ 函数对称）</p><p>变化：</p><p>原函数定义域 $\rightarrow$ 反函数值域</p><p>原函数值域 $\rightarrow$ 反函数定义域</p><p>根据特征不难发现，有些函数<strong>没有</strong>反函数，如果有反函数，函数必须满足原函数 $x,y$ 唯一对应。</p><h2 id="数列极限"><a href="#数列极限" class="headerlink" title="数列极限"></a>数列极限</h2><p>数列：$x_1,x_2,x_3,x_4,…$</p><p>$1,\frac{1}{2},\frac{1}{3},\frac{1}{4},…$(无穷数列)</p><p>第 $n$ 项（通项公式）：$\frac{1}{n}$</p><p>单调递增：$x_1\leqslant x_2\leqslant x_3\leqslant …$</p><p>单调递减：$x_1\geqslant x_2\geqslant x_3\geqslant …$</p><ul><li>有界数列 $|x_n|\leqslant M$</li></ul><p>数列：$\frac{n}{n+1}\Rightarrow \frac{1}{2},\frac{2}{3},\frac{3}{4},…\rightarrow 1$</p><p>我们先定一段小的区间 $\varepsilon=0.1$，代表距离 $1$ 的距离所包含的区间（值 $\geqslant0.9$），设 $N=9$，当 $n$（第 $n$ 项）$&gt; N$ 时 $|x_n-a|&lt; \varepsilon$ 时，$\lbrace x_n \rbrace$ 以 $a$ 为极限。</p><p>极限定义：$|x_n-a|&lt; \varepsilon$ 落在以 $a$ 为中心，以 $\varepsilon$ 为半径的邻域中。</p><h3 id="定义证明极限存在（套模板答题）"><a href="#定义证明极限存在（套模板答题）" class="headerlink" title="定义证明极限存在（套模板答题）"></a>定义证明极限存在（套模板答题）</h3><ul><li>例一：$\lbrace \frac{n}{n+1} \rbrace$ 的极限是 $1$</li></ul><p>我们只要找到 $N$ 的存在即可。</p><p>任给 $\varepsilon &gt; 0$</p><p>$\because |x_n-a|=|\frac{n}{n+1}-1|=\frac{1}{n+1} &lt; \varepsilon$（定义）</p><p>$\therefore \frac{1}{\varepsilon} &lt; n+1$</p><p>$\therefore n&gt;\frac{1}{\varepsilon }-1$</p><p>$\therefore N=\lfloor |\frac{1}{\varepsilon}-1|\rfloor+1$</p><p><strong>注意：这里 $N$ 最后的 $+1$ 只是保证 $n &gt; N$ 后，保证后面所有的项都在邻域中。（$ N=\lfloor |\frac{1}{\varepsilon}-1|\rfloor+100$ 这么写也不是错的）</strong></p><ul><li>例二：$|q| &lt; 1$ 证明：</li></ul><script type="math/tex; mode=display">\lim_{n\rightarrow+\infty}q^n=0</script><p>当 $q=0$ 时，$0^n=0$</p><p>当 $q\not=0$ 时，$\forall \varepsilon &gt; 0(\varepsilon &lt; 1)$</p><p>$\because |q_n-0| &lt; \varepsilon (a=0)$</p><p>$\therefore |q_n| &lt; \varepsilon $</p><p>$\therefore n\log|q| &lt; \log{\varepsilon}$</p><p>$\because |q| &lt; 1$</p><p>$\therefore \log{|q|}&lt;0$</p><p>$\therefore n &gt; \frac{log{\varepsilon}}{\log{|q|}}$</p><p>$\therefore N=\lfloor \frac{log{\varepsilon}}{\log{|q|}}\rfloor +1$</p><p>$n &gt; N$ 时，$|q^n-0| &lt; \varepsilon$</p><ul><li>例三：$a &gt; 0,$ 证明：</li></ul><script type="math/tex; mode=display">\lim_{n\rightarrow+\infty}{\frac{1}{n^a}}=0</script><p>$\forall \varepsilon &gt; 0,|\frac{1}{n^a-0}| &lt; \varepsilon$</p><p>$\therefore \frac{1}{n^a} &gt; \varepsilon$</p><p>$\therefore n^a &gt; \frac{1}{\varepsilon}$</p><p>$\therefore (n^a)^{\frac{1}{a}} &gt; \frac{1}{\varepsilon}^{\frac{1}{a}}$</p><p>$\therefore n &gt; \frac{1}{\varepsilon}^{\frac{1}{a}}$</p><p>$N=\lfloor (\frac{1}{\varepsilon})^{\frac{1}{a}}\rfloor+1$</p><p>$n &gt; N$ 时 $|\frac{1}{n^a}-0| &lt; \varepsilon$</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质 1"></a>性质 1</h3><p>$\lbrace x_n \rbrace$ 收敛，极限唯一。</p><p>反证法：</p><p>假设极限不唯一，有两个极限分别为 $a$，$b$。</p><script type="math/tex; mode=display">\lim_{n\rightarrow +\infty}{x_n}=a</script><script type="math/tex; mode=display">\lim_{n\rightarrow +\infty}{x_n}=b</script><p>$a\not=b$，设 $a &lt; b$，取 $\varepsilon =\frac{b-a}{2}$</p><script type="math/tex; mode=display">\because \lim_{n\rightarrow+\infty}{x_n}=a,\exists N_1,n > N_1,|x_n-a| < \frac{b-a}{2}</script><script type="math/tex; mode=display">\therefore -\frac{b-a}{2} < x_n-a < \frac{b-a}{2}</script><p>第 $n$ 项范围 $1$：</p><script type="math/tex; mode=display">\therefore \frac{3a-b}{2} < x_n < \frac{a+b}{2}</script><script type="math/tex; mode=display">\because \lim_{n\rightarrow+\infty}{x_n}=b,\exists N_2,n > N_2,|x_n-b| < \frac{b-a}{2}</script><script type="math/tex; mode=display">\therefore -\frac{b-a}{2} < x_n-b < \frac{b-a}{2}</script><p>第 $n$ 项范围 $2$：</p><script type="math/tex; mode=display">\therefore \frac{a+b}{2} < x_n < \frac{3b-a}{2}</script><p>第 $n$ 项的范围显然矛盾，所以 $\lbrace x_n \rbrace$ 收敛，极限唯一。</p><h3 id="性质-2"><a href="#性质-2" class="headerlink" title="性质 2"></a>性质 2</h3><p>$\lbrace x_n \rbrace$ 收敛，$\lbrace x_n \rbrace$ 有界。</p><script type="math/tex; mode=display">\lim_{n\rightarrow +\infty}{x_n}=a</script><p>取 $\varepsilon=1,\exists N,n &gt; N$</p><p>$\therefore |x_n-a| &lt; 1$</p><p>$\therefore |x_n|=|x_n-a+a|\leqslant|x_n-a|+|a|&lt;1+|a|$</p><script type="math/tex; mode=display">x_{N+1},x_{N+2},… <|a|+1</script><p>设 $M=\max\lbrace |x_1|,|x_2|,|x_3|,…,|x_N|,|a|+1 \rbrace$</p><p>$M$ 即为“跳不出”的边界。</p><p><strong>有界是收敛的必要条件，不是充分条件，例如：$\lbrace -1,1,-1,1,… \rbrace$</strong></p><p><strong>若数列单调有界，则有极限。</strong></p><h3 id="性质-3"><a href="#性质-3" class="headerlink" title="性质 3"></a>性质 3</h3><script type="math/tex; mode=display">\lim_{n\rightarrow +\infty}{x_n}=a,a > 0,\exists N,n > N,x_n > 0</script><p>设 $a&gt;0$，取 $\varepsilon =\frac{a}{2},\exists N,n &gt; N,|x_n-a| &lt; \frac{a}{2}$</p><p>$\therefore -\frac{a}{2} &lt; x_n-a &lt; \frac{a}{2}$</p><p>$\therefore 0 &lt; \frac{a}{2} &lt; x_n &lt; \frac{3}{2}a$</p><h3 id="性质-4"><a href="#性质-4" class="headerlink" title="性质 4"></a>性质 4</h3><script type="math/tex; mode=display">\lbrace x_{n} \rbrace</script><p>收敛于 $a$，</p><p>任何子数列 </p><script type="math/tex; mode=display">\lbrace x_{k_{n}} \rbrace</script><p>收敛于 $a$。</p><p>原数列：$x_1,x_2,x_3,…$</p><p>子数列：$x_1,x_5,x_7,…$（在原数列中随意取，但要保证数列中的数在原数列中的先后顺序）</p><script type="math/tex; mode=display">\lim_{n\rightarrow +\infty}{x_n}=a,\forall \varepsilon > 0,\exists N,n > N,|x_n-a|<\varepsilon</script><script type="math/tex; mode=display">k_{n} \geqslant n > N,|x_{k_{n}}-a| < \varepsilon</script><script type="math/tex; mode=display">\lbrace x_{k_{n}} \rbrace</script><p> 收敛于 $a$</p><h4 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h4><ul><li><p>推导 1：找到一个子数列不收敛，则原数列不收敛。</p></li><li><p>推导 2：找到两个子数列，虽然收敛，但极限不同，则原序列发散。</p></li></ul><p>原数列：$\lbrace 1,-1,1,-1,… \rbrace$</p><p>子序列 $1$：$1,1,1,1,…$（极限：$1$）</p><p>子序列 $2$：$-1,-1,-1,…$（极限： $-1$）</p><p>子序列极限不同，说明原序列发散。</p><ul><li><p>推导 3：原数列收敛 $\Leftrightarrow$ 奇数项，偶数项构成子序列收敛且极限相同。</p></li><li><p>总结：</p></li></ul><p>如果找到一个收敛子序列，原序列未必收敛。</p><p>如果找到无穷个收敛子序列，原序列未必收敛（找的方式不同）。</p><p>如果找到所有收敛子序列，原序列一定收敛。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 极限 </tag>
            
            <tag> 邻域 </tag>
            
            <tag> 数列 </tag>
            
            <tag> 集合 </tag>
            
            <tag> 直积 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成函数</title>
      <link href="/2021/09/29/sheng-cheng-han-shu/"/>
      <url>/2021/09/29/sheng-cheng-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h3><p>我们很熟悉单项式，例如： $2ab$，$x^{4}$，$\frac{a}{2}$，$…$</p><p>而多项式由单项式组合而成，例如：$2ab+x^{4}+\frac{a}{2}$，$ax+b$，$…$</p><p>多项式表达，例如：$y=4x$，$f(x)=x^{2}+2x+1$，$…$。</p><p>现在我们有多项式形式：</p><script type="math/tex; mode=display">a_{0}+a_{1}x+a_{2}x^{2}+a_{3}x^{3}+…</script><p>函数形式：</p><script type="math/tex; mode=display">f(x)=a_{0}+a_{1}x+a_{2}x^{2}+a_{3}x^{3}+…= \sum_{i\geq0}a_{i}x^{i}</script><p>我们现在使 </p><script type="math/tex; mode=display">a_{0}=1,a_{1}=1,a_{2}=1,…</script><p>于是：</p><script type="math/tex; mode=display">f(x)=1+x+x^{2}+x^{3}+x^{4}+x^{5}+x^{6}+…</script><p>不难发现：</p><script type="math/tex; mode=display">f(1)=1+1+1+1+…=+\infty</script><p>那么 </p><script type="math/tex; mode=display">f(\frac{1}{2})=1+\frac{1}{2}+\frac{1}{4}+\frac{1}{8}+\frac{1}{16}+…=?</script><h3 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h3><p>令 </p><script type="math/tex; mode=display">S=1+\frac{1}{2}+\frac{1}{4}+\frac{1}{8}+\frac{1}{16}+…+\frac{1}{2^{n}}</script><p>将等式两边同时乘 $\frac{1}{2}$：</p><script type="math/tex; mode=display">\frac{1}{2}S=\frac{1}{2}+\frac{1}{4}+\frac{1}{8}+\frac{1}{16}+…+\frac{1}{2^{n}}+\frac{1}{2^{n+1}}</script><p>所以 </p><script type="math/tex; mode=display">\frac{1}{2}S=1-\frac{1}{2^{n+1}}</script><p>所以 </p><script type="math/tex; mode=display">S=\frac{1-\frac{1}{2^{n+1}}}{1-\frac{1}{2}}</script><script type="math/tex; mode=display">f(\frac{1}{2})=\frac{1-\frac{1}{2^{n+1}}}{1-\frac{1}{2}}</script><script type="math/tex; mode=display">f(\frac{1}{x})=\frac{1}{1-\frac{1}{x}}(1-\frac{1}{x^{n+1}})</script><p><strong>注意：$x!=1$，分母不能为 $0$。</strong></p><p>由于 $…$ 代表这个表达式后面还有无穷个单项式，而当 $n$ 无限大时，$\frac{1}{x^{n+1}}$ 无限趋近于 $0$，所以 $f(\frac{1}{2})=2$，$f(\frac{1}{x})=\frac{1}{1-\frac{1}{x}}$</p><p>所以 </p><script type="math/tex; mode=display">f(x)=\frac{1}{1-x}</script><p>而 $\frac{1}{1-x}(0 &lt; x &lt; 1)$ 即 $f(x)$ 的生成函数，更确切地说是 $1+x+x^{2}+x^{3}+x^{4}+x^{5}+x^{6}+…(0 &lt; x &lt; 1)$ 的生成函数。</p><h3 id="极限思想"><a href="#极限思想" class="headerlink" title="极限思想"></a>极限思想</h3><p>首先引入一个例子：证明 $0.\dot{9}=1$</p><p>在主观上，我们总感觉两者差了一点点，但是这个结果却是事实。</p><p>证明：</p><p>设 </p><script type="math/tex; mode=display">x=0.\dot{9}</script><p>两边同时乘 $10$：</p><script type="math/tex; mode=display">10x=9.\dot{9}</script><p>两者做差：</p><script type="math/tex; mode=display">9x=9</script><p>解得 </p><script type="math/tex; mode=display">x=1</script><p>所以 </p><script type="math/tex; mode=display">0.\dot{9}=1</script><p>我们还可以换一种证明：</p><script type="math/tex; mode=display">0.\dot{9}=\frac{9}{10}+\frac{9}{100}+\frac{9}{1000}+\frac{9}{10000}+…</script><script type="math/tex; mode=display">=9\times(\frac{1}{10}+\frac{1}{100}+\frac{1}{1000}+\frac{1}{10000}+…)</script><script type="math/tex; mode=display">=9\times(f(\frac{1}{10})-1)</script><script type="math/tex; mode=display">f(\frac{1}{10})=\frac{10}{9}</script><script type="math/tex; mode=display">9\times(f(\frac{1}{10})-1)=9\times\frac{1}{9}=1</script><script type="math/tex; mode=display">0.\dot{9}=1</script><h3 id="系数决定函数"><a href="#系数决定函数" class="headerlink" title="系数决定函数"></a>系数决定函数</h3><script type="math/tex; mode=display">\sin(x)=x-\frac{1}{3!}x^{3}+\frac{1}{5!}x^{5}-\frac{1}{7!}x^{7}+…</script><p>它的系数对应为：</p><script type="math/tex; mode=display">a_{0}=0,a_{1}=1,a_{2}=0,a_{3}=-\frac{1}{3!},a_{4}=0,a_{5}=\frac{1}{5!},…</script><script type="math/tex; mode=display">e^x=1+x+\frac{1}{2!}x^{2}+\frac{1}{3!}x^{3}+\frac{1}{4!}x^{4}+…</script><p>它的系数对应为：</p><script type="math/tex; mode=display">a_{0}=1,a_{1}=1,a_{2}=\frac{1}{2!},a_{3}=\frac{1}{3!},a_{4}=\frac{1}{4!},…</script><p>我们可以发现不同的系数可以用来表示不同的函数，不同的函数也可以被不同的系数表示（就像坐标系的各种函数都可以被表示）。</p><h3 id="生成函数加和"><a href="#生成函数加和" class="headerlink" title="生成函数加和"></a>生成函数加和</h3><p>斐波那契数列：</p><script type="math/tex; mode=display">f(0)=0</script><script type="math/tex; mode=display">f(1)=1</script><script type="math/tex; mode=display">f(n)=f(n-1)+f(n-2)</script><p>求 </p><script type="math/tex; mode=display">F(n)=f(0)x^{0}+f(1)x^{1}+f(2)x^{2}+…=?</script><p>（这里建议根据斐波那契数列推导式独立思考片刻）</p><p>此时的多项式系数：</p><script type="math/tex; mode=display">a_{0}=0,a_{1}=1,a_{2}=1,a_{3}=2,a_{4}=3,a_{5}=5,…</script><script type="math/tex; mode=display">F(n)=f(0)x^{0}+f(1)x^{1}+f(2)x^{2}+f(3)x^{3}…</script><script type="math/tex; mode=display">xF(x)=f(0)x^{1}+f(1)x^{2}+f(2)x^{3}+…</script><script type="math/tex; mode=display">x^{2}F(x)=f(0)x^{2}+f(1)x^{3}+…</script><p>不难发现 $x$ 的系数大于 $2$ 的每一项关系满足：（$x$ 指数相同的单项式）：$2$ 式的系数 $+3$ 式的系数 $=1$ 式的系数（例如：$x^2$ 的三式系数关系 $f(2)=f(1)+f(0)$）</p><p>所以：</p><script type="math/tex; mode=display">F(x)-xF(x)-x^{2}F(x)=F(0)x^{0}-F(0)x^{1}-F(1)x^{1}</script><p>由于：</p><script type="math/tex; mode=display">f(0)=0</script><script type="math/tex; mode=display">f(1)=1</script><p>所以：</p><script type="math/tex; mode=display">F(x)-xF(x)-x^{2}F(x)=x</script><script type="math/tex; mode=display">F(x)(1-x-x^{2})=x</script><script type="math/tex; mode=display">F(x)=\frac{x}{1-x-x^{2}}</script><p><strong>我们现在已经开始建立函数与数列之间的桥梁了</strong></p><p>函数：$F(x)=\frac{1}{1-x-x^{2}}$</p><p>数列：$f(n)=f(n-1)+f(n-2)$</p><h3 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h3><p>生成函数乘一个数或多项式或单项式或生成函数生成新的生成函数的<strong>操作</strong>叫卷积。</p><p>首先我们先回忆乘法分配律：$(a+b)\times(c+d)=a\times c+a\times d+b\times c+b\times d$</p><p>过程描述：前一个括号里的单项式<strong>分别</strong>乘后一个括号里的单项式形成新的多项式。</p><p>同理：我们也用生成函数的每一个单项式乘要乘的每一个单项式，形成新的多项式（生成函数）。</p><p>令：</p><script type="math/tex; mode=display">F(x)=a_0+a_1x+a_2x^2+a_3x^3+…</script><script type="math/tex; mode=display">G(x)=b_0+b_1x+b_2x^2+b_3x^3+…</script><p>那么：$F(x)\times G(x)$ 的 $x^4$ 的系数是多少?</p><script type="math/tex; mode=display">F(x)\times G(x)=a_0b_0+(a_0b_1+a_1b_0)x+(a_0b_2+a_1b_1+a_2b_0)x^2+…</script><p>我们不难发现 $a_ib_jx^{i+j}$，所以找到所有 $i+j=4$ 的情况的系数和即可，即：</p><script type="math/tex; mode=display">a_0b_4+a_1b_3+a_2b_2+a_3b_1+a_4b_0</script><p>可以看到，我们从 $F(x)$ 中获取系数为 $[0,4]$，$G(x)$ 中同样只不过顺序不同，两者分别相乘就像“卷”起来一样。</p><h3 id="生成函数前缀和"><a href="#生成函数前缀和" class="headerlink" title="生成函数前缀和"></a>生成函数前缀和</h3><script type="math/tex; mode=display">F(x)=a_{0}+a_{1}x+a_{2}x^{2}+a_{3}x^{3}+…</script><script type="math/tex; mode=display">\frac{1}{1-x}=x^0+x^1+x^2+…</script><p>（系数全为 $1$）</p><script type="math/tex; mode=display">F(x)\times\frac{1}{1-x}=a_0x^0+(a_0+a_1)x^1+(a_0+a_1+a_2)x^2+…</script><p><strong>我们通过目标次数获取想得到的系数。</strong></p><h3 id="生成函数实用"><a href="#生成函数实用" class="headerlink" title="生成函数实用"></a>生成函数实用</h3><p>求 $1^2+2^2+3^2+…$</p><p>首先我们知道系数全为 $1$ 的生成函数为 $f(x)=\frac{1}{1-x}$</p><p>我们让它和原生成函数“卷”一下（即前缀和）：$f(x)\times \frac{1}{1-x}=\frac{1}{(1-x)^2}$，此时的系数：$1,2,3,4,5,6…$</p><p>再和原生成函数“卷”一下：$f(x)\times \frac{1}{1-x}=\frac{1}{(1-x)^3}$，此时的系数：$1,3,6,10,15,…$</p><p>此时和我们的目标可以看出来关系了：$0+1=1,1+3=4,3+6=9,6+10=16$。</p><p>所以我们要加它的错位生成函数（即原函数 $\times x$，指数错位带动系数错位）。</p><p>$f(x)+x\times f(x)=\frac{x+1}{(1-x)^3}$，此时的系数：$1,4,9,16,25,…$</p><p>但是我们要求的是和，所以要再和原生成函数“卷”一次：$f(x)=\frac{1+x}{(1-x)^4}$</p><p>住它的下标是 $0$ 开始的，所以我们要他整体在往后错一位：</p><script type="math/tex; mode=display">f(x)=\frac{(1+x)\times x}{(1-x)^4}</script><script type="math/tex; mode=display">=\frac{x^2}{(1-x)^4}+\frac{x}{(1-x)^4}</script><script type="math/tex; mode=display">=x^2\times(1-x)^{-4}+x\times(1-x)^{-4}</script><h3 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h3><script type="math/tex; mode=display">(a+b)^n=C^0_na^nb^0+C^1_na^{n-1}b^1+…+C^r_na^{n-r}b^r+…+C^n_na^0b^n</script><p>可以根据需要的 $r$，找到系数 $C^r_n$，得到结果。</p><p><strong>指数为负数时，二项式定理同样适用。</strong></p><script type="math/tex; mode=display">f(n)=n^2\times(1-n)^{-4}+n\times(1-n)^{-4}</script><script type="math/tex; mode=display">f(n)=C^{3}_{n+2}+C^{3}_{n+1}</script><script type="math/tex; mode=display">(^{n+2}_{3})=C^{3}_{n+2}</script><script type="math/tex; mode=display">f(n)=(^{n+2}_{3})+(^{n+1}_{3})</script><script type="math/tex; mode=display">f(n)=\frac{n(n+1)(2n+1)}{6}</script><p>例题：<a href="https://www.luogu.com.cn/problem/P1313">P1313 NOIP2011 提高组 计算系数</a></p><h3 id="生成函数多样性"><a href="#生成函数多样性" class="headerlink" title="生成函数多样性"></a>生成函数多样性</h3><script type="math/tex; mode=display">e^x=1+x+\frac{1}{2!}x^{2}+\frac{1}{3!}x^{3}+\frac{1}{4!}x^{4}+…</script><p>此时的系数为：$a_0=1,a_1=1,a_2=\frac{1}{2!},a_3=\frac{1}{3!},…$</p><p>我们此时的多项式形式为：</p><script type="math/tex; mode=display">f(x)=a_{0}+a_{1}x+a_{2}x^{2}+a_{3}x^{3}+…</script><p>但是，当我们改成：</p><script type="math/tex; mode=display">f_2(x)=a_{0}+a_{1}x+\frac{a_{2}}{2!}x^{2}+\frac{a_{3}}{3!}x^{3}+…</script><p>此时的系数为：$a_0=1,a_1=1,a_2=1,a_3=1,…$</p><p>所以不同的系数形式会导致系数不同，生成函数的形式也更加灵活。</p><p>不止系数形式可以变形：</p><script type="math/tex; mode=display">f_3(s)=a_1+\frac{a_2}{2^s}+\frac{a_3}{3^s}+…</script><p>（$Dirichlet$ 级生成函数）</p><p>我们可以看到它的 $x$ 变成了指数，并且第一位系数是 $a_1$（原因后面解释），这又是一种新的生成函数。</p><p>我们现在让它们分别“卷”一下：</p><script type="math/tex; mode=display">F(x)=a_{0}+a_{1}x+\frac{a_{2}}{2!}x^{2}+\frac{a_{3}}{3!}x^{3}+…</script><script type="math/tex; mode=display">G(x)=b_{0}+b_{1}x+\frac{b_{2}}{2!}x^{2}+\frac{b_{3}}{3!}x^{3}+…</script><p>现在我们要求：$F(x)\times G(x)$</p><p>我们前面那已经讲了“卷积”这个概念，我们现在写几位感受一下：</p><script type="math/tex; mode=display">F(x)\times G(x)=a_0b_0+(a_0b_1+a_1b_0)x+……</script><p>跟原来的生成函数长得很像，但是由于系数不同，我们要注意处理，再求一次 $x^4$：</p><script type="math/tex; mode=display">(\frac{a_0b_4}{0!4!}+\frac{a_1b_3}{1!3!}+\frac{a_2b_2}{2!2!}+\frac{a_3b_1}{3!1!}+\frac{a_4b_0}{4!0!})x^4</script><p>现在我们将形式槟城我们新的形式：</p><script type="math/tex; mode=display">(\frac{a_0b_4}{0!4!}\times4!+\frac{a_1b_3}{1!3!}\times4!+\frac{a_2b_2}{2!2!}\times4!+\frac{a_3b_1}{3!1!}\times4!+\frac{a_4b_0}{4!0!}\times4!)\frac{x^4}{4!}</script><script type="math/tex; mode=display">=((^{4}_{0})a_0b_4+(^{4}_{1})a_1b_3+(^{4}_{2})a_2b_2+(^{4}_{3})a_3b_1+(^{4}_{4})a_4b_0)\frac{x^4}{4!}</script><p>虽然“卷”的样子不同，但方式相同。</p><script type="math/tex; mode=display">F(s)=a_1+\frac{a_2}{2^s}+\frac{a_3}{3^s}+…</script><script type="math/tex; mode=display">G(s)=b_1+\frac{b_2}{2^s}+\frac{b_3}{3^s}+…</script><p>不难发现 $F(s)\times G(s)$ 的单项式乘法公式是 $\frac{a_ib_j}{(ij)^s}$</p><p>此时不同于 $i+j=n$，变成了 $i\times j=n$。</p><script type="math/tex; mode=display">F(s)\times G(s)=a_1b_1+\frac{(a_1b_2+a_2b_1)}{2^s}+\frac{(a_1b_3+a_3b_1)}{3^s}+…</script><p>现在我们求一下 $\frac{1}{18^s}$</p><script type="math/tex; mode=display">18=1\times 18=2\times 9=3\times 6=6\times 3=9\times 2=18\times 1</script><p>所以：</p><script type="math/tex; mode=display">\frac{(a_1b_{18}+a_2b_9+a_3b_6+a_6b_3+a_9b_2+a_{18}b_1)}{18^s}</script><script type="math/tex; mode=display">F(s)\times G(s)=\sum_{n\geq1}\sum_{d|n}\frac{a_db_{\frac{n}{d}}}{n^s}</script><h3 id="求-n-的约数个数"><a href="#求-n-的约数个数" class="headerlink" title="求 $n$ 的约数个数"></a>求 $n$ 的约数个数</h3><p>设 $d(n)$ 表示 $n$ 的约数的个数。</p><script type="math/tex; mode=display">\zeta(s)=1+\frac{1}{2^s}+\frac{1}{3^s}+…</script><p>即</p><script type="math/tex; mode=display">F(s)=a_1+\frac{a_2}{2^s}+\frac{a_3}{3^s}+…</script><p>系数全部为 $1$ 的形式。</p><p>这类运算很神奇：</p><script type="math/tex; mode=display">\zeta(2)=1+\frac{1}{2^2}+\frac{1}{3^2}+…=\frac{\pi^2}{6}</script><p>而：</p><script type="math/tex; mode=display">\frac{1}{\zeta(s)}=\mu(1)+\frac{\mu(2)}{2^s}+…</script><p>即为莫比乌斯反演。</p><p>回到我们的标题：</p><script type="math/tex; mode=display">\zeta(s)\times\zeta(s)=d(1)+\frac{d(2)}{2^s}+\frac{d(3)}{3^s}+…</script><p>就像我们上面说的 </p><script type="math/tex; mode=display">F(s)\times G(s)=\sum_{n\geq1}\sum_{d|n}\frac{a_db_{\frac{n}{d}}}{n^s}</script><p>只不过，所有的系数都变成了 $1$。</p><p>所以它的“卷积”就变成了公约数的个数，例如： </p><script type="math/tex; mode=display">\frac{(a_1b_{18}+a_2b_9+a_3b_6+a_6b_3+a_9b_2+a_{18}b_1)}{18^s}</script><p>它的系数变成了 $6$。</p><p>因为“卷”的时候根据的是约数才会被“卷”走，所以当系数为 $1$ 时，系数即为约数个数。</p><p>生成函数是“高等数学”很基础的工具，还有很多妙用，一定要学会！</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 卷积 </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 二项式定理 </tag>
            
            <tag> 生成函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K-Dtree</title>
      <link href="/2021/09/28/k-dtree/"/>
      <url>/2021/09/28/k-dtree/</url>
      
        <content type="html"><![CDATA[<h2 id="建-K-D-tree"><a href="#建-K-D-tree" class="headerlink" title="建 K-D tree"></a>建 K-D tree</h2><p>用于维护多维空间上的节点的相对状态或位置。将所有的点组成二叉搜索树。</p><p>以二维空间点举例：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">10----x9-----|---x8     |   |7---x |   |6---|-x   |5---|-|---|---------x4   | |   |         |3---|-|- -|- -x     |2-x | |   |   |     |1-|-|-|-x |   |     |0 1 2 3 4 5 6 7 8 9 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按 $x$ 维排序后取最中间的说数作为根节点，将整个“图”二分（将所有数分成左右两部分）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">10    x |9       | x8       |  7   x   |  6     x |  5       |           x4       |      3       |     x      2 x     |            1       x            0 1 2 3 4 5 6 7 8 9 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">k-d tree        (4,1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>继续在左右部分二分，但这时要按 $y$ 维排序二分（一点个人理解：这么做的原因可以统计在一条线上的点，即不掉点，例如上图的 $(3,6)$ 和 $(3,10)$ 两个点。只要两个点不重合，就一定会加到树上）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">10    x |9       | x8       |  7---x---|  6     x |  5       |-----------x-4       |      3       |     x      2 x     |            1       x            0 1 2 3 4 5 6 7 8 9 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">k-d tree        (4,1)         / <span class="token function selector">\</span>        /   <span class="token function selector">\</span>       /     <span class="token function selector">\</span>      /       <span class="token function selector">\</span>     /         <span class="token function selector">\</span>  (2,7)      (10,5)     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，继续按 $x$ 维排序后二分插入树中，直至所有点全部插入。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">10    x | |9     | | x8     | | |7---x---| |6 |---x-| |5 |     |-----------x-4 |     |     |3 |     |     x      2 x     |     |      1 |     x     |      0 1 2 3 4 5 6 7 8 9 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">k-d tree           (4,1)            / <span class="token function selector">\</span>           /   <span class="token function selector">\</span>          /     <span class="token function selector">\</span>         /       <span class="token function selector">\</span>        /         <span class="token function selector">\</span>     (2,7)      (10,5)      / <span class="token function selector">\ </span>        / <span class="token function selector">\</span>     /   <span class="token function selector">\ </span>      /   <span class="token function selector">\</span>  (1,2) (3,10)(5,9) (7,3)     <span class="token function selector">\</span>    (3,6)     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建树结束，妙用在题中展现。</p><h3 id="简单题"><a href="#简单题" class="headerlink" title="简单题"></a>简单题</h3><p><a href="https://www.luogu.com.cn/problem/P4148">P4148 简单题</a></p><h4 id="替罪羊树"><a href="#替罪羊树" class="headerlink" title="替罪羊树"></a>替罪羊树</h4><p>替罪羊树是计算机科学中，一种基于部分重建的自平衡二叉搜索树。在替罪羊树上，插入或删除节点的平摊最坏时间复杂度是 $O(\log n)$，搜索节点的最坏时间复杂度是 $O(\log n)$。</p><p>有一个“估价”常量，如果一棵树的的某个子树的大小超过“估价”。将整棵树敲碎，然后重组。复杂度 $O(n)$，但是一定不会没回都重建所以均摊<strong>建树</strong>复杂度 $O(\log n)$。</p><p>“估价”常量不能大于 $1.0$ 或小于等于 $0.5$，前者会导致没有操作，后者会导致每回操作。</p><h4 id="大体思路"><a href="#大体思路" class="headerlink" title="大体思路"></a>大体思路</h4><ul><li>动态开点（开垃圾桶，要多次删点，开点）</li><li>实现节点信息更新（区间管辖范围，区间和，子树大小）</li><li>检查是否用“重组”树</li><li>删点</li><li>重新建树操作</li><li>实现单点修改操作</li><li>判断节点区间于目标区间的相对关系</li><li>实现查询操作</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组下标大小 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token comment">//坐标 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//价值 </span><span class="token function">po</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">po</span><span class="token punctuation">(</span><span class="token keyword">int</span> x_x<span class="token punctuation">,</span><span class="token keyword">int</span> y_y<span class="token punctuation">,</span><span class="token keyword">int</span> v_v<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span>x_x<span class="token punctuation">,</span>y<span class="token operator">=</span>y_y<span class="token punctuation">,</span>v<span class="token operator">=</span>v_v<span class="token punctuation">;</span><span class="token comment">//初始化 </span><span class="token punctuation">}</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">k_d</span><span class="token punctuation">{</span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右子树 </span><span class="token comment">//节点覆盖范围 </span><span class="token keyword">int</span> m_i_x<span class="token punctuation">;</span><span class="token comment">//最小 x </span><span class="token keyword">int</span> m_i_y<span class="token punctuation">;</span><span class="token comment">//最小 y </span><span class="token keyword">int</span> m_a_x<span class="token punctuation">;</span><span class="token comment">//最大 x </span><span class="token keyword">int</span> m_a_y<span class="token punctuation">;</span><span class="token comment">//最大 y </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//区间和 </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//子树大小 </span>po p_p<span class="token punctuation">;</span><span class="token comment">//节点信息 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> c_z<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">;</span><span class="token comment">//子树占整棵树多少需要重构 </span><span class="token keyword">int</span> d_x<span class="token punctuation">;</span><span class="token comment">//要重构节点个数 </span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//新点编号 </span><span class="token keyword">int</span> g_g<span class="token punctuation">;</span><span class="token comment">//根节点 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//垃圾桶中节点数量 </span><span class="token keyword">int</span> r_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//节点垃圾桶 </span><span class="token keyword">bool</span> <span class="token function">c_1</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//按 x 排序 </span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">c_2</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//按 y 排序 </span><span class="token keyword">return</span> a<span class="token punctuation">.</span>y<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//动态开点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>s_m<span class="token punctuation">)</span><span class="token keyword">return</span> r_s<span class="token punctuation">[</span>s_m<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_x<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p_p<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token comment">//初始化横坐标最大最小值 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存在左节点，更新最大最小值 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存在右节点，更新最大最小值 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_y<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_y<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p_p<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token comment">//初始化纵坐标最大最小值 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存在左节点，更新最大最小值 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_y<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_y<span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_y<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存在右节点，更新最大最小值 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_y<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_y<span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_y<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p_p<span class="token punctuation">.</span>v<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//更新权值大小 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//更新子树大小 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删点 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//节点不存在，返回 </span>p_p<span class="token punctuation">[</span><span class="token operator">++</span>d_x<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p_p<span class="token punctuation">;</span><span class="token comment">//记录要删的点的信息 </span>r_s<span class="token punctuation">[</span><span class="token operator">++</span>s_m<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//“垃圾”回收 </span><span class="token function">d_l</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删左子树 </span><span class="token function">d_l</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删右子树 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">z_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//非法范围，返回 </span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开新节点 </span><span class="token function">nth_element</span><span class="token punctuation">(</span>p_p<span class="token operator">+</span>l<span class="token punctuation">,</span>p_p<span class="token operator">+</span>m_i<span class="token punctuation">,</span>p_p<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token operator">?</span>c_2<span class="token operator">:</span>c_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按顺序排序（按 x 或 y 排序）区间第 m_i 小 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p_p<span class="token operator">=</span>p_p<span class="token punctuation">[</span>m_i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//继承信息 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">z_b</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">z_b</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>w<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token comment">//返回节点编号 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">&gt;</span>c_z<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">||</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">&gt;</span>c_z<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span><span class="token punctuation">{</span>d_x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化要重构点的个数 </span><span class="token function">d_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删点 </span>k<span class="token operator">=</span><span class="token function">z_b</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重构 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span>po n_n<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点不存在，创建节点 </span>k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p_p<span class="token operator">=</span>n_n<span class="token punctuation">;</span><span class="token comment">//初始化节点信息 </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>w<span class="token operator">&amp;&amp;</span>n_n<span class="token punctuation">.</span>x<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p_p<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>n_n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前是按 x 排序，目标横坐标比当前值小，前往当前节点的左儿子 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>w<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>n_n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前是按 x 排序，目标横坐标比当前值大，前往当前节点的右儿子 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">&amp;&amp;</span>n_n<span class="token punctuation">.</span>y<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p_p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>n_n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前是按 y 排序，目标纵坐标比当前值小，前往当前节点的左儿子 </span><span class="token keyword">else</span> <span class="token function">a_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>n_n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前是按 y 排序，目标纵坐标比当前值大，前往当前节点的右儿子 </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token function">f_b</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查是否要重新建树 </span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">n_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> x_1<span class="token punctuation">,</span><span class="token keyword">int</span> y_1<span class="token punctuation">,</span><span class="token keyword">int</span> x_2<span class="token punctuation">,</span><span class="token keyword">int</span> y_2<span class="token punctuation">,</span><span class="token keyword">int</span> x_x<span class="token punctuation">,</span><span class="token keyword">int</span> y_y<span class="token punctuation">,</span><span class="token keyword">int</span> _x_<span class="token punctuation">,</span><span class="token keyword">int</span> _y_<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x_1<span class="token operator">&lt;=</span>x_x<span class="token operator">&amp;&amp;</span>x_2<span class="token operator">&gt;=</span>_x_<span class="token operator">&amp;&amp;</span>y_1<span class="token operator">&lt;=</span>y_y<span class="token operator">&amp;&amp;</span>y_2<span class="token operator">&gt;=</span>_y_<span class="token punctuation">;</span><span class="token comment">//当前矩形在查询范围内 </span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">w_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> x_1<span class="token punctuation">,</span><span class="token keyword">int</span> y_1<span class="token punctuation">,</span><span class="token keyword">int</span> x_2<span class="token punctuation">,</span><span class="token keyword">int</span> y_2<span class="token punctuation">,</span><span class="token keyword">int</span> x_x<span class="token punctuation">,</span><span class="token keyword">int</span> y_y<span class="token punctuation">,</span><span class="token keyword">int</span> _x_<span class="token punctuation">,</span><span class="token keyword">int</span> _y_<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x_1<span class="token operator">&gt;</span>_x_<span class="token operator">||</span>x_2<span class="token operator">&lt;</span>x_x<span class="token operator">||</span>y_1<span class="token operator">&gt;</span>_y_<span class="token operator">||</span>y_2<span class="token operator">&lt;</span>y_y<span class="token punctuation">;</span><span class="token comment">//完全范围外（完全不重合） </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> x_1<span class="token punctuation">,</span><span class="token keyword">int</span> y_1<span class="token punctuation">,</span><span class="token keyword">int</span> x_2<span class="token punctuation">,</span><span class="token keyword">int</span> y_2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//子树不存在，不贡献 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">n_i</span><span class="token punctuation">(</span>x_1<span class="token punctuation">,</span>y_1<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span>y_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//范围内直接加值 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">w_i</span><span class="token punctuation">(</span>x_1<span class="token punctuation">,</span>y_1<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span>y_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完全不重合返回 </span><span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">n_i</span><span class="token punctuation">(</span>x_1<span class="token punctuation">,</span>y_1<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span>y_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p_p<span class="token punctuation">.</span>x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p_p<span class="token punctuation">.</span>y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p_p<span class="token punctuation">.</span>x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p_p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>a_s<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p_p<span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//当前节点判断 </span>a_s<span class="token operator">+=</span><span class="token function">f_i</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>x_1<span class="token punctuation">,</span>y_1<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span>y_2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">f_i</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>x_1<span class="token punctuation">,</span>y_1<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span>y_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左右子树 </span><span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回统计结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> op<span class="token punctuation">,</span>l_t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//值增加 </span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">^=</span>l_t<span class="token punctuation">,</span>y<span class="token operator">^=</span>l_t<span class="token punctuation">,</span>v<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//解密 </span><span class="token function">a_d</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span><span class="token function">po</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//增加 </span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//矩阵内数字和 </span><span class="token keyword">int</span> x_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_1<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_2<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x_1<span class="token operator">^=</span>l_t<span class="token punctuation">,</span>y_1<span class="token operator">^=</span>l_t<span class="token punctuation">,</span>x_2<span class="token operator">^=</span>l_t<span class="token punctuation">,</span>y_2<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//解密 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>l_t<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>x_1<span class="token punctuation">,</span>y_1<span class="token punctuation">,</span>x_2<span class="token punctuation">,</span>y_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ZPFAR"><a href="#ZPFAR" class="headerlink" title="ZPFAR"></a>ZPFAR</h3><p><a href="https://www.luogu.com.cn/problem/P2093">P2093 国家集训队 JZPFAR</a></p><p>主要思路：</p><ul><li>建树</li><li>通过优先队列存储</li><li>判断优先级更新值</li><li>输出队顶元素值的编号</li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//下标大小  </span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> m_a<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token comment">//定义极大值 </span><span class="token keyword">int</span> g_g<span class="token punctuation">;</span><span class="token comment">//根节点 </span><span class="token keyword">int</span> z_y<span class="token punctuation">;</span><span class="token comment">//根据相同维度排序 </span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//新编号赋值 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> x_y<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//x，y 信息 </span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//编号 </span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> po<span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span><span class="token comment">//距离从大到小排 </span><span class="token keyword">return</span> x_y<span class="token punctuation">[</span>z_y<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">.</span>x_y<span class="token punctuation">[</span>z_y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//根据相同维度排序 </span><span class="token punctuation">}</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右子树 </span><span class="token keyword">int</span> m_a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//x 和 y 最大值 </span><span class="token keyword">int</span> m_i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//x 和 y 最小值 </span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//编号 </span>po v<span class="token punctuation">;</span><span class="token comment">//节点信息 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">f_a</span><span class="token punctuation">{</span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//编号 </span><span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span><span class="token comment">//价值 </span><span class="token function">f_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">f_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> p_p<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//赋初值 </span>i_d<span class="token operator">=</span>p_p<span class="token punctuation">;</span>v<span class="token operator">=</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> f_a<span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span><span class="token comment">//定义值只按一种排序方式 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>a<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token keyword">return</span> i_d<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>i_d<span class="token punctuation">;</span><span class="token keyword">return</span> v<span class="token operator">&gt;</span>a<span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> f_a<span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span><span class="token comment">//定义值只按一种排序方式 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>a<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token keyword">return</span> i_d<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>i_d<span class="token punctuation">;</span><span class="token keyword">return</span> v<span class="token operator">&gt;</span>a<span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>f_a<span class="token operator">&gt;</span> q<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> g_g<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历 x 和 y </span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">.</span>x_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存在左子树 </span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存在右子树 </span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>g_g<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//不符合合法情况 </span>g_g<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//新节点赋新编号 </span><span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>z_y<span class="token operator">=</span>d<span class="token punctuation">;</span><span class="token comment">//根据相同维度排序 </span><span class="token function">nth_element</span><span class="token punctuation">(</span>p_p<span class="token operator">+</span>l<span class="token punctuation">,</span>p_p<span class="token operator">+</span>m_d<span class="token punctuation">,</span>p_p<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将中间节点位置放好 </span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>m_d<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//继承基础信息 </span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span>p_p<span class="token punctuation">[</span>m_d<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">;</span><span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_d<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span><span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>d<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span><span class="token function">u_p</span><span class="token punctuation">(</span>g_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">p_f</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//计算平方 </span><span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">g_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> g_g<span class="token punctuation">,</span>po v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> t_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//点到矩形顶点中的最远曼哈顿距离 </span>t_p<span class="token operator">+=</span><span class="token function">p_f</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>x_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>m_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>x_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> t_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">d_s</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> x_x<span class="token punctuation">,</span><span class="token keyword">int</span> y_y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//两点之间距离 </span><span class="token keyword">return</span> <span class="token number">1ll</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">-</span>x_x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">-</span>x_x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1ll</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">-</span>y_y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">-</span>y_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> g_g<span class="token punctuation">,</span>po v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//从根节点开始找 </span>f_a t_p<span class="token operator">=</span><span class="token function">f_a</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span><span class="token function">d_s</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>x_y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span>x_y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">.</span>x_y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">.</span>x_y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t_p<span class="token operator">&gt;</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比目标大，更新 </span><span class="token keyword">long</span> <span class="token keyword">long</span> l_a<span class="token operator">=</span><span class="token operator">-</span>m_a<span class="token punctuation">,</span>r_a<span class="token operator">=</span><span class="token operator">-</span>m_a<span class="token punctuation">;</span><span class="token comment">//极小值初始化 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span>l_a<span class="token operator">=</span><span class="token function">g_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存在左子树，向左子树询问 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>r_a<span class="token operator">=</span><span class="token function">g_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存在右子树，向右子树询问 </span><span class="token comment">//值更大者优先 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l_a<span class="token operator">&lt;</span>r_a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>r_a<span class="token operator">&gt;=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token function">f_i</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l_a<span class="token operator">&gt;=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token function">f_i</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>l_a<span class="token operator">&gt;=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token function">f_i</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r_a<span class="token operator">&gt;=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token function">f_i</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x_y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入点坐标信息 </span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//初始化编号 </span><span class="token punctuation">}</span><span class="token function">b_t</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树 </span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k<span class="token punctuation">;</span>po w<span class="token punctuation">;</span>w<span class="token punctuation">.</span>x_y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>w<span class="token punctuation">.</span>x_y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入初始信息 </span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空序列 </span><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">f_a</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入 k 次极小值（初始化） </span><span class="token function">f_i</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出编号 </span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> K-Dtree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LCT动态树</title>
      <link href="/2021/09/27/lct-dong-tai-shu/"/>
      <url>/2021/09/27/lct-dong-tai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="LCT"><a href="#LCT" class="headerlink" title="$LCT$"></a>$LCT$</h2><p><a href="https://www.luogu.com.cn/problem/P3690">P3690 【模板】动态树（Link Cut Tree）</a></p><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>$LCT$ 可以理解为很多棵 $Splay$ 组合而成，但是由于每个节点只能有左右两个儿子，但很多点可以有共同的父亲，所以分为实边和虚边。</p><ul><li>实边：儿子和父亲互相可以到达，互相相认。</li><li>虚边：儿子认爹，爹不认儿子。</li></ul><p><img src="https://z3.ax1x.com/2021/09/24/4DqaTK.png" alt="原图"></p><p>这就是一颗 $LCT$，$A$ 和 $B$ 互有联系是实边，而 $C$ 认 $A$ 为父亲，但是 $A$ 不认 $C$ 这个儿子，所以是虚边。</p><p>根据平衡树的性质，将所有平衡树旋转操作，尽量平衡。（注意换根后，连接的对象要变。）</p><p><img src="https://z3.ax1x.com/2021/09/24/4DqNex.png" alt="平衡树划分"></p><p>每一个绿框中都是一颗平衡树，注意除了最上面的平衡树，每棵平衡树的根都会和上面的平衡树连虚边。</p><h3 id="路径异或和"><a href="#路径异或和" class="headerlink" title="路径异或和"></a>路径异或和</h3><p>将两个端点的路径全部变为实根，不断更新节点信息</p><p><img src="https://z3.ax1x.com/2021/09/24/4DqUw6.png" alt="目标状态"></p><h4 id="实虚边变换过程"><a href="#实虚边变换过程" class="headerlink" title="实虚边变换过程"></a>实虚边变换过程</h4><p>原树：<br><img src="https://z3.ax1x.com/2021/09/24/4DqNex.png" alt="原树"></p><p>从目标处开始处理，实虚边转换。<br><img src="https://z3.ax1x.com/2021/09/24/4DqJyR.png" alt="变换-1"></p><p>继续处理。<br><img src="https://z3.ax1x.com/2021/09/24/4DqYO1.png" alt="变换-2"></p><p>向上处理。<br><img src="https://z3.ax1x.com/2021/09/24/4DqwFO.png" alt="变换-3"></p><p>处理到目标处结束。<br><img src="https://z3.ax1x.com/2021/09/24/4Dq0YD.png" alt="处理完成"></p><p>即为目标的路径的相对平衡的树。<br><img src="https://z3.ax1x.com/2021/09/24/4DqUw6.png" alt="目标图"><br>（图片来源自网络）</p><h4 id="异或和"><a href="#异或和" class="headerlink" title="异或和"></a>异或和</h4><p>可以利用平衡树的性质，在旋转变换的同时维护节点信息，即异或和，完成变换后直接访问根节点异或和即为子树的异或和，而子树即为路径。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>大体思路：</p><ul><li>路径虚实边变换</li><li>平衡树左右旋操作</li><li>加边</li><li>删边</li><li>节点改值</li></ul><h4 id="变量名意义"><a href="#变量名意义" class="headerlink" title="变量名意义"></a>变量名意义</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原序列 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//左右儿子 </span><span class="token keyword">int</span> f_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//父节点 </span><span class="token keyword">int</span> s_z<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//当前数的子树异或和 </span><span class="token keyword">int</span> l_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//懒标记（左右儿子翻转） </span><span class="token keyword">int</span> t_p<span class="token punctuation">;</span><span class="token comment">//路径长度（当前点到根节点） </span><span class="token keyword">int</span> l_j<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//路径经过的节点（当前点到根节点）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="节点初值"><a href="#节点初值" class="headerlink" title="节点初值"></a>节点初值</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点初值 </span>s_z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//初始化子树异或和 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="路径异或和-1"><a href="#路径异或和-1" class="headerlink" title="路径异或和"></a>路径异或和</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点信息（子树异或和） </span>s_z<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>s_z<span class="token punctuation">[</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">^</span>s_z<span class="token punctuation">[</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">^</span>a_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//释放懒标记 </span>    <span class="token keyword">int</span> l<span class="token operator">=</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token operator">=</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//释放懒标记 </span>        l_n<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//下传懒标记 </span>l_n<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span>l_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换左右子树 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">i_g</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//返回 1： 不是实边（虚边，不是同一个平衡树），否则是实边 </span><span class="token keyword">return</span> s_n<span class="token punctuation">[</span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token operator">&amp;&amp;</span>s_n<span class="token punctuation">[</span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">l_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//旋转 </span>    <span class="token keyword">int</span> y<span class="token operator">=</span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>z<span class="token operator">=</span>f_a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//当前节点是父节点左儿子 </span><span class="token keyword">else</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//当前节点是父节点右儿子 </span>r<span class="token operator">=</span>l<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//另一个儿子 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">i_g</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//父节点在树上 </span><span class="token keyword">if</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">)</span>s_n<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//父节点在爷节点的左节点，更新为当前节点 </span><span class="token keyword">else</span> s_n<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//爷节点的右儿子更新为当前节点 </span><span class="token punctuation">}</span>    f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">;</span><span class="token comment">//更新 x 的父节点 </span>f_a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//更新 y 的父节点 </span>f_a<span class="token punctuation">[</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span><span class="token comment">//更新 x 的另一个节点的父亲（没改变的节点的父亲的值仍是当前节点，要更新）  </span>    s_n<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//未更新节点接到父节点的转动的子树上 </span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span><span class="token comment">//转动的子树变为父节点 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新子节点 </span><span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新当前节点 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//平衡树维护 </span>    t_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化路径长度（当前点到根节点） </span>l_j<span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//记录当前节点 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">i_g</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">=</span>f_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>l_j<span class="token punctuation">[</span><span class="token operator">++</span>t_p<span class="token punctuation">]</span><span class="token operator">=</span>f_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录到根一路上的节点 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>t_p<span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token function">p_d</span><span class="token punctuation">(</span>l_j<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">i_g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在同一棵平衡树上 </span>        <span class="token keyword">int</span> y<span class="token operator">=</span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>z<span class="token operator">=</span>f_a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录父节点和爷节点 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">i_g</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//父节点在树上 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">l_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//有“折点”，以 x 旋 </span>            <span class="token keyword">else</span> <span class="token function">l_r</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以 y 旋（尽量平衡） </span>        <span class="token punctuation">}</span><span class="token function">l_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以 x 旋 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">r_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//将 x 遍历到总根路径上虚实边变换 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token punctuation">;</span>t<span class="token operator">=</span>x<span class="token punctuation">,</span>x<span class="token operator">=</span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//将 x 翻转到总根（遍历虚边，跨树向上爬） </span><span class="token function">p_h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 x 上转到当前跟 </span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token comment">//更新右子节点 </span><span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">n_g</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//连通路径 </span><span class="token function">r_d</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 x 遍历到总根 </span><span class="token function">p_h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//平衡树换根（x 遍历到当前平衡树的根） </span>l_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//打懒标记 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//x 所在树的根 </span><span class="token function">r_d</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 x 遍历到总根 </span><span class="token function">p_h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//平衡树换根（x 遍历到当前平衡树的根） </span><span class="token keyword">while</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x<span class="token operator">=</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">n_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//x 到 y 之间路径建新树，以 y 为根 </span><span class="token function">n_g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连通路径 </span><span class="token function">r_d</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 y 遍历到总根 </span><span class="token function">p_h</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//平衡树换根（y 遍历到当前平衡树的根） </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">n_t</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建 x 到 y 链之间的新树 </span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s_z<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果（y 为根）树即为范围 </span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="加边"><a href="#加边" class="headerlink" title="加边"></a>加边</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//x，y 连一条边  </span><span class="token function">n_g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换根 </span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span><span class="token comment">//x 的父节点为 y（虚根） </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f_x<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>f_y<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f_x<span class="token operator">!=</span>f_y<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不在一个平衡树加边，否则会形成环 </span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删边"><a href="#删边" class="headerlink" title="删边"></a>删边</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删边 </span><span class="token function">n_t</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建新树 </span><span class="token keyword">if</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token operator">&amp;&amp;</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//x 不是左儿子并且 x 没有右儿子 </span>s_n<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//断左子节点 </span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//断父节点 </span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f_x<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>f_y<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f_x<span class="token operator">==</span>f_y<span class="token punctuation">)</span><span class="token function">d_l</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在同一个树中，删边 </span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改权值"><a href="#改权值" class="headerlink" title="改权值"></a>改权值</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">r_d</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 x 遍历到总根</span><span class="token function">p_h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//平衡树换根（x 遍历到当前平衡树的根） </span>a_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span><span class="token comment">//更新新值 </span><span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组下标 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原序列 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//左右儿子 </span><span class="token keyword">int</span> f_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//父节点 </span><span class="token keyword">int</span> s_z<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//当前数的子树异或和 </span><span class="token keyword">int</span> l_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//懒标记（左右儿子翻转） </span><span class="token keyword">int</span> t_p<span class="token punctuation">;</span><span class="token comment">//路径长度（当前点到根节点） </span><span class="token keyword">int</span> l_j<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//路径经过的节点（当前点到根节点）</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点信息（子树异或和） </span>s_z<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>s_z<span class="token punctuation">[</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">^</span>s_z<span class="token punctuation">[</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">^</span>a_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//释放懒标记 </span>    <span class="token keyword">int</span> l<span class="token operator">=</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token operator">=</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//释放懒标记 </span>        l_n<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//下传懒标记 </span>l_n<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span>l_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换左右子树 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">i_g</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//返回 1： 不是实边（虚边，不是同一个平衡树），否则是实边 </span><span class="token keyword">return</span> s_n<span class="token punctuation">[</span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token operator">&amp;&amp;</span>s_n<span class="token punctuation">[</span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">l_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//旋转 </span>    <span class="token keyword">int</span> y<span class="token operator">=</span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>z<span class="token operator">=</span>f_a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//当前节点是父节点左儿子 </span><span class="token keyword">else</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//当前节点是父节点右儿子 </span>r<span class="token operator">=</span>l<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//另一个儿子 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">i_g</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//父节点在树上 </span><span class="token keyword">if</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">)</span>s_n<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//父节点在爷节点的左节点，更新为当前节点 </span><span class="token keyword">else</span> s_n<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//爷节点的右儿子更新为当前节点 </span><span class="token punctuation">}</span>    f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">;</span><span class="token comment">//更新 x 的父节点 </span>f_a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//更新 y 的父节点 </span>f_a<span class="token punctuation">[</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span><span class="token comment">//更新 x 的另一个节点的父亲（没改变的节点的父亲的值仍是当前节点，要更新）  </span>    s_n<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//未更新节点接到父节点的转动的子树上 </span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span><span class="token comment">//转动的子树变为父节点 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新子节点 </span><span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新当前节点 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//平衡树维护 </span>    t_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化路径长度（当前点到根节点） </span>l_j<span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//记录当前节点 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">i_g</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">=</span>f_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>l_j<span class="token punctuation">[</span><span class="token operator">++</span>t_p<span class="token punctuation">]</span><span class="token operator">=</span>f_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录到根一路上的节点 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>t_p<span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token function">p_d</span><span class="token punctuation">(</span>l_j<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">i_g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在同一棵平衡树上 </span>        <span class="token keyword">int</span> y<span class="token operator">=</span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>z<span class="token operator">=</span>f_a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录父节点和爷节点 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">i_g</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//父节点在树上 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">l_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//有“折点”，以 x 旋 </span>            <span class="token keyword">else</span> <span class="token function">l_r</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以 y 旋（尽量平衡） </span>        <span class="token punctuation">}</span><span class="token function">l_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以 x 旋 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">r_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//将 x 遍历到总根路径上虚实边变换 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token punctuation">;</span>t<span class="token operator">=</span>x<span class="token punctuation">,</span>x<span class="token operator">=</span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//将 x 翻转到总根（遍历虚边，跨树向上爬） </span><span class="token function">p_h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 x 上转到当前跟 </span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token comment">//更新右子节点 </span><span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">n_g</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//连通路径 </span><span class="token function">r_d</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 x 遍历到总根 </span><span class="token function">p_h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//平衡树换根（x 遍历到当前平衡树的根） </span>l_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//打懒标记 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//x 所在树的根 </span><span class="token function">r_d</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 x 遍历到总根 </span><span class="token function">p_h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//平衡树换根（x 遍历到当前平衡树的根） </span><span class="token keyword">while</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x<span class="token operator">=</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">n_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//x 到 y 之间路径建新树，以 y 为根 </span><span class="token function">n_g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连通路径 </span><span class="token function">r_d</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 y 遍历到总根 </span><span class="token function">p_h</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//平衡树换根（y 遍历到当前平衡树的根） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删边 </span><span class="token function">n_t</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建新树 </span><span class="token keyword">if</span><span class="token punctuation">(</span>s_n<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token operator">&amp;&amp;</span>s_n<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//x 不是左儿子并且 x 没有右儿子 </span>s_n<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//断左子节点 </span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//断父节点 </span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//x，y 连一条边  </span><span class="token function">n_g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换根 </span>f_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span><span class="token comment">//x 的父节点为 y（虚根） </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点初值 </span>s_z<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//初始化子树异或和 </span><span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">n_t</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建 x 到 y 链之间的新树 </span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s_z<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果（y 为根）树即为范围 </span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f_x<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>f_y<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f_x<span class="token operator">!=</span>f_y<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不在一个平衡树加边，否则会形成环 </span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f_x<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>f_y<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f_x<span class="token operator">==</span>f_y<span class="token punctuation">)</span><span class="token function">d_l</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在同一个树中，删边 </span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">r_d</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 x 遍历到总根</span><span class="token function">p_h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//平衡树换根（x 遍历到当前平衡树的根） </span>a_a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span><span class="token comment">//更新新值 </span><span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> LCT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可持久化文艺平衡树</title>
      <link href="/2021/09/23/ke-chi-jiu-hua-wen-yi-ping-heng-shu/"/>
      <url>/2021/09/23/ke-chi-jiu-hua-wen-yi-ping-heng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="可持久化文艺平衡树"><a href="#可持久化文艺平衡树" class="headerlink" title="可持久化文艺平衡树"></a>可持久化文艺平衡树</h2><p><a href="https://www.luogu.com.cn/problem/P5055">P5055 【模板】可持久化文艺平衡树</a></p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><a href="https://wdsa001.github.io/2021/09/20/ping-heng-shu-ji-chu/">平衡树</a></p><p><a href="https://wdsa001.github.io/2021/09/20/wen-yi-ping-heng-shu/">文艺平衡树</a></p><p><a href="https://wdsa001.github.io/2021/09/21/zhu-xi-shu-ji-chu/">主席树</a></p><p><a href="https://wdsa001.github.io/2021/09/22/fhq-treap/">fhq-treap</a></p><h3 id="变量意义"><a href="#变量意义" class="headerlink" title="变量意义"></a>变量意义</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组大小 </span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token comment">//极大值 </span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//操作次数 </span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//新节点编号 </span><span class="token keyword">long</span> <span class="token keyword">long</span> l_t<span class="token punctuation">;</span><span class="token comment">//上一次输出结果（用于数据解密） </span>mt19937 <span class="token function">m_t</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机数种子 </span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//随即优先级 </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//子树大小 </span><span class="token keyword">int</span> l_n<span class="token punctuation">;</span><span class="token comment">//懒标记（左右儿子互换） </span><span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span><span class="token comment">//节点价值 </span><span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token punctuation">;</span><span class="token comment">//区间和 </span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//区间左右端点 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//每个时刻的根节点（主席树） </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="大体思路"><a href="#大体思路" class="headerlink" title="大体思路"></a>大体思路</h3><ul><li>写出基本的 fhq-treap 合并操作</li><li>写出基本的 fhq-treap 分裂操作</li><li>完成基本插入操作</li><li>完成基本删除操作</li><li>节点更新时，同时更新区间和标记</li><li>在插入，合并操作中加入释放懒标记操作</li><li>写出释放懒标记操作</li><li>写出区间翻转操作</li><li>写出求区间和操作</li></ul><p><strong>注意：释放懒标记。</strong></p><h3 id="合并，分裂操作"><a href="#合并，分裂操作" class="headerlink" title="合并，分裂操作"></a>合并，分裂操作</h3><p><a href="https://wdsa001.github.io/2021/09/22/fhq-treap/">fhq-treap</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">f_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//分裂 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//节点不存在 </span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">p_d</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//按排名分裂 </span>x<span class="token operator">=</span><span class="token function">c_d</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继承信息 </span><span class="token function">f_l</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续在右子树分裂 </span><span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>y<span class="token operator">=</span><span class="token function">c_d</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继承信息 </span><span class="token function">f_l</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">,</span>x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去左子树分裂 </span><span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">h_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//合并 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token operator">||</span><span class="token operator">!</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token comment">//子树不全，直接合并 </span><span class="token function">p_d</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span><span class="token function">p_d</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">{</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//优先级高的当父节点 </span><span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token comment">//返回当前节点 </span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//优先级高的当父节点 </span><span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token comment">//返回当前节点 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意操作前释放懒标记。</p><h3 id="开点，更新节点"><a href="#开点，更新节点" class="headerlink" title="开点，更新节点"></a>开点，更新节点</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//动态开点 </span>t_r<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//赋初值 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//赋初值 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随即优先级 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化子树大小 </span><span class="token keyword">return</span> x_p<span class="token punctuation">;</span><span class="token comment">//返回编号 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">c_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//开新点并复制原点信息 </span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开新点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//赋值节点信息 </span><span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token comment">//返回节点编号 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点信息 </span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//更新子树大小 </span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//更新区间和 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="释放懒标记"><a href="#释放懒标记" class="headerlink" title="释放懒标记"></a>释放懒标记</h3><p>注意交换左右子树之前建新节点，保留历史记录。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//释放懒标记 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//没有懒标记，返回 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">c_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立新节点（维护历史信息） </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">c_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立新节点（维护历史信息） </span><span class="token function">swap</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换左右子树 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//下传懒标记 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//下传懒标记 </span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//释放完成 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组大小 </span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token comment">//极大值 </span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//操作次数 </span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//新节点编号 </span><span class="token keyword">long</span> <span class="token keyword">long</span> l_t<span class="token punctuation">;</span><span class="token comment">//上一次输出结果（用于数据解密） </span>mt19937 <span class="token function">m_t</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机数种子 </span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//随即优先级 </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//子树大小 </span><span class="token keyword">int</span> l_n<span class="token punctuation">;</span><span class="token comment">//懒标记（左右儿子互换） </span><span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span><span class="token comment">//节点价值 </span><span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token punctuation">;</span><span class="token comment">//区间和 </span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//区间左右端点 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//每个时刻的根节点（主席树） </span><span class="token keyword">int</span> <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//动态开点 </span>t_r<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//赋初值 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//赋初值 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随即优先级 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化子树大小 </span><span class="token keyword">return</span> x_p<span class="token punctuation">;</span><span class="token comment">//返回编号 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">c_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//开新点并复制原点信息 </span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开新点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//赋值节点信息 </span><span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token comment">//返回节点编号 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点信息 </span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//更新子树大小 </span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//更新区间和 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//释放懒标记 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//没有懒标记，返回 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">c_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立新节点（维护历史信息） </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">c_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立新节点（维护历史信息） </span><span class="token function">swap</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换左右子树 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//下传懒标记 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//下传懒标记 </span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//释放完成 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//分裂 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//节点不存在 </span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">p_d</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//按排名分裂 </span>x<span class="token operator">=</span><span class="token function">c_d</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继承信息 </span><span class="token function">f_l</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续在右子树分裂 </span><span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>y<span class="token operator">=</span><span class="token function">c_d</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继承信息 </span><span class="token function">f_l</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">,</span>x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去左子树分裂 </span><span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">h_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//合并 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token operator">||</span><span class="token operator">!</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token comment">//子树不全，直接合并 </span><span class="token function">p_d</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span><span class="token function">p_d</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">{</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//优先级高的当父节点 </span><span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token comment">//返回当前节点 </span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//优先级高的当父节点 </span><span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token comment">//返回当前节点 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_g<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//主席树，时间根 </span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span><span class="token comment">//分裂操作备用根节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//插入 </span><span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">^=</span>l_t<span class="token punctuation">;</span>k<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//解密 </span><span class="token function">f_l</span><span class="token punctuation">(</span>g_i<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 g_i[v] 为根节点的树，按 p 分裂成以 x,y 为根的子树 </span>g_i<span class="token punctuation">[</span><span class="token operator">++</span>n_g<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token function">n_w</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将新节点合并入树 </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删除 </span><span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//解密 </span><span class="token function">f_l</span><span class="token punctuation">(</span>g_i<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 g_i[v] 为根节点的树，按 p 分裂成以 x,z 为根的子树 </span><span class="token function">f_l</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 x 为根节点的树，按 p-1 分裂成以 x,y 为根的子树 </span>g_i<span class="token punctuation">[</span><span class="token operator">++</span>n_g<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将树合并回去，直接存入新节点 </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//翻转区间 </span><span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token operator">^=</span>l_t<span class="token punctuation">;</span>r<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//解密 </span><span class="token comment">//将区间的子树分裂出来（释放懒标记） </span><span class="token function">f_l</span><span class="token punctuation">(</span>g_i<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f_l</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//打懒标记 </span>g_i<span class="token punctuation">[</span><span class="token operator">++</span>n_g<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并回去（合并前会释放懒标记） </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//区间和 </span><span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token operator">^=</span>l_t<span class="token punctuation">;</span>r<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//解密 </span><span class="token comment">//前要求的范围分裂出来 </span><span class="token function">f_l</span><span class="token punctuation">(</span>g_i<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f_l</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>l_t<span class="token operator">=</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出区间和大小 </span>g_i<span class="token punctuation">[</span><span class="token operator">++</span>n_g<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并回去 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> fhq-treap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fhq-treap</title>
      <link href="/2021/09/22/fhq-treap/"/>
      <url>/2021/09/22/fhq-treap/</url>
      
        <content type="html"><![CDATA[<h2 id="可持久化平衡树"><a href="#可持久化平衡树" class="headerlink" title="可持久化平衡树"></a>可持久化平衡树</h2><p><a href="https://www.luogu.com.cn/problem/P3835">P3835 【模板】可持久化平衡树</a></p><p>fhq-treap 的关键思想在于数的分裂和合并思想。</p><h3 id="数组变量意义"><a href="#数组变量意义" class="headerlink" title="数组变量意义"></a>数组变量意义</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">struct po<span class="token punctuation">{</span>    int l,r; int s_z;//子树大小 int i_d;//随即优先级 int v;//节点价值 <span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o&lt;&lt;6<span class="token punctuation">]</span>;int x_p;//节点编号 int g_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span>;//根节点（主席树） <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态开点，更新节点信息"><a href="#动态开点，更新节点信息" class="headerlink" title="动态开点，更新节点信息"></a>动态开点，更新节点信息</h3><p>常规操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点子树大小 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">n_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//动态开点 </span>k<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span>     t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//初始化 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>先将以这个值为界限，将整棵树分成两部分。平衡树的性质不难得出：平衡树分裂成两个树，平衡的特性不变（两棵树都是平衡树，<a href="https://wdsa001.github.io/2021/09/20/ping-heng-shu-ji-chu/">相对位置</a> 不变）。</p><p>例子：（符合平衡树特性）</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">     6    / <span class="token function selector">\</span>   /   <span class="token function selector">\</span>  3     8 / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>1   5 7   9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在要插入 $4$，不断分裂目标值在节点和树的子树的范围内的树的左右子树。</p><p>分裂后：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">   |  6   | / <span class="token function selector">\</span>   |5   <span class="token function selector">\</span>  3|     8 / |    / <span class="token function selector">\</span>1  |   7   9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时非常明显，可以将 $4$ 并入其中一棵树的节点，但为了保持树的“平衡”，要按照随机的优先级决定是作为子节点还是父节点（对于左子树而言）。</p><p>插入后：（插到左边的树中）</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">      6     / <span class="token function selector">\</span>    5   <span class="token function selector">\</span>  3      8 / <span class="token function selector">\ </span>   / <span class="token function selector">\</span>1   4  7   9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或（优先级随机，<a href="https://wdsa001.github.io/2021/09/20/ping-heng-shu-ji-chu/">相对位置</a> 不能变，但 <a href="https://wdsa001.github.io/2021/09/20/ping-heng-shu-ji-chu/">相对高度</a> 可以改变）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">        6    4  / <span class="token function selector">\</span>   /  5   <span class="token function selector">\</span>  3        8 /        / <span class="token function selector">\</span>1        7   9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合并后：</p><p>（第一种情况）<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">      6     / <span class="token function selector">\</span>    /   <span class="token function selector">\</span>   /     <span class="token function selector">\</span>  3       8 / <span class="token function selector">\ </span>    / <span class="token function selector">\</span>1   4   7   9     <span class="token function selector">\</span>      5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>或</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">      6     / <span class="token function selector">\</span>    /   <span class="token function selector">\</span>   /     <span class="token function selector">\</span>  3       8 / <span class="token function selector">\ </span>    / <span class="token function selector">\</span>1   5   7   9   /    4  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（第二种情况）<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       6      / <span class="token function selector">\</span>     4   <span class="token function selector">\</span>    / <span class="token function selector">\ </span>  <span class="token function selector">\</span>   /   5   <span class="token function selector">\</span>  3         8 /         / <span class="token function selector">\</span>1         7   9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>或</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">        6       / <span class="token function selector">\</span>      5   <span class="token function selector">\</span>     /     <span class="token function selector">\</span>    4       <span class="token function selector">\</span>   /         <span class="token function selector">\</span>  3           8 /           / <span class="token function selector">\</span>1           7   9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（随机性可以尽量使最后的树平衡，很小几率会退化成链）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//加点 </span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">f_l</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k 为根的子树，以 v 为界限分裂树 </span>    <span class="token function">n_d</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开新点 </span>    k<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并完整原来的树（将树在合并回去），新根节点为 k </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在调用分裂（当前数会分到左子树中，和写法有关，关键在于与当前值比较是判断分裂时的等号）和合并函数时思路会异常的清晰。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">h_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//合并 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token operator">||</span><span class="token operator">!</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> l<span class="token operator">+</span>r<span class="token punctuation">;</span><span class="token comment">//节点子树不全 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&gt;</span>t_r<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//随机权更大 </span>        <span class="token keyword">int</span> n_n<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//新节点编号 </span>t_r<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//继承原节点信息 </span>        t_r<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接右子树 </span>        <span class="token function">u_p</span><span class="token punctuation">(</span>n_n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span> n_n<span class="token punctuation">;</span><span class="token comment">//返回节点序号 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n_n<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//新节点编号 </span>t_r<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//继承原节点信息 </span>        t_r<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接左子树 </span>        <span class="token function">u_p</span><span class="token punctuation">(</span>n_n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span> n_n<span class="token punctuation">;</span><span class="token comment">//返回节点序号 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//分裂 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span>l<span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//当前节点不存在 </span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">&lt;=</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//目标值比当前值大（当前值会分到左子树） </span>            l<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//新节点 </span>t_r<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//赋值节点信息 </span>            <span class="token function">f_l</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在右子树中找 </span>            <span class="token function">u_p</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            r<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//新节点（含有当前值） </span>t_r<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//赋值节点信息 </span>            <span class="token function">f_l</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">,</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在左子树中找 </span>            <span class="token function">u_p</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删点"><a href="#删点" class="headerlink" title="删点"></a>删点</h3><p>先将整棵树按 $v$ 的值分成两棵树。再将左边的树根据 $v-1$ 分成两棵树。这样此时有左，中，右三棵子树。而中间的树以 $v$ 为更节点，此时直接讲它的左右子树合并成新的子树，$v$ 节点就相当于被删了。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删点 </span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">f_l</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k 为根的子树，以 v 为界限分裂为 x，z 根节点子树 </span>    <span class="token function">f_l</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//x 为根的子树，以 v-1 为界限分裂 x，y 根节点的子树 </span>    <span class="token comment">//价值为 v 的点被“孤立”了 （自成一棵树，只有一个节点，其本身） </span>    y<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并 v 节点的子树，新根复制到 y 节点中 </span>    k<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并完整原来的树（将树在合并回去），新根节点为 k  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="找的排名（数的排名）"><a href="#找的排名（数的排名）" class="headerlink" title="找的排名（数的排名）"></a>找的排名（数的排名）</h3><p>维护了每个点的值大小，通过比对当前值与目标值大小关系，找到排名的位置（左子树，右子树或当前节点），递归寻找即可。</p><p>正常的分裂合并操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">f_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找 x 的排名 </span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token function">f_l</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以 v-1 为界线，分裂为 x，y 根节点子树 </span>    <span class="token keyword">int</span> a_s<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//左子树大小 +1 </span>    k<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将树合并回去，更节点仍是 k </span>    <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="找数（排名的数）"><a href="#找数（排名的数）" class="headerlink" title="找数（排名的数）"></a>找数（排名的数）</h3><p>维护了每个点的子树大小，可以通过左子树的大小可以判断找的排名的位置（左子树，右子树或当前节点），递归寻找即可。</p><p>正常的分裂合并操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">f_x</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//排名为 x 的数 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//左子树大小 +1 是目标排名，直接返回值 </span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_x</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//目标值小，被包含在左子树中 </span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">f_x</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在右子树中找 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前驱"><a href="#前驱" class="headerlink" title="前驱"></a>前驱</h3><p>先将树按 $v-1$ 分为左右两棵树，在左子树中一找排名最大的即为前驱。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">f_q</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找前驱 </span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>n_n<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span>    <span class="token function">f_l</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k 为根的子树，以 v-1 为界限分裂为 x，y 根节点子树 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token comment">//未找到子节点，返回题目要求值 </span>    n_n<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">;</span>    a_s<span class="token operator">=</span><span class="token function">f_x</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n_n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每回找右子树（越靠右值越大，越接近正确答案） </span>    k<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拆的输在合并回去 </span>    <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后继"><a href="#后继" class="headerlink" title="后继"></a>后继</h3><p>先将树按 $v$ 分为左右两棵树，在右子树中一找排名第一的即为后继。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">f_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找后继 </span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span>    <span class="token function">f_l</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k 为根的子树，以 v 为界限分裂为 x，y 根节点子树 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token comment">//未找到子节点，返回题目要求值 </span>    a_s<span class="token operator">=</span><span class="token function">f_x</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找右子树中排名第一的 </span>    k<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拆的输在合并回去 </span>    <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组下标大小 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span> <span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//子树大小 </span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//随即优先级 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//节点价值 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//节点编号 </span><span class="token keyword">int</span> g_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//根节点（主席树） </span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点子树大小 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">n_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//动态开点 </span>k<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span>     t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//初始化 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">h_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//合并 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token operator">||</span><span class="token operator">!</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> l<span class="token operator">+</span>r<span class="token punctuation">;</span><span class="token comment">//节点子树不全 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&gt;</span>t_r<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//随机权更大 </span>        <span class="token keyword">int</span> n_n<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//新节点编号 </span>t_r<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//继承原节点信息 </span>        t_r<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接右子树 </span>        <span class="token function">u_p</span><span class="token punctuation">(</span>n_n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span> n_n<span class="token punctuation">;</span><span class="token comment">//返回节点序号 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n_n<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//新节点编号 </span>t_r<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//继承原节点信息 </span>        t_r<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接左子树 </span>        <span class="token function">u_p</span><span class="token punctuation">(</span>n_n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span> n_n<span class="token punctuation">;</span><span class="token comment">//返回节点序号 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//分裂 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span>l<span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//当前节点不存在 </span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">&lt;=</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//目标值比当前值大 </span>            l<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//新节点 </span>t_r<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//赋值节点信息 </span>            <span class="token function">f_l</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在右子树中找 </span>            <span class="token function">u_p</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            r<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//新节点 </span>t_r<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//赋值节点信息 </span>            <span class="token function">f_l</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">,</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在左子树中找 </span>            <span class="token function">u_p</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//加点 </span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">f_l</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k 为根的子树，以 v 为界限分裂树 </span>    <span class="token function">n_d</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开新点 </span>    k<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并完整原来的树（将树在合并回去），新根节点为 k </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删点 </span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">f_l</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k 为根的子树，以 v 为界限分裂为 x，z 根节点子树 </span>    <span class="token function">f_l</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//x 为根的子树，以 v-1 为界限分裂 x，y 根节点的子树 </span>    <span class="token comment">//价值为 v 的点被“孤立”了 （自成一棵树，只有一个节点，其本身） </span>    y<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并 v 节点的子树，新根复制到 y 节点中 </span>    k<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并完整原来的树（将树在合并回去），新根节点为 k  </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找 x 的排名 </span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token function">f_l</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以 v-1 为界线，分裂为 x，y 根节点子树 </span>    <span class="token keyword">int</span> a_s<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//左子树大小 +1 </span>    k<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将树合并回去，更节点仍是 k </span>    <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_x</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//排名为 x 的数 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//左子树大小 +1 是目标排名，直接返回值 </span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_x</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//目标值小，被包含在左子树中 </span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">f_x</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在右子树中找 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_q</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找前驱 </span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>n_n<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span>    <span class="token function">f_l</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k 为根的子树，以 v-1 为界限分裂为 x，y 根节点子树 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token comment">//未找到子节点，返回题目要求值 </span>    n_n<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">;</span>    a_s<span class="token operator">=</span><span class="token function">f_x</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n_n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找左子树中排名最大的 </span>    k<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拆的输在合并回去 </span>    <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找后继 </span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span>    <span class="token function">f_l</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//k 为根的子树，以 v 为界限分裂为 x，y 根节点子树 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token comment">//未找到子节点，返回题目要求值 </span>    a_s<span class="token operator">=</span><span class="token function">f_x</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找右子树中排名第一的 </span>    k<span class="token operator">=</span><span class="token function">h_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拆的输在合并回去 </span>    <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l_s<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>g_i<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//复制历史版本信息 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>g_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加点 </span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">d_l</span><span class="token punctuation">(</span>g_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删点 </span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f_p</span><span class="token punctuation">(</span>g_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找 x 的排名 </span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f_x</span><span class="token punctuation">(</span>g_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找排名为 x 的数 </span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f_q</span><span class="token punctuation">(</span>g_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前驱 </span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f_h</span><span class="token punctuation">(</span>g_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后继 </span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> fhq-treap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主席树（基础）</title>
      <link href="/2021/09/21/zhu-xi-shu-ji-chu/"/>
      <url>/2021/09/21/zhu-xi-shu-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>不断开辟新的节点，存储新状态下改变的点，不改变的点直接回历史中去找，相当于新存变化的节点，不变的节点共用。</p><h2 id="可持久化线段树-1"><a href="#可持久化线段树-1" class="headerlink" title="可持久化线段树 1"></a>可持久化线段树 1</h2><p><a href="https://www.luogu.com.cn/problem/solution/P3919">P3919 【模板】可持久化线段树 1（可持久化数组）</a></p><p>时间数组下标维护的是根节点。在根节点建树，不变的部分直接指向原先的子树即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q<span class="token punctuation">,</span>a_s<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右儿子 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//节点价值 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//分配节点编号 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是子叶 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//节点赋值 </span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span><span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> l_s<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> q<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//分配新节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//继承历史节点信息 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>t_r<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是叶节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//更改新值 </span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">&lt;=</span>m_i<span class="token punctuation">)</span><span class="token function">g_a</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>q<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//目标点在左子树 </span><span class="token keyword">else</span> <span class="token function">g_a</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>q<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//目标点在右子树 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//找到叶节点 </span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">&lt;=</span>m_i<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_i</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//目标节点在左子树 </span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">f_i</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//目标节点在右子树 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原序列 </span><span class="token function">b_t</span><span class="token punctuation">(</span>a_s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树（0 的历史状态根节点为 0） </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> l_s<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前值，历史值，左端点，右端点，要改的位置，改成的值 </span><span class="token function">g_a</span><span class="token punctuation">(</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a_s<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改值 </span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f_i</span><span class="token punctuation">(</span>a_s<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询节点信息 </span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//直接复制历史信息（完全一样的版本） </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="可持久化线段树-2"><a href="#可持久化线段树-2" class="headerlink" title="可持久化线段树 2"></a>可持久化线段树 2</h2><p><a href="https://www.luogu.com.cn/problem/P3834">P3834 【模板】可持久化线段树 2</a></p><p>每插入一个数，存一次线段树的状态。时间变成了插入的顺序，这样查 $[l,r]$ 区间第 $k$ 大时，找到 $l-1$，$r$ 为根的线段树，相减，剩下的树中的数就是 $[l,r]$ 中的所有数。直接查排名即可。（插入数的时候要根据平衡树的特性插，这样查询的时候，就是平衡树查排名。）</p><p>注意：由于本题的值域过大，所以要离散化。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//节点编号 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//子树大小 </span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右节点 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_g<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//每个时刻线段树的根节点 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>s_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原序列，离散化后的序列 </span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span> k<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//新节点编号 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//叶子结点返回 </span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span><span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x_x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//新节点标号 </span>t_r<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//记录上个状态左右儿子 </span>t_r<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//记录上个状态左右儿子 </span>t_r<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//每次比上次多加一个点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token comment">//叶子结点，没有子树返回 </span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x_x<span class="token operator">&lt;=</span>m_i<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">a_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//目标在左子树 </span><span class="token keyword">else</span> t_r<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">a_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//目标在右子树 </span><span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token comment">//返回节点编号 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> t_1<span class="token punctuation">,</span><span class="token keyword">int</span> t_2<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a_s<span class="token punctuation">;</span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//从 t_2 状态减去 t_1-1 后，剩下的元素直接查排名即可 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token comment">//叶子结点，找到目标，返回 </span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;=</span>k<span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在左子树中 </span><span class="token keyword">else</span> a_s<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在右子树中 </span><span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原序列 </span>s_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//初始化离散序列 </span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>s_a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s_a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//离散序列排序 </span><span class="token keyword">int</span> l_n<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>s_a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s_a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>s_a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//去重后的长度 </span><span class="token function">b_t</span><span class="token punctuation">(</span>g_g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>l_n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x_x<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>s_a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s_a<span class="token operator">+</span>l_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>s_a<span class="token punctuation">;</span><span class="token comment">//当前数在整个序列中的排名 </span>g_g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">a_d</span><span class="token punctuation">(</span>g_g<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>l_n<span class="token punctuation">,</span>x_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储更节点编号 </span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//询问 </span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>g_g<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>g_g<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>l_n<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查寻结果 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s_a<span class="token punctuation">[</span>a_s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在离散化后的数组中找答案 </span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="高级打字机"><a href="#高级打字机" class="headerlink" title="高级打字机"></a>高级打字机</h2><p><a href="https://www.luogu.com.cn/problem/P1383">P1383 高级打字机</a></p><p>存每一个字符插入后的变化新树，回撤操作直接访问里历史根节点即可，查找字符直接找排名找值即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>x_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>z_g<span class="token punctuation">;</span><span class="token keyword">int</span> g_g<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> l<span class="token punctuation">;</span><span class="token keyword">int</span> r<span class="token punctuation">;</span><span class="token keyword">char</span> v<span class="token punctuation">;</span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新子树大小 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">c_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> l_s<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">char</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//超出范围，退出 </span>k<span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//变新节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//继承这个节点的状态 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>t_r<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//子叶，记录新字符状态 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//记录新字符 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//更新子树大小 </span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">==</span>m_i<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//左子树满了 </span><span class="token function">c_a</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插到右子树 </span><span class="token keyword">else</span> <span class="token function">c_a</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>l_s<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树没满 </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在当前子树中找排名 </span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//找到节点 </span><span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span><span class="token comment">//左子树能包含这种情况 </span><span class="token keyword">return</span> <span class="token function">g_a</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token comment">//在右子树找 </span><span class="token keyword">return</span> <span class="token function">g_a</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> op<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>op<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">'T'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span><span class="token operator">++</span>z_g<span class="token punctuation">;</span><span class="token comment">//更新总操作数 </span><span class="token function">c_a</span><span class="token punctuation">(</span>g_g<span class="token punctuation">[</span>z_g<span class="token punctuation">]</span><span class="token punctuation">,</span>g_g<span class="token punctuation">[</span>z_g<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入字符 </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">'U'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>z_g<span class="token punctuation">;</span><span class="token comment">//更新总操作数 </span>g_g<span class="token punctuation">[</span>z_g<span class="token punctuation">]</span><span class="token operator">=</span>g_g<span class="token punctuation">[</span>z_g<span class="token operator">-</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//返回历史状态 </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">'Q'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">g_a</span><span class="token punctuation">(</span>g_g<span class="token punctuation">[</span>z_g<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出当前转态字符 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡树（基础）</title>
      <link href="/2021/09/20/ping-heng-shu-ji-chu/"/>
      <url>/2021/09/20/ping-heng-shu-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="普通平衡树"><a href="#普通平衡树" class="headerlink" title="普通平衡树"></a>普通平衡树</h2><p><a href="https://www.luogu.com.cn/problem/P3369">P3369 【模板】普通平衡树</a></p><h3 id="旋转原理"><a href="#旋转原理" class="headerlink" title="旋转原理"></a>旋转原理</h3><p>为方便理解，先定义两个名词：</p><ul><li><p>相对位置：树被压缩成一维数组后，节点的左右位置关系。</p></li><li><p>相对高度：相邻的两个节点在树上的高低关系。</p></li></ul><p>由于平衡树的性质：左节点比父节点的值小，父节点的值比父节点的值大。所以我们将整棵树压成一维数组后，变成了一个升序数组。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">数            (5)              /|<span class="token function selector">\</span>             / | <span class="token function selector">\</span>            /  |  <span class="token function selector">\</span>           /   |   <span class="token function selector">\</span>          /    |    <span class="token function selector">\</span>        (3)    |    (7)        /|<span class="token function selector">\ </span>   |    /|<span class="token function selector">\</span>       / | <span class="token function selector">\ </span>  |   / | <span class="token function selector">\</span>     (1) | (4) | (6) | (9)      |  |  |  |  |  |  |数组 (1)(3)(4)(5)(6)(7)(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>平衡树的建立会根据数据的插入决定。例如不同顺序插入 $1,3,4,5,6,7,9$。</p><p>按 $5,3,7,1,4,6,9$ 的顺序插入：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">数            (5)              /|<span class="token function selector">\</span>             / | <span class="token function selector">\</span>            /  |  <span class="token function selector">\</span>           /   |   <span class="token function selector">\</span>          /    |    <span class="token function selector">\</span>        (3)    |    (7)        /|<span class="token function selector">\ </span>   |    /|<span class="token function selector">\</span>       / | <span class="token function selector">\ </span>  |   / | <span class="token function selector">\</span>     (1) | (4) | (6) | (9)      |  |  |  |  |  |  |数组 (1)(3)(4)(5)(6)(7)(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按 $1,3,4,5,6,7,9$ 的顺序插入：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">数   (1)      | <span class="token function selector">\</span>      | (3)      |  | <span class="token function selector">\</span>      |  | (4)      |  |  | <span class="token function selector">\</span>      |  |  | (5)      |  |  |  | <span class="token function selector">\</span>      |  |  |  | (6)      |  |  |  |  | <span class="token function selector">\</span>      |  |  |  |  | (7)      |  |  |  |  |  | <span class="token function selector">\</span>      |  |  |  |  |  | (9)      |  |  |  |  |  |  |数组 (1)(3)(4)(5)(6)(7)(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>退化的惨不忍睹。</del></p><p>我们旋转的目的，是将整棵树尽量向着满二叉树进步，查询一次或插入一个数，便利的次数直接影响时间效率。而越接近满二叉树，时间复杂路越接近<br> $O(\log_n)$ 而如果退化成一条链，时间复杂度变为 $O(n)$。为了防止这种情况的出现，便有了旋转操作。</p><p>旋转操作并不会破坏平衡树的性质，只是改变值在树上的相对高度。上面的两个图可以发现顺序相同，但值在两个图中的相对高度不同，而旋转操作可以理解成将第二个图向着第一个图的方向转换（一些节点的相对高度下拉或上提）。</p><h4 id="旋转过程"><a href="#旋转过程" class="headerlink" title="旋转过程"></a>旋转过程</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">数   (1)      | <span class="token function selector">\</span>      | (3)      |  | <span class="token function selector">\</span>      |  | (4)      |  |  | <span class="token function selector">\</span>      |  |  | (5)      |  |  |  | <span class="token function selector">\</span>      |  |  |  | (6)      |  |  |  |  | <span class="token function selector">\</span>      |  |  |  |  | (7)      |  |  |  |  |  | <span class="token function selector">\</span>      |  |  |  |  |  | (9)      |  |  |  |  |  |  |数组 (1)(3)(4)(5)(6)(7)(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 $5$ 为旋转节点旋转。为了让他更接近满二叉树我们要左旋，即：让他的父亲变为它的左儿子（父节点相对位置下拉）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">数   (1)      | <span class="token function selector">\</span>      | (3)      |  | <span class="token function selector">\</span>      |  |  <span class="token function selector">\</span>      |  |   <span class="token function selector">\</span>      |  |    <span class="token function selector">\</span>      |  |    (5)      |  |   / | <span class="token function selector">\</span>      |  | (4) | (6)      |  |  |  |  | <span class="token function selector">\</span>      |  |  |  |  | (7)      |  |  |  |  |  | <span class="token function selector">\</span>      |  |  |  |  |  | (9)      |  |  |  |  |  |  |数组 (1)(3)(4)(5)(6)(7)(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：平衡树的左右旋转的操作可以抵消，就是说以一个点左旋后，在以这个点右旋会变为原来的样子。（上一个图以 $5$ 节点右旋换变成左旋的图）。</p><p>上面的图可能不方便理解，我们演示一个旋转后是满二叉树的例子。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">            (1)            /|<span class="token function selector">\</span>           / | <span class="token function selector">\</span>          /  |  <span class="token function selector">\</span>         /   |   <span class="token function selector">\</span>        /    |    <span class="token function selector">\</span>      (2)    |   (3)      /|<span class="token function selector">\ </span>   |    |     / | <span class="token function selector">\ </span>  |    |    /  |  <span class="token function selector">\ </span> |    |    (4)  | (5) |    |  /|<span class="token function selector">\ </span> |  |  |    |(6)|(7)|  |  |    |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 $2$ 节点右旋即可成为满二叉树，我们顺便演示一下旋转的过程。</p><p>首先我们要知道旋转后的样子（没有目地的旋转是无用功）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">        (2)         /|<span class="token function selector">\</span>       / | <span class="token function selector">\</span>      /  |  <span class="token function selector">\</span>     /   |   <span class="token function selector">\</span>   (4)   |   (1)   /|<span class="token function selector">\ </span>  |   /|<span class="token function selector">\</span>  / | <span class="token function selector">\ </span> |  / | <span class="token function selector">\</span>(6) | (7)|(5) | (3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（不难看出，两个节点的左右关系没变，变的只是相对高度，它的原理其实就是平衡术的性质：左儿子 $ &lt; $ 父节点 $ &lt; $ 右儿子）</p><p>相对位置不变，我们又要右旋 $2$ 节点，所以 $1$ 要成为 $2$ 的儿子，$1$ 比 $2$ 大所以会成为 $2$ 的右儿子，但是 $2$ 本身有右儿子 $5$，所以 $1$ 和 $5$ 也要有新的关系，因为 $1$ 在 $5$ 的右边（相对位置）所以 $5$ 只能是 $1$ 的左儿子。</p><p>大概的方向也有了，可以旋转了。首先建一个新节点来保存 $2$ 的右节点，这样就可以为 $1$ 节点腾出位置，$1$ 节点可以直接成为 $2$ 的右子树，然后将 $2$ 原来的右节点接到 $1$ 的左子树，最后换根,将更的编号直接换成 $2$，更新节点信息即可。<strong>要先更新节点信息，才能保证根节点是最新信息</strong>。</p><p>但是，由于我们平衡树只存子节点，存父节点不必要的，所以我们还要讨论节点的左右旋（道理极其相似）。我们现在站在父节点的角度来看这次旋转。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">            (1)            /|<span class="token function selector">\</span>           / | <span class="token function selector">\</span>          /  |  <span class="token function selector">\</span>         /   |   <span class="token function selector">\</span>        /    |    <span class="token function selector">\</span>      (2)    |   (3)      /|<span class="token function selector">\ </span>   |    |     / | <span class="token function selector">\ </span>  |    |    /  |  <span class="token function selector">\ </span> |    |    (4)  | (5) |    |  /|<span class="token function selector">\ </span> |  |  |    |(6)|(7)|  |  |    |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们现在以 $1$ 的角度看这次旋转。旋转的方向不变，还是向右。但是表达不同（思路一样，为方便理解才有了前面的节点 $2$ 的视角）。</p><p>先定义一个新变量保存 $1$ 的左儿子 $2$ 节点，然后将 $2$ 的右儿子接到 $1$ 的左子树（相对位置不变），接着再将 $1$ 接到 $2$ 的右子树，换根根变成 $2$ 节点，旋转完成。<strong>先更新子节点 $1$ 的子树大小，在更新新根 $2$ 的子树大小</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">b_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左旋 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//存当前节点的右节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//右节点的左子树接到当前节点的右边 </span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//当前节点接到右节点的左边 </span>k<span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//右节点取代当前节点（换根） </span><span class="token function">u_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新的根的左子树（刚刚进行变动的部分） </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新根的信息（注意顺序，要先更新它的节点，才能获得最新信息） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右旋 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//存当前节点的左节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//左节点的右子树接到当前节点的左边 </span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//当前节点接到做节点的右边 </span>k<span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//左节点取代当前节点（换根） </span><span class="token function">u_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新的根的右子树（刚刚进行变动的部分） </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新根的信息（注意顺序，要先更新它的节点，才能获得最新信息） </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span>m_x<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//节点价值 </span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右儿子 </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//节点大小 </span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//相同节点数量</span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//随机优先值 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//新节点编号 </span><span class="token keyword">int</span> g_g<span class="token punctuation">;</span><span class="token comment">//根节点 </span>mt19937 <span class="token function">m_t</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机数种子 </span><span class="token keyword">int</span> <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//动态开点 </span>t_r<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//新节点的值 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取随机优先级 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化大小 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化相同节点数量 </span><span class="token keyword">return</span> x_p<span class="token punctuation">;</span><span class="token comment">//返回新节点编号（方便父节点存左右儿子） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点大小 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">;</span><span class="token comment">//节点子树大小是左右子树的和加上相同节点个数 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>g_g<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token operator">-</span>m_x<span class="token punctuation">)</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span>m_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化平衡树，放最大最小值 </span><span class="token function">u_p</span><span class="token punctuation">(</span>g_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点子树信息 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左旋 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//存当前节点的右节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//右节点的左子树接到当前节点的右边 </span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//当前节点接到右节点的左边 </span>k<span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//右节点取代当前节点（换根） </span><span class="token function">u_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新的根的左子树（刚刚进行变动的部分） </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新根的信息（注意顺序，要先更新它的节点，才能获得最新信息） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右旋 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//存当前节点的左节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//左节点的右子树接到当前节点的左边 </span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//当前节点接到做节点的右边 </span>k<span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//左节点取代当前节点（换根） </span><span class="token function">u_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新的根的右子树（刚刚进行变动的部分） </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新根的信息（注意顺序，要先更新它的节点，才能获得最新信息） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">n_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//加入新节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点不存在 </span>k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开点 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//权值相同，增加相同节点数 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//比当前节点小 </span><span class="token function">n_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token function">b_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果节点优先级更优（旋转） </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//比当前节点大 </span><span class="token function">n_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token function">b_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果节点优先级更优（旋转）</span><span class="token punctuation">}</span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">c_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//节点不存在，跳过 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//权值相同（找到目标节点） </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有多个 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//直接删 </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有子树 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&gt;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右子树不存在，或左子树比右子树优先级高 </span><span class="token function">b_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右旋 </span><span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//左子树不存在，或者左子树优先级低 </span><span class="token function">b_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左旋 </span><span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token punctuation">}</span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">else</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//没子树直接送走 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值小，向左搜 </span><span class="token keyword">else</span> <span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值大，向右搜 </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//查询 x 的排名 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//不存在是当前小的数 +1，那么排名就是第一 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//找到值，左子树的大小 +1 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值小 </span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token function">f_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值大 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_x</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//查询 x 排名的值 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> m_x<span class="token punctuation">;</span><span class="token comment">//不存在这么多数 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_x</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排名被左子树大小包含，一定在左子树 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//排名比左子树大，但是不大于左子树大小与当前节点的个数的和，排名包含于当前节点的数量中 </span><span class="token keyword">return</span> <span class="token function">f_x</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排名在右子树中找，先减去一定在排名前的数量 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_q</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找前驱 </span><span class="token keyword">int</span> k<span class="token operator">=</span>g_g<span class="token punctuation">;</span><span class="token comment">//从根节点搜 </span><span class="token keyword">int</span> x_q<span class="token punctuation">;</span><span class="token comment">//记录前驱（记录答案） </span><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点存在 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">&lt;</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前节点值比目标值小（可能是结果） </span>x_q<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//记录 </span>k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//前往右子树（结果可能更优） </span><span class="token punctuation">}</span><span class="token keyword">else</span> k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//比目标大或等于，前往左子树 </span><span class="token punctuation">}</span><span class="token keyword">return</span> x_q<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找后继 </span><span class="token keyword">int</span> k<span class="token operator">=</span>g_g<span class="token punctuation">;</span><span class="token comment">//从根节点搜 </span><span class="token keyword">int</span> x_h<span class="token punctuation">;</span><span class="token comment">//记录后继（记录答案） </span><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前节点存在 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">&gt;</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前节点值比目标值大（可能是结果） </span>x_h<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//记录 </span>k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//前往左子树（结果可能更优） </span><span class="token punctuation">}</span><span class="token keyword">else</span> k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//比目标小或等于，前往右子树 </span><span class="token punctuation">}</span><span class="token keyword">return</span> x_h<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">b_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化平衡树 </span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">n_d</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">c_t</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f_p</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找排名（初始化时有一个最小值，要减去它的贡献） </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f_x</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找排名为 x 的值（初始化时有一个最小值，要算上它的贡献） </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f_q</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找前驱 </span><span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f_h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找后继 </span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="普通平衡树（数据加强）"><a href="#普通平衡树（数据加强）" class="headerlink" title="普通平衡树（数据加强）"></a>普通平衡树（数据加强）</h2><p><a href="https://www.luogu.com.cn/problem/P6136">P6136 【模板】普通平衡树（数据加强版）</a></p><p>大体思路并没有变，注意几个小细节即可。</p><ul><li><p>操作4：查询排名为 $x$ 的数（如果不存在，则认为是排名小于 $x$ 的最大数。保证 $x$ 不会超过当前数据结构中数的总数）。</p></li><li><p>本题强制在线，保证所有操作合法（操作 $2$ 保证存在至少一个 $x$，操作 $4,5,6$ 保证存在答案）。</p></li><li><p>我们记 $last$ 表示上一次 $3,4,5,6$ 操作的答案，则每次操作的 $x^, $<br>都要异或上 $last$ 才是真实的 $x$。初始 $last$ 为 $0$。</p></li><li><p>本题输入数据较大，请使用较快的读入方式。</p></li></ul><p>操作 $4$ 的处理很容易，如果找的值必当前值大，那么先记下当前值的贡献，取 <code>max</code>，如果最后没找到，那么返回极小值，这样回溯统计答案是不会有贡献，我们也找到额最大值。而如果小于等于，那么久不用取 <code>max</code>，因为答案必然存在。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">2e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">2e9</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//节点价值 </span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右儿子 </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//节点大小 </span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//相同节点数量</span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//随机优先值 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//新节点编号 </span><span class="token keyword">int</span> g_g<span class="token punctuation">;</span><span class="token comment">//根节点 </span><span class="token keyword">long</span> <span class="token keyword">long</span> l_t<span class="token punctuation">;</span><span class="token comment">//存上次操作的答案（解密） </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">;</span><span class="token comment">//统计答案，异或和 </span>mt19937 <span class="token function">m_t</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机数种子 </span><span class="token keyword">int</span> <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//动态开点 </span>t_r<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//新节点的值 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取随机优先级 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化大小 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化相同节点数量 </span><span class="token keyword">return</span> x_p<span class="token punctuation">;</span><span class="token comment">//返回新节点编号（方便父节点存左右儿子） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点大小 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">;</span><span class="token comment">//节点子树大小是左右子树的和加上相同节点个数 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>g_g<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token operator">-</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化平衡树，放最大最小值 </span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">u_p</span><span class="token punctuation">(</span>g_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点子树信息 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左旋 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//存当前节点的右节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//右节点的左子树接到当前节点的右边 </span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//当前节点接到右节点的左边 </span>k<span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//右节点取代当前节点（换根） </span><span class="token function">u_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新的根的左子树（刚刚进行变动的部分） </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新根的信息（注意顺序，要先更新它的节点，才能获得最新信息） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右旋 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//存当前节点的左节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//左节点的右子树接到当前节点的左边 </span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//当前节点接到做节点的右边 </span>k<span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//左节点取代当前节点（换根） </span><span class="token function">u_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新的根的右子树（刚刚进行变动的部分） </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新根的信息（注意顺序，要先更新它的节点，才能获得最新信息） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">n_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//加入新节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点不存在 </span>k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开点 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//权值相同，增加相同节点数 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//比当前节点小 </span><span class="token function">n_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token function">b_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果节点优先级更优（旋转） </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//比当前节点大 </span><span class="token function">n_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token function">b_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果节点优先级更优（旋转）</span><span class="token punctuation">}</span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">c_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//节点不存在，跳过 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//权值相同（找到目标节点） </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有多个 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//直接删 </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有子树 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&gt;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右子树不存在，或左子树比右子树优先级高 </span><span class="token function">b_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右旋 </span><span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//左子树不存在，或者左子树优先级低 </span><span class="token function">b_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左旋 </span><span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//没子树直接送走 </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值小，向左搜 </span><span class="token keyword">else</span> <span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值大，向右搜 </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//查询 x 的排名 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//不存在是当前小的数 +1，那么排名就是第一 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//找到值，左子树的大小 +1 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值小 </span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token function">f_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值大 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_x</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//查询 x 排名的值</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//找不到，不对答案做贡献 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_x</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排名被左子树大小包含，一定在左子树 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//排名比左子树大，但是不大于左子树大小与当前节点的个数的和，排名包含于当前节点的数量中 </span><span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span><span class="token function">f_x</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最大值，这样可以解决不存在的情况 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_q</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找前驱 </span><span class="token keyword">int</span> k<span class="token operator">=</span>g_g<span class="token punctuation">;</span><span class="token comment">//从根节点搜 </span><span class="token keyword">int</span> x_q<span class="token punctuation">;</span><span class="token comment">//记录前驱（记录答案） </span><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点存在 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">&lt;</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前节点值比目标值小（可能是结果） </span>x_q<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//记录 </span>k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//前往右子树（结果可能更优） </span><span class="token punctuation">}</span><span class="token keyword">else</span> k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//比目标大或等于，前往左子树 </span><span class="token punctuation">}</span><span class="token keyword">return</span> x_q<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找后继 </span><span class="token keyword">int</span> k<span class="token operator">=</span>g_g<span class="token punctuation">;</span><span class="token comment">//从根节点搜 </span><span class="token keyword">int</span> x_h<span class="token punctuation">;</span><span class="token comment">//记录后继（记录答案） </span><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前节点存在 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">&gt;</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前节点值比目标值大（可能是结果） </span>x_h<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//记录 </span>k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//前往左子树（结果可能更优） </span><span class="token punctuation">}</span><span class="token keyword">else</span> k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//比目标小或等于，前往右子树 </span><span class="token punctuation">}</span><span class="token keyword">return</span> x_h<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">b_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化平衡树 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//原序列插入树中 </span><span class="token keyword">int</span> v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">n_d</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入 </span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">n_d</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">c_t</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>l_t<span class="token operator">=</span><span class="token function">f_p</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>a_s<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//找排名（初始化时有一个最小值，要减去它的贡献） </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>l_t<span class="token operator">=</span><span class="token function">f_x</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a_s<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//找排名为 x 的值（初始化时有一个最小值，要算上它的贡献） </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>l_t<span class="token operator">=</span><span class="token function">f_q</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>a_s<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//找前驱 </span><span class="token keyword">else</span> l_t<span class="token operator">=</span><span class="token function">f_h</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>a_s<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//找后继 </span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文艺平衡树</title>
      <link href="/2021/09/20/wen-yi-ping-heng-shu/"/>
      <url>/2021/09/20/wen-yi-ping-heng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="文艺平衡树"><a href="#文艺平衡树" class="headerlink" title="文艺平衡树"></a>文艺平衡树</h2><p><a href="https://www.luogu.com.cn/problem/P3391">P3391 【模板】文艺平衡树</a></p><h3 id="数组变量名意义"><a href="#数组变量名意义" class="headerlink" title="数组变量名意义"></a>数组变量名意义</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组下标大小 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token comment">//父节点 </span><span class="token keyword">int</span> l_n<span class="token punctuation">;</span><span class="token comment">//懒标记 </span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右儿子 </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//子树大小 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_g<span class="token punctuation">;</span><span class="token comment">//根节点 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h3><p>和不同的平衡术不同点在于，它的表示变成区间。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">      (4)      / <span class="token function selector">\</span>     /   <span class="token function selector">\</span>    /     <span class="token function selector">\</span>  (2)     (6)  / <span class="token function selector">\ </span>    / <span class="token function selector">\</span>(1) (3) (5) (7)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一棵初始化的“平衡树”，它的初始化很线段树的每个区间处理很相似。首先找出根节点（一班选区间中间的数），然后它的左右子树的意义在于：代表一个区间。而<strong>将数中序遍历则是原序列</strong>。</p><p>$4$ 的左子树就代表 $[1,3]$，右子树代表 $[5,7]$。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//不在区间内，退出 </span>    <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>f<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>m_i<span class="token punctuation">;</span><span class="token comment">//符合平衡树特性，存储左右节点 </span><span class="token keyword">else</span> t_r<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>m_i<span class="token punctuation">;</span>    t_r<span class="token punctuation">[</span>m_i<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>f<span class="token punctuation">;</span><span class="token comment">//存父节点 </span>t_r<span class="token punctuation">[</span>m_i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化节点大小 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//子节点，不会再存在左右子树，退出 </span>    <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span><span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新当前节点 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>节点更新信息维护及节点子树大小即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//左右子树大小的和 +1 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>和平衡树的旋转方式相同，但由于我们要让一些节点有目的的向上转，所以要存父节点，和 <a href="https://wdsa001.github.io/2021/09/20/ping-heng-shu-ji-chu/">这里</a> 的思路相同，只是视角从父节点比变成了子节点（或孙节点）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">b_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左旋 </span><span class="token comment">//旋转（从根节点向上转） </span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>y<span class="token punctuation">;</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>y<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>z<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右旋 </span><span class="token comment">//旋转（从根节点向上转） </span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>y<span class="token punctuation">;</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>y<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>z<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区间翻转"><a href="#区间翻转" class="headerlink" title="区间翻转"></a>区间翻转</h3><p>首先，整棵树一定是按照中序遍历输出的（存的时候就是这个目的存的）。接着我们目前会的只有旋转。<strong>但是，单纯的旋转并不能改变中序遍历的输出顺序</strong>。和 <a href="https://wdsa001.github.io/2021/09/20/ping-heng-shu-ji-chu/">这里</a> 讲的“相对位置”（降维打击变成一维数组的节点左右的关系）的理解相同。</p><p>既然是区间翻转那么一定是要有“相对位置”改变的。是时候破坏“先对位置”！，我们<strong>将一个节点的左右子树交换</strong>，就可以破坏“相对位置”。<del>简单粗暴，行之有效</del>。</p><p>现在有了破坏的思路，那么要怎么做呢？</p><p>既然是区间翻转，树维护的就是区间，树的特性又是单调的（我们破坏的是值的单调性，但我们这棵树维护的是区间的单调性），那么我们又知道旋转不会破坏单调性，那么我们不难讲我们要旋转的区间放到一个子树中。如下：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">      (4)      / <span class="token function selector">\</span>     /   <span class="token function selector">\</span>    /     <span class="token function selector">\</span>  (2)     (6)  / <span class="token function selector">\ </span>    / <span class="token function selector">\</span>(1) (3) (5) (7)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们要翻转 $[3,6]$。进行如下处理，将 $[3,6]$ 放到一个子树中。为了方便描述子树坐标，我们将 $2$ 转到根节点，$7$ 为 $2$ 的右节点，更具树的性质（单调性），$[3,6]$ 会变成 $7$ 的左子树。</p><p>先处理 $2$：</p><p>右旋：<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    (2)    / <span class="token function selector">\</span>   /   <span class="token function selector">\</span>  /     <span class="token function selector">\</span>(1)     (4)        / <span class="token function selector">\</span>      (3) (6)          / <span class="token function selector">\</span>        (5) (7)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>$2$ 到达目标地点。</p><p>再处理 $7$：</p><p>左旋：<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    (2)    / <span class="token function selector">\</span>   /   <span class="token function selector">\</span>  /     <span class="token function selector">\</span>(1)     (4)        / <span class="token function selector">\</span>      (3) (7)          /         (6)         /      (5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>左旋：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    (2)    / <span class="token function selector">\</span>   /   <span class="token function selector">\</span>  /     <span class="token function selector">\</span>(1)     (7)        /       (4)       / <span class="token function selector">\ </span>      (3) (6)         /      (5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$7$ 到达目标地点。</p><p>现在我们可以将 $4$ 打上懒标记，这个懒标记是需要交换左右<strong>子树</strong>的懒标记。每次访问到这个点，需要释放并下传。为方便理解，我们释放所有懒标记。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    (2)    / <span class="token function selector">\</span>   /   <span class="token function selector">\</span>  /     <span class="token function selector">\</span>(1)     (7)        /       (4)       / <span class="token function selector">\ </span>      (6) (3)       <span class="token function selector">\ </span>      (5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中序遍历：$1,2,6,5,4,3,7$。问题解决。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">x_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//没有到达预期位置 </span>        <span class="token keyword">int</span> y<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//原点的父节点 </span><span class="token keyword">int</span> z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//原节点的父节点的父节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//父节点也没有到达预期 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">l_r</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一条链（都是左儿子或右儿子） </span>            <span class="token keyword">else</span> <span class="token function">l_r</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不是一条链 </span>        <span class="token punctuation">}</span>        <span class="token function">l_r</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//父节点到达预期，只用再旋转一次即可到达目的 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将目标区间转移到一个子树，遍历整棵子树可以直接放心的打标记，不会影响到其他数据。</p><p><strong>注意：我们每回要找 $l-1$ 和 $r+1$，但加入有一棵 $7$ 节点的树。翻转正好是 $[1,7]$，就会出问题。所以我们在一开始时手动加入两个点，$1$，$r+2$，而原区间变为 $[l+1,r+1]$，就可以解决这个问题。</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组下标大小 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token comment">//父节点 </span><span class="token keyword">int</span> l_n<span class="token punctuation">;</span><span class="token comment">//懒标记 </span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右儿子 </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//子树大小 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_g<span class="token punctuation">;</span><span class="token comment">//根节点 </span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//左右子树大小的和 +1 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//释放懒标记 </span>        <span class="token function">swap</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换左右子树 </span>        t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//懒标记下传 </span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清空懒标记 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左旋 </span><span class="token comment">//旋转（从根节点向上转） </span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>y<span class="token punctuation">;</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>y<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>z<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右旋 </span><span class="token comment">//旋转（从根节点向上转） </span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>y<span class="token punctuation">;</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>y<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>z<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">l_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> y<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//原点父节点 </span><span class="token keyword">int</span> z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//原点的父节点的父节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span>k<span class="token punctuation">)</span>k<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//父节点即目标状态 </span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//爷节点即目标状态 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>y<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//都是左儿子 </span><span class="token keyword">else</span> t_r<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//都是右儿子 </span><span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token function">b_r</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右旋 </span><span class="token keyword">else</span> <span class="token function">b_l</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左旋 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">x_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//没有到达预期位置 </span>        <span class="token keyword">int</span> y<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//原点的父节点 </span><span class="token keyword">int</span> z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//原节点的父节点的父节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//父节点也没有到达预期 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">l_r</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一条链（都是左儿子或右儿子） </span>            <span class="token keyword">else</span> <span class="token function">l_r</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不是一条链 </span>        <span class="token punctuation">}</span>        <span class="token function">l_r</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//父节点到达预期，只用再旋转一次即可到达目的 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//不在区间内，退出 </span>    <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>f<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>m_i<span class="token punctuation">;</span><span class="token comment">//符合平衡树特性，存储左右节点 </span><span class="token keyword">else</span> t_r<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>m_i<span class="token punctuation">;</span>    t_r<span class="token punctuation">[</span>m_i<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>f<span class="token punctuation">;</span><span class="token comment">//存父节点 </span>t_r<span class="token punctuation">[</span>m_i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化节点大小 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//子节点，不会再存在左右子树，退出 </span>    <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span><span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新当前节点 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">p_d</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span><span class="token keyword">int</span> s<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">;</span><span class="token comment">//左子树大小 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token comment">//左子树大小 +1 即本点的排名 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span>s<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">g_a</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//被左子树包含 </span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">g_a</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token operator">-</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//被右子树包含 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">x_z</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">g_a</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在树上找到 x 的坐标 </span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token function">g_a</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再树上找到 y 的坐标 </span>    <span class="token function">x_t</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>g_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 x 换到根节点 </span><span class="token function">x_t</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 y 换到根节点右儿子节点 </span><span class="token keyword">int</span> z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//打懒标记 </span>    t_r<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    g_g<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//定义根 </span><span class="token function">b_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>g_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树（初始化） </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">x_z</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//旋转区间 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span><span class="token function">g_a</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出每个数 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2021/09/18/shu-zhuang-shu-zu/"/>
      <url>/2021/09/18/shu-zhuang-shu-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><p>树状数组将数组分成树状结构存储信息，与线段树相似。代码短，但实现有局限性，功能较为单一。</p><p>树状数组将一些数组存区间和，一个例子如下：</p><p>维护如下序列：$1,2,3,1,6,2,5,1$。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">&lt;---------21----------&gt;&lt;----7----&gt;           |   &lt;-3-&gt;     | &lt;-8-&gt;     | &lt;1&gt; | &lt;3&gt; | &lt;6&gt; | &lt;5&gt; |  1  2  3  1  6  2  5  1 1  2  3  4  5  6  7  8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>树状数组：在保证数据不丢失的情况下，尽量多的存储信息。</p><p>这样我们可以向线段树的区间查询一样，直接查询区间和。例如查询 $[3,5]$ 的区间和，那么可以 $[1,5]-[1,2]=[1,4]+[5,5]-[1,2]$。而我们的区间查询复杂度为 $O(\log_n)$ ，即使一次询问要两次查询也很快。 </p><p>维护区间信息，不难发现如果更新一个值，那么要更新所有覆盖这个数的区间的值（和线段树的节点更新一个道理）</p><h3 id="区间处理"><a href="#区间处理" class="headerlink" title="区间处理"></a>区间处理</h3><p>关于下标的二进制关系图如下：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">                           1000            100              |    010      |      110      |001  |  011  |  101  |  111  | 1   2   3   4   5   6   7   8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到二进制化的下标后，不难发现区间和存的数是<strong>所有当前位 $1$ 出现前的情况</strong>。例如 $4(100)$ 包含 $001,010,011$ 第三位（从左向右数） $1$ 出现前所有可能的三种情况，</p><p>同样，由于 $5$ 的第三位是 $1$，所以它不会存 $4$ 下标的值。在询问时也要分找区间加和，例如求 $[1,5]=[1,4]+[5,5]$ （ 这里的区间是为了好理解，在树状数组中可以直接 $[4]+[5]$ 即可）。</p><h3 id="上传，下放实现"><a href="#上传，下放实现" class="headerlink" title="上传，下放实现"></a>上传，下放实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">l_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快速上下访问（二进制） </span>  <span class="token keyword">return</span> k<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么，为什么这么写？</p><p>首先一个数的补码是这个数的负数的二进制数。（补码是反码 $+1$，反码是原码（二进制）所有位的取反 $1$-&gt;$0$，$0$-&gt;$1$）</p><p>我们以 $8$ 二进制数来举例。</p><p>$5$：$00000101$</p><p>$-5$：$11111011$</p><p>当 $5\&amp;-5$ 时，我们的找到了 $00000001$，将 $5$ 减去它。</p><script type="math/tex; mode=display">00000100_{(2)}=4_{(10)}</script><p>$4$：$00000100$</p><p>$-4$：$11111100$</p><p>当 $4\&amp;-4$ 时，我们的找到了 $00000100$，将 $4$ 减去它。</p><script type="math/tex; mode=display">00000000_{(2)}=0_{(10)}</script><p>这正好是我们需要查询的区间！为什么呢？</p><script type="math/tex; mode=display">5=100_{(2)}+1_{(2)}</script><p>我们先查的是区间 $[5,5]$ 然后减去 $1$，后查询的是 </p><script type="math/tex; mode=display">100_{(2)}=4_{(10)}</script><p>即 $[1,4]$，统计即可。</p><p>我们从概念出发：</p><p>补码是原码的反码 $+1$。反码是原码每位取反，如果这一位是 $1$，那么现在它是 $0$，我们给它 $+1$，可以更具它二进制特性，直接填好从右向左的第一个 $0$，而填的这个 $0$，正是原码中从右向左的第一个 $1$，我们已经知道这个 $1$ 之前的所有情况已经存储，我们直接拿来用即可，然后将这个 $1$ 拿去，前面的 $1$ 的情况也已经存过，直接加和，这样每次询问相当于求了这个数中有多少个 $1$ 的次数。</p><p>而修改数值（上传）也是一个道理，可以感性理解为不断左移最低位的 $1$，如果和原来位的 $1$ <strong>重合</strong>，那么直接进位即可。</p><h2 id="树状数组-1"><a href="#树状数组-1" class="headerlink" title="树状数组 1"></a>树状数组 1</h2><p><a href="https://www.luogu.com.cn/problem/P3374">P3374 【模板】树状数组 1</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//树状数组 </span><span class="token keyword">int</span> <span class="token function">l_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快速上下访问（二进制） </span>  <span class="token keyword">return</span> k<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//上传标记 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>k<span class="token punctuation">;</span><span class="token comment">//更新区间 </span>    x<span class="token operator">+=</span><span class="token function">l_b</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//向下求和 </span>  <span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    a_s<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//累计结果 </span>    k<span class="token operator">-=</span><span class="token function">l_b</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原始序列值 </span>    <span class="token function">b_t</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树（更新区间信息） </span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//操作 </span>    <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">b_t</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新区间（单点修改） </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token function">g_a</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">g_a</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间和 </span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树状数组-2"><a href="#树状数组-2" class="headerlink" title="树状数组 2"></a>树状数组 2</h2><p><a href="https://www.luogu.com.cn/problem/P3368">P3368 【模板】树状数组 2</a></p><p>将区间加变成标记打在树状数组上，区间和变成了打标记的方法，查询向上查，存值向下找。区间存值时，区间的覆盖范围，就是这个区间增的值，但是由于树状数组的区间范围比较死板，所以如果覆盖的超过需求要在往下找，打一个相反数的标记，这样查询的时候，一正一反，直接抵消。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">l_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> k<span class="token operator">&amp;</span><span class="token operator">-</span>k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//[1,r] 加标记 </span>    t_r<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span>    r<span class="token operator">-=</span><span class="token function">l_b</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  l<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//[1,l-1] 减去多打的标记 </span>    t_r<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">-=</span>v<span class="token punctuation">;</span>    l<span class="token operator">-=</span><span class="token function">l_b</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a_k<span class="token operator">=</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储原序列中的值 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//累计本数上的所有标记 </span>    a_s<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    k<span class="token operator">+=</span><span class="token function">l_b</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>a_k<span class="token operator">+</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标记加值为答案 </span>  <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储原序列 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">a_d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间标记 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token function">g_a</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找答案 </span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>个人感觉树状数组比较单一，不因为树状数组不学线段树。虽然代码短，但其他方面线段树更加灵活，思路难度相似。</strong></p><p><a href="https://wdsa001.github.io/2021/09/16/xian-duan-shu/">线段树学习</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树合并&amp;分裂</title>
      <link href="/2021/09/17/xian-duan-shu-he-bing-fen-lie/"/>
      <url>/2021/09/17/xian-duan-shu-he-bing-fen-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="线段树合并"><a href="#线段树合并" class="headerlink" title="线段树合并"></a>线段树合并</h2><ul><li>数据结构</li><li>最近公共祖先</li><li>倍增</li><li>线段树</li></ul><p><a href="https://www.luogu.com.cn/problem/P4556">P4556  Vani有约会 雨天的尾巴 /【模板】线段树合并</a></p><h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><ul><li>连边</li><li>倍增（求LCA）（存深度）</li><li>存救济粮发放信息（打懒标记）</li><li>遍历基础信息</li><li>动态开点</li><li>合并线段树</li><li>记录结果</li><li>输出</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v<span class="token punctuation">;</span>  <span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存边 </span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">;</span><span class="token keyword">int</span> f_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存父节点（倍增） </span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存点的深度 </span><span class="token keyword">int</span> a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储答案 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i_d<span class="token punctuation">,</span>n_m<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> po <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span><span class="token comment">//这里必须是小于号，max 默认的判断小于。</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n_m<span class="token operator">==</span>a<span class="token punctuation">.</span>n_m<span class="token punctuation">)</span><span class="token operator">?</span>i_d<span class="token operator">&gt;</span>a<span class="token punctuation">.</span>i_d<span class="token operator">:</span>n_m<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>n_m<span class="token punctuation">;</span><span class="token comment">//如果数量一样，返回标号小的 </span>  <span class="token punctuation">}</span>    po <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> po <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">{</span>i_d<span class="token punctuation">,</span>n_m<span class="token operator">+</span>a<span class="token punctuation">.</span>n_m<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//数量累计 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span><span class="token number">40</span><span class="token operator">*</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>po<span class="token operator">&gt;</span>l_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//线段树懒标记 </span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建边 </span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">40</span><span class="token operator">*</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//节点左右儿子 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//节点赋新编号 </span><span class="token keyword">void</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>po k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//动态开点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是叶子  </span>    t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token operator">+</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//合并，注意这里的加法顺序不能颠倒 </span>    <span class="token comment">//不能写成 t_r[p]+k，由于重载运算符，我们取的是前者的 id（救济粮编号） </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>i_d<span class="token operator">&lt;=</span>m_i<span class="token punctuation">)</span><span class="token punctuation">{</span>      s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">++</span>s_m<span class="token punctuation">;</span><span class="token comment">//左儿子已有编号，继续用；没有编号，赋新编号 </span>    <span class="token function">g_a</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续遍历 </span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">?</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">++</span>s_m<span class="token punctuation">;</span><span class="token comment">//右儿子已有编号，继续用；没有编号，赋新编号 </span>      <span class="token function">g_a</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续遍历 </span>  <span class="token punctuation">}</span>  t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求左右儿子最大值（同时更新了编号） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_g</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是叶子</span>    t_r<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">+</span>t_r<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//合并 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//将 b 并到 a 中 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">b_g</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左儿子都存在，开始合并 </span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a 没有左儿子 </span>  <span class="token comment">//b 若没有儿子不用操作</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">b_g</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右儿子都存在，开始合并 </span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a 没有右儿子 </span>  <span class="token comment">//b 若没有儿子不用操作</span>    t_r<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储最大值（同时更新了编号） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//倍增求 LCA </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>f_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>f_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f_a<span class="token punctuation">[</span>f_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>f_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//处理深度 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">!=</span>f_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      f_a<span class="token punctuation">[</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>      <span class="token function">d_1</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续遍历 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">l_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找公共祖先 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">&lt;</span>d_p<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token operator">=</span>d_p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">-</span>d_p<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>d<span class="token punctuation">;</span>d<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//两者深度相同 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>u<span class="token operator">=</span>f_a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//二进制判断（将差的值分解成二进制判断） </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">==</span>v<span class="token punctuation">)</span><span class="token keyword">return</span> u<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//跳公共祖先 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f_a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>f_a<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      u<span class="token operator">=</span>f_a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      v<span class="token operator">=</span>f_a<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> f_a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//返回公共祖先 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//合并线段树 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">!=</span>f_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">d_2</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按顺序合并线段树（类似于拓扑序的合并，不会因为合并的顺序互相影响结果） </span>      <span class="token function">b_g</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并线段树 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>po<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>it<span class="token punctuation">)</span>    <span class="token function">g_a</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1e5</span><span class="token punctuation">,</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span>    a_s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">;</span><span class="token comment">//存储结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s_m<span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//连边，建图 </span>    u<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理 LCA </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>z<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        u<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        z<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入救济粮发放 </span>    <span class="token keyword">int</span> g_f<span class="token operator">=</span><span class="token function">l_a</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取两者公共祖先 </span>        l_n<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">{</span>z<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在叶节点打标记（前缀和求法） </span>    l_n<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">{</span>z<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打标记 </span>        l_n<span class="token punctuation">[</span>g_f<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">{</span>z<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标记结束（这个点还有 1 的权值，所以要保留 1 的值） </span>    l_n<span class="token punctuation">[</span>f_a<span class="token punctuation">[</span>g_f<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">{</span>z<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标记彻底结束 </span>    <span class="token punctuation">}</span>  <span class="token function">d_2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//线段树合并 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线段树分裂"><a href="#线段树分裂" class="headerlink" title="线段树分裂"></a>线段树分裂</h2><ul><li>数据结构</li><li>平衡树</li><li>线段树</li></ul><p><a href="https://www.luogu.com.cn/problem/P5494">P5494 【模板】线段树分裂</a></p><h3 id="整体思路-1"><a href="#整体思路-1" class="headerlink" title="整体思路"></a>整体思路</h3><ul><li>实现动态开点</li><li>建树（根节点为 1）</li><li>实现操作一：分裂（开点）</li><li>实现操作二：合并（合并，删点）</li><li>实现废点回收（再利用）</li><li>实现操作三：插入（叶子结点加权）</li><li>实现操作四：查找区间数的个数（线段树区间和）</li><li>实现操作五：根据排名找原数（Splay）</li></ul><h4 id="各变量意义"><a href="#各变量意义" class="headerlink" title="各变量意义"></a>各变量意义</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">6e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组大小 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token comment">//序列长度，操作次数 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//线段树节点左右边界 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token punctuation">;</span><span class="token comment">//区间和 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//所有节点个个数（包括垃圾桶中的点） </span><span class="token keyword">int</span> s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//垃圾桶中可用的点 </span><span class="token keyword">int</span> r_s<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//节点垃圾桶 </span><span class="token keyword">int</span> r_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录每个序列的线段树根节点 </span><span class="token keyword">int</span> x_t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//新可重集序号 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原序列 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现动态开点-amp-废点回收（再利用）"><a href="#实现动态开点-amp-废点回收（再利用）" class="headerlink" title="实现动态开点&amp;废点回收（再利用）"></a>实现动态开点&amp;废点回收（再利用）</h4><p>动态开点用来即时给新节点赋予编号。由于本题空间范围较紧迫，要进行废点的回收利用。</p><p>我们要再开一个数组专门用废弃的点，要新时的时，先不开新点，先废物利用。（新开一个记录废点的数组要比直接开两个存点数组优的多）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删除节点 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清空数据 </span>  r_s<span class="token punctuation">[</span><span class="token operator">++</span>s_m<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//放入垃圾桶 </span>  k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//节点编号清空 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//赋新节点编号 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>s_m<span class="token punctuation">)</span><span class="token keyword">return</span> r_s<span class="token punctuation">[</span>s_m<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//垃圾桶中有可用的，先回收利用 </span>  <span class="token keyword">return</span> <span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//造新点 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h4><p>线段树基础操作。（需要复习的可以看<a href="https://wdsa001.github.io/2021/09/16/xian-duan-shu/">这里</a>）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点信息 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不存在节点，赋予编号 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//叶节点赋值 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现操作一：分裂"><a href="#实现操作一：分裂" class="headerlink" title="实现操作一：分裂"></a>实现操作一：分裂</h4><p>分裂的主要思路在于动态开点和值的转移（将原值附在新树上同时<strong>清空</strong>原点（不是删除））。</p><p><strong>注意更新被分裂的线段树节点的值！</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">n_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_2<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建新树，分裂 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>x<span class="token operator">||</span>y<span class="token operator">&lt;</span>l<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//不在范围内，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_1<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//树不存在，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在范围内 </span>    t_2<span class="token operator">=</span>t_1<span class="token punctuation">;</span><span class="token comment">//节点赋值 </span>    t_1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//原节点清空 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_2<span class="token punctuation">)</span>t_2<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点不存在，建新点 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">n_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树分裂 </span>  <span class="token function">n_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树分裂 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>t_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>t_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现操作二：合并"><a href="#实现操作二：合并" class="headerlink" title="实现操作二：合并"></a>实现操作二：合并</h4><p>合并的思路与分裂的思路很像但区别在于，节点要删除。原因在于题干：（数据保证在此后的操作中不会出现可重集 $t$）。</p><p>所以，这些空出来的节点就可以直接回收了。<strong>不仅要删叶节点，要删所有的节点</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">b_g</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_2<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//线段树合并 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_1<span class="token operator">||</span><span class="token operator">!</span>t_2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有一棵不存在 </span>    t_1<span class="token operator">+=</span>t_2<span class="token punctuation">;</span><span class="token comment">//直接赋值 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是叶节点，合并 </span>    t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span>    <span class="token function">d_l</span><span class="token punctuation">(</span>t_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删掉被合并的节点（叶子结点） </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_g</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树合并 </span>  <span class="token function">b_g</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树合并 </span>  <span class="token function">d_l</span><span class="token punctuation">(</span>t_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删掉被合并的节点（区间节点） </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>t_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现操作三：插入"><a href="#实现操作三：插入" class="headerlink" title="实现操作三：插入"></a>实现操作三：插入</h4><p>找到子叶编号为 $q$ 的叶子，将他的权值（或者说个数）加上 $x$ 即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> n_m<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n_m<span class="token operator">&lt;</span>l<span class="token operator">||</span>n_m<span class="token operator">&gt;</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//不在范围内返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点不存在，新建节点 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找到叶子结点 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//加权（增加数量） </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">a_d</span><span class="token punctuation">(</span>n_m<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树维护 </span>  <span class="token function">a_d</span><span class="token punctuation">(</span>n_m<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树维护 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现操作四：查找区间数的个数"><a href="#实现操作四：查找区间数的个数" class="headerlink" title="实现操作四：查找区间数的个数"></a>实现操作四：查找区间数的个数</h4><p>线段树区间和操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">s_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&lt;</span>l<span class="token operator">||</span>r<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//区间外，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//节点不存在，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//被范围包含，返回个数 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">s_a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">s_a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回左右子树符合要求的和（此节点的子树总贡献） </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现操作五：根据排名找原数"><a href="#实现操作五：根据排名找原数" class="headerlink" title="实现操作五：根据排名找原数"></a>实现操作五：根据排名找原数</h4><p>本操作用到了平衡树的思想，如果左区间的大小比 $k$ 大，那么排名为 $k$ 的值一定在其中，否则减去左子树的大小（左边的数排名一定比它小），跳到右子树继续找。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">f_k</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> p_k<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>p_k<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//未找到，直接返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token comment">//找到节点，返回值 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">&gt;=</span>p_k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_k</span><span class="token punctuation">(</span>p_k<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树的数量超过 k 的排名数，一定在左子树 </span>  <span class="token keyword">return</span> <span class="token function">f_k</span><span class="token punctuation">(</span>p_k<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//减去左子树的数的数量，在右子树继续找 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">6e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组大小 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token comment">//序列长度，操作次数 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//线段树节点左右边界 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token punctuation">;</span><span class="token comment">//区间和 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//所有节点个个数（包括垃圾桶中的点） </span><span class="token keyword">int</span> s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//垃圾桶中可用的点 </span><span class="token keyword">int</span> r_s<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//节点垃圾桶 </span><span class="token keyword">int</span> r_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录每个序列的线段树根节点 </span><span class="token keyword">int</span> x_t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//新可重集序号 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原序列 </span><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删除节点 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清空数据 </span>  r_s<span class="token punctuation">[</span><span class="token operator">++</span>s_m<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//放入垃圾桶 </span>  k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//节点编号清空 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//赋新节点编号 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>s_m<span class="token punctuation">)</span><span class="token keyword">return</span> r_s<span class="token punctuation">[</span>s_m<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//垃圾桶中有可用的，先回收利用 </span>  <span class="token keyword">return</span> <span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//造新点 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点信息 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不存在节点，赋予编号 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//叶节点赋值 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_g</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_2<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//线段树合并 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_1<span class="token operator">||</span><span class="token operator">!</span>t_2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有一棵不存在 </span>    t_1<span class="token operator">+=</span>t_2<span class="token punctuation">;</span><span class="token comment">//直接赋值 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是叶节点，合并 </span>    t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span>    <span class="token function">d_l</span><span class="token punctuation">(</span>t_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删掉被合并的节点（叶子结点） </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_g</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树合并 </span>  <span class="token function">b_g</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树合并 </span>  <span class="token function">d_l</span><span class="token punctuation">(</span>t_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删掉被合并的节点（区间节点） </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>t_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">n_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_2<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建新树，分裂 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>x<span class="token operator">||</span>y<span class="token operator">&lt;</span>l<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//不在范围内，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_1<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//树不存在，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在范围内 </span>    t_2<span class="token operator">=</span>t_1<span class="token punctuation">;</span><span class="token comment">//节点赋值 </span>    t_1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//原节点清空 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_2<span class="token punctuation">)</span>t_2<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点不存在，建新点 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">n_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树分裂 </span>  <span class="token function">n_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树分裂 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>t_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>t_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> n_m<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n_m<span class="token operator">&lt;</span>l<span class="token operator">||</span>n_m<span class="token operator">&gt;</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//不在范围内返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点不存在，新建节点 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找到叶子结点 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//加权（增加数量） </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">a_d</span><span class="token punctuation">(</span>n_m<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树维护 </span>  <span class="token function">a_d</span><span class="token punctuation">(</span>n_m<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树维护 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">s_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&lt;</span>l<span class="token operator">||</span>r<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//区间外，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//节点不存在，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//被范围包含，返回个数 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">s_a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">s_a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回左右子树符合要求的和（此节点的子树总贡献） </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_k</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> p_k<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>p_k<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//未找到，直接返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token comment">//找到节点，返回值 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">&gt;=</span>p_k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_k</span><span class="token punctuation">(</span>p_k<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树的数量超过 k 的排名数，一定在左子树 </span>  <span class="token keyword">return</span> <span class="token function">f_k</span><span class="token punctuation">(</span>p_k<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//减去左子树的数的数量，在右子树继续找 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入序列 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span>r_t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以 1 为根节点建树 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">n_t</span><span class="token punctuation">(</span>r_t<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>r_t<span class="token punctuation">[</span><span class="token operator">++</span>x_t<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建新树 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">b_g</span><span class="token punctuation">(</span>r_t<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>r_t<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并可重集 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">a_d</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>x<span class="token punctuation">,</span>r_t<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加数字 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">s_a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r_t<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询范围内数的个数 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">s_a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>r_t<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//总数不够 k 个，不存在第 k 小 </span>      <span class="token keyword">else</span> a_s<span class="token operator">=</span><span class="token function">f_k</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>r_t<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找第 k 小 </span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 最近公共祖先 </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2021/09/16/xian-duan-shu/"/>
      <url>/2021/09/16/xian-duan-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="线段树模板1（基础）"><a href="#线段树模板1（基础）" class="headerlink" title="线段树模板1（基础）"></a>线段树模板1（基础）</h2><p><a href="https://www.luogu.com.cn/problem/P3372">P3372 【模板】线段树 1</a></p><p>（上：编号，下：区间管辖范围）</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">             <span class="token punctuation">[</span>1<span class="token punctuation">]</span>            <span class="token punctuation">[</span>0~5<span class="token punctuation">]</span>             /<span class="token function selector">\</span>            /  <span class="token function selector">\</span>           /    <span class="token function selector">\</span>          /      <span class="token function selector">\</span>         /        <span class="token function selector">\</span>       <span class="token punctuation">[</span>2<span class="token punctuation">]</span>        <span class="token punctuation">[</span>3<span class="token punctuation">]</span>      <span class="token punctuation">[</span>0~3<span class="token punctuation">]</span>      <span class="token punctuation">[</span>4~5<span class="token punctuation">]</span>       /<span class="token function selector">\ </span>         /<span class="token function selector">\</span>      /  <span class="token function selector">\ </span>       /  <span class="token function selector">\ </span>          /    <span class="token function selector">\ </span>     /    <span class="token function selector">\</span>   <span class="token punctuation">[</span>4<span class="token punctuation">]</span>    <span class="token punctuation">[</span>5<span class="token punctuation">]</span>  <span class="token punctuation">[</span>6<span class="token punctuation">]</span>    <span class="token punctuation">[</span>7<span class="token punctuation">]</span>  <span class="token punctuation">[</span>0~1<span class="token punctuation">]</span>  <span class="token punctuation">[</span>2~3<span class="token punctuation">]</span> <span class="token punctuation">[</span>4<span class="token punctuation">]</span>    <span class="token punctuation">[</span>5<span class="token punctuation">]</span>   /<span class="token function selector">\ </span>     /<span class="token function selector">\ </span>   <span class="token function selector">\ </span>     <span class="token function selector">\</span> <span class="token punctuation">[</span>8<span class="token punctuation">]</span><span class="token punctuation">[</span>9<span class="token punctuation">]</span> <span class="token punctuation">[</span>10<span class="token punctuation">]</span><span class="token punctuation">[</span>11<span class="token punctuation">]</span> <span class="token punctuation">[</span>12<span class="token punctuation">]</span>   <span class="token punctuation">[</span>13<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>  <span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span>  <span class="token punctuation">[</span>3<span class="token punctuation">]</span>  <span class="token punctuation">[</span>4<span class="token punctuation">]</span>    <span class="token punctuation">[</span>5<span class="token punctuation">]</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不断二分查找支持懒标记的树状结构。</p><h3 id="左儿子"><a href="#左儿子" class="headerlink" title="左儿子"></a>左儿子</h3><p>位运算提速。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="右儿子"><a href="#右儿子" class="headerlink" title="右儿子"></a>右儿子</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="树的存储"><a href="#树的存储" class="headerlink" title="树的存储"></a>树的存储</h3><p>将序列存储成树状结构。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//若到达叶节点 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储a数组的值</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建子树 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//更新信息 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="懒标记"><a href="#懒标记" class="headerlink" title="懒标记"></a>懒标记</h3><p>快捷存储状态，在访问时，在将要访问的点同时更新（懒标记下传）。这样原本要更新 $10$ 次，但是现在，在访问前只需更新 $1$ 次即可（要更新的数是原来要更新累计的）。</p><p>在扫区间时，只要区间在要更新范围内，在区间上打懒标记。这样在询问前将区间懒标记释放即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在要求范围内 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>v<span class="token punctuation">;</span><span class="token comment">//更新区间</span>    l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//懒标记 </span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新懒标记 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历左右子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新当前节点 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在子节点遍历完时，回溯到区间时。要更新区间，区间存的是区间和，区间内节点值被更新，区间值也要更新。</p><h3 id="区间修改（加值）"><a href="#区间修改（加值）" class="headerlink" title="区间修改（加值）"></a>区间修改（加值）</h3><p>遍历区间在要更新的区间内，将此区间打上懒标记并更新，继续分左右子树遍历即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在要求范围内 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>v<span class="token punctuation">;</span>    l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//懒标记 </span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新懒标记 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历左右子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="懒标记释放"><a href="#懒标记释放" class="headerlink" title="懒标记释放"></a>懒标记释放</h3><p>当前节点只用更新区间的左右子树的值和懒标记，遍历完这个点后，直接遍历左右子树就可以保证懒标记传递完整。回溯时，也要及时更新区间维护的值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新懒标记 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  l_n<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//懒标记下传 </span>  l_n<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>m_i<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新子树 </span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span>  l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清空懒标记 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>与区间修改相似，注意在查询前先释放懒标记。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">s_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//求区间和 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//在区间范围内，返回区间和 </span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span>a_s<span class="token operator">+=</span><span class="token function">s_m</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找左右子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span>a_s<span class="token operator">+=</span><span class="token function">s_m</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组空间 </span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原序列 </span><span class="token keyword">long</span> <span class="token keyword">long</span> t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//线段树 </span><span class="token keyword">long</span> <span class="token keyword">long</span> l_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//懒标记 </span><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新当前节点 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//叶节点，赋值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建子树 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新懒标记 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  l_n<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//懒标记下传 </span>  l_n<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>m_i<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新子树 </span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span>  l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清空懒标记 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在要求范围内 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>v<span class="token punctuation">;</span>    l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//懒标记 </span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新懒标记 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历左右子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">s_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//求区间和 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//在区间范围内，返回区间和 </span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span>a_s<span class="token operator">+=</span><span class="token function">s_m</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找左右子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span>a_s<span class="token operator">+=</span><span class="token function">s_m</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原序列 </span>    <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//区间求和 </span>      <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">s_m</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线段树模板2（深度认知）"><a href="#线段树模板2（深度认知）" class="headerlink" title="线段树模板2（深度认知）"></a>线段树模板2（深度认知）</h2><p><a href="https://www.luogu.com.cn/problem/P3373">P3373 【模板】线段树 2</a></p><p>比上一道题多一个区间乘操作，注意符号运算有优先级。</p><p>$(a+b)\times c=a\times c+b\times c$。</p><p>$($ 加法懒标记 $+$ 值 $)\times $ 乘法懒标记 $=$ 加法懒标记 $\times$ 乘法懒标记 $+$ 值 $\times$ 乘法懒标记</p><p><strong>即时取模</strong></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组空间 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span><span class="token comment">//节点值 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> c_h<span class="token punctuation">;</span><span class="token comment">//乘法懒标记 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_d<span class="token punctuation">;</span><span class="token comment">//加法懒标记 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新当前节点的值 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">+</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化，乘法懒标记（要设为 1，否则所有乘运算都是无用功） </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化，加法懒标记 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是节点，记录 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点变量 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//懒标记下穿（运算优先级，先乘再加）  </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//更新儿子数值 </span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//处理左儿子的值的乘法值增加 </span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">*</span><span class="token punctuation">(</span>m_i<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//处理左儿子的值的加法值增加</span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//处理右儿子的值的乘法值增加 </span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>m_i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//处理右儿子的值的加法值增加</span>    <span class="token comment">//更新儿子乘法懒标记 </span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新左儿子乘法懒标记（标记下传） </span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新右儿子乘法懒标记（标记下传） </span>    <span class="token comment">//更新儿子加法懒标记 </span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新左儿子加法懒标记经过乘法后的变化（标记下传） </span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新左儿子加法懒标记（标记下传） </span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新右儿子加法懒标记经过乘法后的变化（标记下传） </span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新左儿子加法懒标记（标记下传） </span>    <span class="token comment">//清空懒标记 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">c_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间修改——乘法 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新区间值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新乘法懒标记 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//乘法的优先运算比加法高，所以加法要加括号，把括号拆开，加法运算也要更新 </span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//懒标记下传 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span><span class="token function">c_h</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span><span class="token function">c_h</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回溯更新节点 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间修改——加法 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新加法懒标记 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">+</span>v<span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新值 </span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//懒标记下传 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回溯更新节点 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">s_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间查询 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//统计结果 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//在区间范围内，直接调用区间值 </span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span><span class="token function">s_m</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//向左查 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span><span class="token function">s_m</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//向右查 </span>  <span class="token keyword">return</span> a_s<span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取原序列 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">c_h</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间修改——乘法 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间修改——加法 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">s_m</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间求和 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线段树模板3（深刻理解）"><a href="#线段树模板3（深刻理解）" class="headerlink" title="线段树模板3（深刻理解）"></a>线段树模板3（深刻理解）</h2><p><a href="https://www.luogu.com.cn/problem/P6242">P6242 【模板】线段树 3</a></p><p>比前面的模板有特色地地方在于维护最大值，历史最大值，区间更新最小值。</p><p>主要难点在与最小值的维护。维护最小值我们需要四个信息：区间最大值，最大值个数，区间历史最大值，区间严格次大值。</p><p>这样在更新区间最小值时，会出现以下三种情况。</p><ul><li><p>更新值 $&gt;$ 区间最大值。（那么此时直接跳出，因为没有只需要更新）</p></li><li><p>更新值 $&lt;$ 区间最大值，但是 $&gt;$ 区间次大值，那么将现在的区间和减去最大值个数 $\times ($ 最大值 $-$ 区间要更新的最小值 $)$，即完成了维护，再更新区间最大值，更新为区间要更新的最小值。</p></li><li><p>更新值 $&lt;$ 区间次大值，那么继续向下搜。</p></li></ul><p>区间历史最大值虽然不用参与讨论，但是要时刻维护（操作 $5$）</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">3e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组大小 </span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">2e9</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//最大值 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//树的节点（覆盖区间） </span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//区间覆盖范围 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> m_x<span class="token punctuation">;</span><span class="token comment">//区间最大值 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x_p<span class="token punctuation">;</span><span class="token comment">//最大值个数 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> m_x_<span class="token punctuation">;</span><span class="token comment">//区间历史最大值 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> m_i_x<span class="token punctuation">;</span><span class="token comment">//区间严格次大值 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token punctuation">;</span><span class="token comment">//区间和 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a_d_1<span class="token punctuation">;</span><span class="token comment">//最大值区间加减标记 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_d_1_<span class="token punctuation">;</span><span class="token comment">//最大值历史区间最大加减标记 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_d_2<span class="token punctuation">;</span><span class="token comment">//非最大值区间加减标记 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_d_2_<span class="token punctuation">;</span><span class="token comment">//非最大值区间最大加减标记 </span>  <span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//线段树区间节点 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原序列 </span><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左子树 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右子树 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点信息 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//更新区间和 </span>    <span class="token comment">//更新区间历史最大值 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">==</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左右儿子最大值相同 </span>      <span class="token comment">//更新节点最大值</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">;</span>         <span class="token comment">//更新节点次大值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更新最大值数量 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token operator">+</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">&gt;</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左儿子最大值更大 </span>      <span class="token comment">//更新节点最大值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">;</span>        <span class="token comment">//更新节点次大值  </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更新最大值数量</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//右儿子最大值更大 </span>      <span class="token comment">//更新节点最大值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">;</span>        <span class="token comment">//更新节点次大值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更新节点最大值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//更新区间和标记 </span><span class="token comment">//k 当前节点坐标，k_1 最大值区间加减标记，k_1_ 最大值历史区间最大加减标记 </span><span class="token comment">//k_2 非最大值区间加减标记，k_2_ 非最大值区间最大加减标记 </span><span class="token keyword">void</span> <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> k_1<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> k_1_<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> k_2<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> k_2_<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//更新区间和 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>k_1<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token operator">+</span>k_2<span class="token operator">*</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">-</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//更新区间历史最大值 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">+</span>k_1_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//更新区间历史最大加减标记 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1_<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1<span class="token operator">+</span>k_1_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//更新区间最大值 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">+=</span>k_1<span class="token punctuation">;</span>    <span class="token comment">//更新区间最大加减标记 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1<span class="token operator">+=</span>k_1<span class="token punctuation">;</span>    <span class="token comment">//更新非最大值区间加减标记</span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token operator">+</span>k_2_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当前节点有次大值，更新次大值 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">!=</span><span class="token operator">-</span>m_a<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">+=</span>k_2<span class="token punctuation">;</span>    <span class="token comment">//更新非最大值区间最大加减标记</span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token operator">+=</span>k_2<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//下传懒标记 </span>    <span class="token comment">//记录儿子中的最大值 </span>  <span class="token keyword">int</span> m_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//左儿子最大值大，以最大值身份更新区间 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">==</span>m_s<span class="token punctuation">)</span>    <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//左儿子最大值小，以次大值身份更新区间 </span>  <span class="token keyword">else</span> <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//右儿子最大值大，以最大值身份更新区间 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">==</span>m_s<span class="token punctuation">)</span>    <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//右儿子最大值小，以次大值身份更新区间 </span>  <span class="token keyword">else</span> <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//清除标记 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1_<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>r<span class="token punctuation">;</span><span class="token comment">//初始化左右区间 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1_<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化区间加减标记 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是节点存储信息 </span>      t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储节点初始信息</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//最大值和历史最大值初始化 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">=</span><span class="token operator">-</span>m_a<span class="token punctuation">;</span><span class="token comment">//初始化区间严格次大值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化区间最大值个数 </span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>m_d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加减修改 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&gt;</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//区间不在询问范围内 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间被询问范围包含 </span>      <span class="token function">u_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>v<span class="token punctuation">,</span>v<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点值 </span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下传懒标记 </span>    <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">m_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间最小值修改 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&gt;</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l<span class="token operator">||</span>v<span class="token operator">&gt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//区间不在询问范围内</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>v<span class="token operator">&gt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间被询问范围包含</span>       <span class="token comment">//更新最大区间加减标记和历史最大标记，保证更新后不会超过更新最小值</span>    <span class="token comment">//若区间规定最小值比原值小，区间修改值变为负数，多了多少，就减多少 </span>    <span class="token function">u_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token operator">-</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">,</span>v<span class="token operator">-</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下传懒标记 </span>    <span class="token function">m_i</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token function">m_i</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">s_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//求区间和 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&gt;</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//不在范围内，不更新答案 </span>    <span class="token comment">//被范围包含，直接返回提前处理好的区间和 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span>    <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标记下传 </span>    a_s<span class="token operator">=</span><span class="token function">s_m</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">s_m</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//统计答案 </span>    <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回统计结果 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">a_x</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//求区间最大值 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&gt;</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span>m_a<span class="token punctuation">;</span><span class="token comment">//不在范围内，返回不更新答案的值 </span>    <span class="token comment">//被范围包含，直接返回提前处理好的区间和 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">;</span>    <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标记下传 </span>    a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">a_x</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">a_x</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最大值 </span>    <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回统计结果 </span>  <span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">b_x</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//求区间历史最大值 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&gt;</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span>m_a<span class="token punctuation">;</span><span class="token comment">//不在范围内，返回不更新答案的值 </span>    <span class="token comment">//被范围包含，直接返回提前处理好的区间和 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token punctuation">;</span>    <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标记下传 </span>    a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">b_x</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">b_x</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最大值 </span>    <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回统计结果 </span>  <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入序列 </span>    <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建图 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间加 </span>          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">m_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间最小值 </span>          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">s_m</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间和 </span>          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">a_x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间最大值 </span>          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">b_x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间历史最大值 </span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数位dp+状态压缩dp+数据结构优化的dp</title>
      <link href="/2021/09/14/shu-wei-dp-zhuang-tai-ya-suo-dp-shu-ju-jie-gou-you-hua-de-dp/"/>
      <url>/2021/09/14/shu-wei-dp-zhuang-tai-ya-suo-dp-shu-ju-jie-gou-you-hua-de-dp/</url>
      
        <content type="html"><![CDATA[<h2 id="数位DP"><a href="#数位DP" class="headerlink" title="数位DP"></a>数位DP</h2><h3 id="P4124-CQOI2016-手机号码"><a href="#P4124-CQOI2016-手机号码" class="headerlink" title="P4124 CQOI2016 手机号码"></a>P4124 CQOI2016 手机号码</h3><p><a href="https://www.luogu.com.cn/problem/P4124">P4124 CQOI2016 手机号码</a></p><p>从后向前每一位进行遍历，注意判断的结束，题目约束。这里用记忆化，代码短，跑得快。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>d_p<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s_t<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//k 当前位置，a 上位数，b 上上位数，b_b 是否出现三个连续数字，n_8 是否出现 8，n_4 是否出现 4，l_t 当前位置的数是否达到上限 </span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">bool</span> b_b<span class="token punctuation">,</span><span class="token keyword">bool</span> n_8<span class="token punctuation">,</span><span class="token keyword">bool</span> n_4<span class="token punctuation">,</span><span class="token keyword">bool</span> l_t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n_8<span class="token operator">&amp;&amp;</span>n_4<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//8 和 4 不能同时出现 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> b_b<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l_t<span class="token operator">&amp;&amp;</span>d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>b_b<span class="token punctuation">]</span><span class="token punctuation">[</span>n_8<span class="token punctuation">]</span><span class="token punctuation">[</span>n_4<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//不是最后一位并且比遍历过 </span>    <span class="token keyword">return</span> d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>b_b<span class="token punctuation">]</span><span class="token punctuation">[</span>n_8<span class="token punctuation">]</span><span class="token punctuation">[</span>n_4<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//直接返回记忆存的值 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化统计答案 </span>  <span class="token keyword">int</span> m_x<span class="token operator">=</span>l_t<span class="token operator">?</span>s_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token comment">//如果不最后一位，返回 9，否则返回原字符串中当前位置的值 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//范围内的数字都可取 </span>    a_s<span class="token operator">+=</span><span class="token function">d_f</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b_b<span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">==</span>a<span class="token operator">&amp;&amp;</span>i<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>n_8<span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n_4<span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l_t<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">==</span>m_x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向前为遍历，统计 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l_t<span class="token punctuation">)</span>d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>b_b<span class="token punctuation">]</span><span class="token punctuation">[</span>n_8<span class="token punctuation">]</span><span class="token punctuation">[</span>n_4<span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">;</span><span class="token comment">//不是最后一位，更新 </span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回统计值 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> l_n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//差分数 </span>    s_t<span class="token punctuation">[</span><span class="token operator">++</span>l_n<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>    x<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l_n<span class="token operator">!=</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//说明号码 11 为不是 11 位，直接返回 </span>  <span class="token function">memset</span><span class="token punctuation">(</span>d_p<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s_t<span class="token punctuation">[</span>l_n<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举最后一位 </span>    a_s<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token function">d_f</span><span class="token punctuation">(</span>l_n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">,</span>i<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">,</span>i<span class="token operator">==</span>s_t<span class="token punctuation">[</span>l_n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入区间 </span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">f_i</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">f_i</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到从头到右区间的所有情况减去左区间 -1 到头的所有情况 </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="花神的数论题"><a href="#花神的数论题" class="headerlink" title="花神的数论题"></a>花神的数论题</h3><p><a href="https://www.luogu.com.cn/problem/P4317">P4317 花神的数论题</a></p><p>遍历每一位，通过枚举 $sum$ 等于的数（在范围内），最后直接快速幂处理值统计即可。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>d_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>d_p<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>d_p<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">51</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>a_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">k_m</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快速幂 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_a<span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_a<span class="token punctuation">;</span>    b<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//k 当前第几位，u_p 是否为上界，t_p 天了几个 1，d 总共 1 的个数 </span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> u_p<span class="token punctuation">,</span><span class="token keyword">int</span> t_p<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> t_p<span class="token operator">==</span>d<span class="token punctuation">;</span><span class="token comment">//所有位都遍历过了 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>u_p<span class="token punctuation">]</span><span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//已经遍历过了 </span>    <span class="token keyword">return</span> d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>u_p<span class="token punctuation">]</span><span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> l_m<span class="token operator">=</span>u_p<span class="token operator">?</span>x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//是否为结束位，不是结束位，可以直接赋值为 1 （一定限制小） </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>l_m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    a_s<span class="token operator">+=</span><span class="token function">f_i</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>u_p<span class="token operator">&amp;&amp;</span>i<span class="token operator">==</span>l_m<span class="token punctuation">,</span>t_p<span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历下一位 </span>  d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>u_p<span class="token punctuation">]</span><span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">;</span>  <span class="token keyword">return</span> d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>u_p<span class="token punctuation">]</span><span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//原数改为二进制数 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>x<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> x<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    n<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>d_p<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>    a_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>x_p<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找 sum(n)=i 的有几个 </span>  <span class="token punctuation">}</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//累计答案 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    a_s<span class="token operator">=</span>a_s<span class="token operator">*</span><span class="token function">k_m</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>a_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_a<span class="token punctuation">;</span><span class="token comment">//sum(n)=1 的有 a_n[i] 个，直接相乘可以用快随幂处理 </span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">g_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="P5308-Quiz（斜率优化）"><a href="#P5308-Quiz（斜率优化）" class="headerlink" title="P5308 Quiz（斜率优化）"></a>P5308 Quiz（斜率优化）</h3><p><a href="https://www.luogu.com.cn/problem/P5308">P5308 COCI2019 Quiz</a></p><p>首先不考虑 $k$，设 $f_i$ 表示从后往前数某一轮还剩 $i$ 个人的最大奖金。<br>枚举这一轮的下一轮还剩多少人，中间少的就是淘汰的。</p><script type="math/tex; mode=display">f_{i}=\max_{0\le j < i}(f_{j}+\frac{i-j}{i})</script><p>假设对于决策 $0 \le k &lt; j &lt; i$，有 $j$ 优于 $k$。</p><p>$f_j+\frac{i-j}{i}&gt;f_k+\frac{i-k}{i}$</p><p>$f_j-f_k&gt;\frac{j-k}{i}$</p><p>$\frac{f_j-f_k}{j-k}&gt;\frac{1}{i}$</p><p>然后既然有了 $k$ 的限制，显然 $WQS$ 二分直接上。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>d_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>d_p<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>d_p<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">double</span> i_p<span class="token operator">=</span><span class="token number">1e-12</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>g<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>h_d<span class="token punctuation">,</span>t_l<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">double</span> f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>m_i<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">double</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//获得奖金 </span>    <span class="token keyword">return</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">g_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  h_d<span class="token operator">=</span>t_l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>    q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>h_d<span class="token operator">&lt;</span>t_l<span class="token operator">&amp;&amp;</span><span class="token function">g_f</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>h_d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>i_p<span class="token punctuation">)</span>h_d<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//能在忍受在范围内，决策更优 </span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">-</span>q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>i<span class="token operator">-</span>m_i<span class="token punctuation">;</span><span class="token comment">//更新答案 </span>    g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//需要的轮数 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>h_d<span class="token operator">&lt;</span>t_l<span class="token operator">&amp;&amp;</span><span class="token function">g_f</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>t_l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">g_f</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.0</span><span class="token operator">-</span>i_p<span class="token punctuation">)</span><span class="token operator">--</span>t_l<span class="token punctuation">;</span><span class="token comment">//回缩一位在可以忍受惹误差范围内，就回缩 </span>        q<span class="token punctuation">[</span><span class="token operator">++</span>t_l<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//加入当前位 </span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> g<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&gt;=</span>k<span class="token punctuation">;</span><span class="token comment">//是否在预定内</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1e6</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">g_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>l<span class="token operator">=</span>m_i<span class="token punctuation">;</span><span class="token comment">//不在预定范围内，缩短“战线” </span>        <span class="token keyword">else</span> r<span class="token operator">=</span>m_i<span class="token punctuation">;</span><span class="token comment">//仍然在，缩短确定范围 </span>    <span class="token punctuation">}</span>    m_i<span class="token operator">=</span>l<span class="token punctuation">;</span>  <span class="token function">g_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.9Lf\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">*</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="状压DP"><a href="#状压DP" class="headerlink" title="状压DP"></a>状压DP</h2><p>经常用二进制位存状态。</p><h3 id="吃奶酪"><a href="#吃奶酪" class="headerlink" title="吃奶酪"></a>吃奶酪</h3><p><a href="https://www.luogu.com.cn/problem/P1433">P1433 吃奶酪</a></p><p>注意二进制表示是否到过这个奶酪的状态。</p><p>例如：现在有 $7$ 个奶酪。</p><p>$(1000000)<em> 2 $ 表示已经走过了第一个奶酪，$(1001100)</em> 2$ 表示已经走过了 $1,4,5$ 这些城市。他只是快捷的记录了一种状态</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>d_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>d_p<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>d_p<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">double</span> x<span class="token punctuation">;</span>  <span class="token keyword">double</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> x<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">g_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//两点距离公式 </span>  <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>p_p<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>p_p<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">-</span>p_p<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">-</span>p_p<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入奶酪的坐标 </span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>s<span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>s<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举路径 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举当前到了哪个点 </span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//如果当前点，不再以经过的路径中，直接返回（不合法） </span>          <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前点是出发点 </span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举走过的地点，找最优解 </span>              <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//没走过这个点，不能自己判自己 </span>              f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">g_l</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果找到最小值比当前情况优，及时更新 </span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token keyword">double</span> a_s<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> s<span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">g_l</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//已经走过所有路径当前点到最后一个点的距离并统计从出发点到这个点的距离 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a_s<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>a_s<span class="token operator">&gt;</span>s<span class="token punctuation">)</span> a_s<span class="token operator">=</span>s<span class="token punctuation">;</span><span class="token comment">//找最小值 </span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="互不侵犯"><a href="#互不侵犯" class="headerlink" title="互不侵犯"></a>互不侵犯</h3><p><a href="https://www.luogu.com.cn/problem/P1896">P1896 SCOI2005 互不侵犯</a></p><p>枚举一行可能出现的所有状况，枚举两行之间所有可能出现的状况拼接，转移并记录。</p><p><strong>一定要尝试自己写过。</strong></p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">2001</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>x_p<span class="token punctuation">;</span><span class="token keyword">int</span> s_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>f_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> d_p<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> z_t<span class="token punctuation">,</span><span class="token keyword">int</span> s_m<span class="token punctuation">,</span><span class="token keyword">int</span> n_n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前格子状态，放的国王数，当前第几个格子</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n_n<span class="token operator">&gt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//记录当前情况的状态 </span>    s_t<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token operator">=</span>z_t<span class="token punctuation">;</span><span class="token comment">//记录当前行的国王放置状态 </span>    f_s<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token operator">=</span>s_m<span class="token punctuation">;</span><span class="token comment">//记录放的国王数 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">d_f</span><span class="token punctuation">(</span>z_t<span class="token punctuation">,</span>s_m<span class="token punctuation">,</span>n_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不用当前格子 </span>  <span class="token function">d_f</span><span class="token punctuation">(</span>z_t<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n_n<span class="token punctuation">)</span><span class="token punctuation">,</span>s_m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n_n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用当前格子，更新状态，更新数量，为了合法性，直接跳过下一个格子的讨论（只能不放） </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先处理一行的所有可能情况</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>d_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>f_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//将第一行的情况记录 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举本行所有的情况 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举上一行的所有情况 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举行之间不同的交错转态 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s_t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;</span>s_t<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//上下有重复的国王 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s_t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s_t<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//第一个状态所有国王位置左移，如果与第二个状态有位置相同的，说明不合法（第二个转态的右下角有一状态的国王） </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s_t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>s_t<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//第二个状态所有国王位置左移，如果与第一个状态有位置相同的，说明不合法（第二个转态的左下角有一状态的国王） </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token operator">=</span>k<span class="token punctuation">;</span>s<span class="token operator">&gt;=</span>f_s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//有继承当前状态的空间 </span>          d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+=</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">-</span>f_s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">+=</span>d_p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//统计所有需要情况（第 n 行，所有可能的国王放置情况，发一共放了 k 的情况数） </span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据结构优化的dp"><a href="#数据结构优化的dp" class="headerlink" title="数据结构优化的dp"></a>数据结构优化的dp</h2><h3 id="二进制优化"><a href="#二进制优化" class="headerlink" title="二进制优化"></a>二进制优化</h3><p>在多重背包问题中中尤为凸显。将完全背包转化为 $01$ 背包，大大提升效率，</p><p>在 <a href="https://wdsa001.github.io/2021/09/09/jian-dan-ji-chu-dong-tai-gui-hua-di-tui-ge-chong-bei-bao/#toc-heading-23">这里</a> 的《宝物筛选》一题中用到了二进制优化。</p><h3 id="单调队列优化"><a href="#单调队列优化" class="headerlink" title="单调队列优化"></a>单调队列优化</h3><h4 id="选择数字"><a href="#选择数字" class="headerlink" title="选择数字"></a>选择数字</h4><p><a href="https://www.luogu.com.cn/problem/P2034">P2034 选择数字</a></p><p>通过一个手写队列，维护区间最小值，找到最优解，统计即可。</p><h5 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token punctuation">,</span>x_x<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存下标，判断是否进入下一个区间 </span><span class="token keyword">long</span> <span class="token keyword">long</span> h_d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>t_l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//队列的首，尾 </span><span class="token keyword">long</span> <span class="token keyword">long</span> q<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//队列，存 </span><span class="token keyword">long</span> <span class="token keyword">long</span> f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前 i 个数被删除的数的最小和 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">;</span><span class="token comment">//答案输出 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有 n 个整数 </span>      x_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前值 </span>      s_m<span class="token operator">+=</span>x_x<span class="token punctuation">;</span><span class="token comment">//求所有数的和 </span>      f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1ll</span><span class="token operator">*</span>x_x<span class="token punctuation">;</span><span class="token comment">//上个最优的（删的值最小的）加上现在的值（假如删掉现在的值），更新 </span>      <span class="token keyword">while</span><span class="token punctuation">(</span>h_d<span class="token operator">&lt;=</span>t_l<span class="token operator">&amp;&amp;</span>q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token operator">&gt;=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>t_l<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//现在的方法更优，将不优的更新掉 </span>      q<span class="token punctuation">[</span><span class="token operator">++</span>t_l<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将新的产值存入队列 </span>      p<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//存入当前编号 </span>      <span class="token keyword">while</span><span class="token punctuation">(</span>h_d<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>p<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token operator">&lt;</span>i<span class="token operator">-</span>k<span class="token punctuation">)</span>h_d<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//超过这个区间，更新，进入下一个区间（范围 k） </span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span><span class="token number">1ll</span><span class="token operator">*</span>s_m<span class="token operator">-</span><span class="token number">1ll</span><span class="token operator">*</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用所有数的和，遍历最后一个区间，找最优值 </span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Power收集"><a href="#Power收集" class="headerlink" title="Power收集"></a>Power收集</h3><p><a href="https://www.luogu.com.cn/problem/P3800">P3800 Power收集</a></p><p>在区间内维护队列，更新最优值，及时判断是否出区间。注意队列存坐标与值两个信息。</p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">4e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">,</span>t<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入初始信息 </span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//第一维存比那里到哪一行，第二维记录列 </span><span class="token keyword">int</span> q_q<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//队列 1 存下标，0 存值 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//读入有价值得点的信息 </span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举每一行 </span>        <span class="token keyword">int</span> h_d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>t_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化队列头尾 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token function">min</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//每句移动位置，注意最多移动 T 格 </span>            <span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>h_d<span class="token operator">&lt;=</span>t_l<span class="token punctuation">)</span><span class="token operator">--</span>t_l<span class="token punctuation">;</span><span class="token comment">//有更优方案（值更大），更新 </span>            q_q<span class="token punctuation">[</span><span class="token operator">++</span>t_l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存入当前值 </span>            q_q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment">//保留坐标信息 </span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举列（进行移动的结果） </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">+</span>t<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//不越界</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>t<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>h_d<span class="token operator">&lt;=</span>t_l<span class="token punctuation">)</span><span class="token operator">--</span>t_l<span class="token punctuation">;</span><span class="token comment">//有更优方案（值更大），更新 </span>                q_q<span class="token punctuation">[</span><span class="token operator">++</span>t_l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//村入职 </span>                q_q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token operator">+</span>t<span class="token punctuation">;</span><span class="token comment">//保留坐标信息 </span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>j<span class="token operator">-</span>t<span class="token punctuation">)</span><span class="token operator">++</span>h_d<span class="token punctuation">;</span><span class="token comment">//判断是否进入到下一个区间 </span>            d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>q_q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新当前值，最大值加上这个点本身的值 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment">//最后一行，以每个点结尾的最大值 </span>        a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出最大值 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单基础动态规划（LIS+LCS+区间DP+树形DP）</title>
      <link href="/2021/09/12/jian-dan-ji-chu-dong-tai-gui-hua-lis-lcs-qu-jian-dp-shu-xing-dp/"/>
      <url>/2021/09/12/jian-dan-ji-chu-dong-tai-gui-hua-lis-lcs-qu-jian-dp-shu-xing-dp/</url>
      
        <content type="html"><![CDATA[<h2 id="LIS：最长上升子序列"><a href="#LIS：最长上升子序列" class="headerlink" title="LIS：最长上升子序列"></a>LIS：最长上升子序列</h2><h3 id="Prince-and-Princess"><a href="#Prince-and-Princess" class="headerlink" title="Prince and Princess"></a>Prince and Princess</h3><p><a href="https://www.luogu.com.cn/problem/UVA10635">UVA10635 Prince and Princess</a></p><p>本题可以将 $LCS$ （最长公共子序列）问题转换成 $LIS$ 问题。</p><p>我们可以根据第一个字符串进行新的编号，由先后顺序更新第二个字符串的编号，保证了单调的性，所以直接在第二个字符串中找最长不下降子序列即可。</p><h4 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h4><p>再找最长上升子序列时，只用找到比我们存的数小的，就更新。可能不符合真正的最长上升序列，甚至不合法。但是它合理的原因是，他为的是保存最长上升的长度，如果有更长的子序列合法，那么就可以更新它的长度。</p><p>要想更新它的长度就要比现有的数都大，那么这个数一定会出现在合理的最长上升子序列中，所以这么存的长度合法。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_m<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">,</span>s_m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">memset</span><span class="token punctuation">(</span>n_m<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>n_m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  x_p<span class="token operator">=</span>s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>n_m<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//第一个数列编新编号 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//第二个序列更新所有编号 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n_m<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span><span class="token operator">++</span>s_m<span class="token punctuation">]</span><span class="token operator">=</span>n_m<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存到新数组中 </span><span class="token punctuation">}</span><span class="token keyword">int</span> a_s<span class="token punctuation">,</span>z_k<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  a_s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化答案（序列第一位相同） </span>  z_k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//最长上升子序列第一位初始化 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s_m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>z_k<span class="token punctuation">[</span>a_s<span class="token punctuation">]</span><span class="token punctuation">)</span>z_k<span class="token punctuation">[</span><span class="token operator">++</span>a_s<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//可以保持上升，存入 </span>    <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//不能保持上升 </span>      <span class="token keyword">int</span> p_s<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>z_k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>z_k<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>a_s<span class="token punctuation">,</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>z_k<span class="token punctuation">;</span><span class="token comment">//找到第一个比他小的 </span>      z_k<span class="token punctuation">[</span>p_s<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新数组 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">++</span><span class="token punctuation">,</span>q<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入第一个数组 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入第二个数组 </span>    <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋新编号 </span>    <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找结果 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %d\n"</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LCS：最长公共子序列"><a href="#LCS：最长公共子序列" class="headerlink" title="LCS：最长公共子序列"></a>LCS：最长公共子序列</h2><h3 id="History-Grading"><a href="#History-Grading" class="headerlink" title="History Grading"></a>History Grading</h3><p><a href="https://www.luogu.com.cn/problem/UVA111">UVA111 History Grading</a></p><p>枚举匹配位置，记录匹配结果，继承状态。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>t<span class="token punctuation">,</span>d_p<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n_m<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t_p<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n_m<span class="token punctuation">[</span>x_x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//按顺序标号正确答案 </span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_p<span class="token punctuation">[</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//按顺序标号学生答案 </span>      <span class="token keyword">int</span> x_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t_p<span class="token punctuation">[</span>x_x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>d_p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> d_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举学生答案位置 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举答案位置 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n_m<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>t_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>d_p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//匹配成功，答案更新 </span>        <span class="token keyword">else</span> d_p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//那个匹配成功的多继承那个状态 </span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出所有答案与所有学生答案位置都匹配过的答案 </span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><h3 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h3><p><a href="https://www.luogu.com.cn/problem/P1880">P1880 NOI1995 石子合并</a></p><p>先枚举块长（从短到长），再枚举所有区块，枚举断点，计算每个区块的断点左半部分和右半部分，记上每次合并后的价值。所有元素都可能作为开头，所以都要找一遍，记录答案。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> a_x<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>m_a<span class="token punctuation">,</span>f_1<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>f_2<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>n_m<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        n_m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原序列 </span>        n_m<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token operator">=</span>n_m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//双倍长度方便计算以每个元素开头的情况 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>n_m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//计算前缀和 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>p<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举区块长 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span>i<span class="token operator">+</span>p<span class="token punctuation">;</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">=</span>i<span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在序列中枚举区块 </span>            f_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a_x<span class="token punctuation">;</span><span class="token comment">//初始赋最大值，找最小值 </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举断点，从左右两部分找最优解继承 </span>                f_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f_1<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最大值，通过前缀和快速计算区间和（合并石子得到的价值）  </span>                f_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f_2<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最小值 </span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      m_i<span class="token operator">=</span>a_x<span class="token punctuation">;</span><span class="token comment">//初始赋最大值，找最小值 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历每个元素开头的情况，找到真正的最优解 </span>        m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>f_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_i<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>m_i<span class="token punctuation">,</span>f_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n%d"</span><span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="能量项链"><a href="#能量项链" class="headerlink" title="能量项链"></a>能量项链</h3><p><a href="https://www.luogu.com.cn/problem/P1063">P1063 NOIP2006 提高组 能量项链</a></p><p>分开看，每个珠子就是一颗珠子，而不去考虑前后问题，再遍历区间的时候处理即可。</p><p>只要枚举区间，枚举断点，根据题目描述更新最大值即可。题目计算能量的方法，正好是枚举左端点（前一个珠子的头标记），断点 $+1$ （前一个珠子的尾标记，后一个珠子的头标记），右端点 $+1$ （后一个珠子的尾标记）的能量积。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存两边，方便枚举每个开头的情况 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举结尾 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">-</span>j<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>j<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在长度范围内，枚举左区间 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举断点 </span>        <span class="token comment">//左边最大值 + 右边最大值 + 加持能量（题目中描述） 更新最大值 </span>        d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>d_p<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>a_a<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>a_a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>m_a<span class="token punctuation">)</span>m_a<span class="token operator">=</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新答案 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>m_a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Coloring-Brackets"><a href="#Coloring-Brackets" class="headerlink" title="Coloring Brackets"></a>Coloring Brackets</h3><p><a href="https://www.luogu.com.cn/problem/CF149D">CF149D Coloring Brackets</a></p><p>初始化所有新遍历到的括号，从大区间向小遍历，最后回溯时，等新答案，做后统计答案输出即可。</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>g_y<span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存配对括号互存下标 </span><span class="token keyword">long</span> <span class="token keyword">long</span> d_p<span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存情况 </span><span class="token keyword">char</span> s<span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入括号序列 </span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s_t<span class="token punctuation">;</span><span class="token comment">//用于匹配括号 </span><span class="token keyword">void</span> <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token comment">//是相邻的一对括号，初始化 </span>    d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>g_y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//现在左右是一对括号 </span>    <span class="token function">d_f</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新左右端点 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举状态可能，更新答案 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//现在右括号和匹配左括号不同色，统计答案 </span>          d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>d_p<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//现在右括号和匹配左括号不同侧，统计答案 </span>          d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>d_p<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//现在左括号和匹配右括号不同色，统计答案 </span>          d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>d_p<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//现在左括号和匹配右括号不同色，统计答案 </span>          d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>d_p<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">d_f</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>g_y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新左括号匹配的范围 </span>    <span class="token function">d_f</span><span class="token punctuation">(</span>g_y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配左括号匹配的右括号外的下标，继续匹配。 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举第一对括号的左括号 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举第一对括号的右括号 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举第二对括号的左括号 </span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>q<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>q<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举第二对括号的右括号 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//匹配相邻同色跳过 </span>            d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token operator">+</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>g_y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>d_p<span class="token punctuation">[</span>g_y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token operator">%</span>m_d<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//合法更新答案 </span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  n<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取原串 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//匹配括号，互存另一半括号下标 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span>s_t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> g_y<span class="token punctuation">[</span>s_t<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span>g_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s_t<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s_t<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从边界开始查询方案数 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//由于括号染两种颜色的没有存，所以是 0，不影响统计结果 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举左括号染色情况 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举右括号染色情况 </span>      a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span>d_p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//统计所有情况 </span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><a href="https://www.luogu.com.cn/problem/P2470">P2470 SCOI2007 压缩</a></p><p>区间枚举块长，左端点，找到压缩后的最短长度更新。难点在于区间内有 $M$ 的压缩，要考虑新压缩后的长度与原压缩的那个短，不断取最优。</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">char</span> s_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//长度是奇数，不可能压缩 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//找到查抄串的一半处 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m_i<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//前后匹配 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>s_s<span class="token punctuation">[</span>i<span class="token operator">+</span>m_i<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//前后不同，不能压缩 </span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//压缩成功 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s_s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取字符串 </span>  n<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s_s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取字符串长度 </span>  <span class="token function">memset</span><span class="token punctuation">(</span>d_p<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化区间长度 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l_n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>l_n<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>l_n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举长度 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">+</span>l_n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举左端点</span>      <span class="token keyword">int</span> r<span class="token operator">=</span>l<span class="token operator">+</span>l_n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//右端点 </span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f_i</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找成功，更新比对压缩户后的长度 </span>      <span class="token comment">//枚举断点，更新答案 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>l<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//区间内没有 M（压缩开头） </span>        d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>##r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>r<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找区间内压缩后的最小值 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>l<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//区间内有 M（压缩开头） </span>        <span class="token comment">//更新端点左边有 M 和没有 M 的最小值，和右边有 M 和没有 M 的最小值的总的最小值（抽象：选择 M 的放置地点） </span>        d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">min</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h2><h3 id="“访问”美术馆"><a href="#“访问”美术馆" class="headerlink" title="“访问”美术馆"></a>“访问”美术馆</h3><p><a href="https://www.luogu.com.cn/problem/P1270">P1270 “访问”美术馆</a></p><p>枚举将时间分给两个儿子（向左，向右走），暴力统计最大值即可。</p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l_n<span class="token punctuation">,</span>v<span class="token punctuation">;</span><span class="token comment">//道路花费时间，画的数量 </span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">yv</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//一去一回，两倍 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//若为零说明是走廊（见题目） </span>        <span class="token function">yv</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左儿子 </span>    <span class="token function">yv</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右儿子 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> s_m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">||</span><span class="token operator">!</span>s_m<span class="token punctuation">)</span><span class="token keyword">return</span> d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//已经遍历过或时间已经耗尽返回 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是展室 </span>      d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span><span class="token punctuation">(</span>s_m<span class="token operator">-</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//剩下的时间是全拿，还是来这里之后拿能拿部分（来这里要花费时间） </span>      <span class="token keyword">return</span> d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>s_m<span class="token operator">-</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举剩下时间，分给两儿子 </span>        d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">d_f</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">d_f</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>s_m<span class="token operator">-</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取最大能拿到的画 </span>    <span class="token keyword">return</span> d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    s_m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//要在警察到来前跑走（-1） </span>    <span class="token function">yv</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token function">d_f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>s_m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从第一条走廊开始找 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Book-of-Evil"><a href="#Book-of-Evil" class="headerlink" title="Book of Evil"></a>Book of Evil</h3><p><a href="https://www.luogu.com.cn/problem/CF337D">CF337D Book of Evil</a></p><p>先找到里根节点最远的点，在以这个点为跟，重新跑一遍，更新新深度。再找最深的节点，以这个节点为根节点，在新数组中重新跑一遍深度。这样，可以知道每个点距离两个最远互相怪物的点的距离，若最远的点符合要求，那么就合法。</p><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v<span class="token punctuation">,</span>n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>d<span class="token punctuation">,</span>s_m<span class="token punctuation">,</span>t_p<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span><span class="token keyword">int</span> v_l<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p_1<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p_2<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>s_m<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>s_m<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> f_a<span class="token punctuation">,</span><span class="token keyword">int</span> d_p<span class="token punctuation">)</span><span class="token punctuation">{</span>  d_p_1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">;</span><span class="token comment">//存深度 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//下一个点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">!=</span>f_a<span class="token punctuation">)</span><span class="token function">d_1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">,</span>d_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不返回走过的点 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> f_a<span class="token punctuation">,</span><span class="token keyword">int</span> d_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找深度 </span>  d_p_2<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">;</span><span class="token comment">//存深度 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//下一个点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">!=</span>f_a<span class="token punctuation">)</span><span class="token function">d_2</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">,</span>d_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不返回走过的点 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>v_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存初始怪物生成地点 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//连边 </span>    <span class="token keyword">int</span> u<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从一节点开始找 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//找到怪物中深度最大的点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d_p_1<span class="token punctuation">[</span>v_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>d_p_1<span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">)</span>t_p<span class="token operator">=</span>v_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">d_1</span><span class="token punctuation">(</span>t_p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从怪物最大深度的点开始找，重新赋值深度 </span>  t_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清零 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//找到怪物中深度最大的点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d_p_1<span class="token punctuation">[</span>v_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>d_p_1<span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">)</span>t_p<span class="token operator">=</span>v_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">d_2</span><span class="token punctuation">(</span>t_p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续找点离这个点的深度 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//从第一个点开始找，若距离都符合，计数 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d_p_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>d<span class="token operator">&amp;&amp;</span>d_p_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>d<span class="token punctuation">)</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> LIS </tag>
            
            <tag> LCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021.9.11模拟赛</title>
      <link href="/2021/09/11/2021.9.11-mo-ni-sai/"/>
      <url>/2021/09/11/2021.9.11-mo-ni-sai/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cead86625acc54e45663d173d202d808180ca5f083a01432f46f328eb458103a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟赛 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 笛卡尔树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021.9.10模拟赛</title>
      <link href="/2021/09/10/2021.9.10-mo-ni-sai/"/>
      <url>/2021/09/10/2021.9.10-mo-ni-sai/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6e3821d9023633c6b9a4d80b4dfdcb959071100925fa1b2e766f67bde731995e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟赛 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 暴力 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单基础动态规划（递推+各种背包）</title>
      <link href="/2021/09/09/jian-dan-ji-chu-dong-tai-gui-hua-di-tui-ge-chong-bei-bao/"/>
      <url>/2021/09/09/jian-dan-ji-chu-dong-tai-gui-hua-di-tui-ge-chong-bei-bao/</url>
      
        <content type="html"><![CDATA[<p>动态规划考题灵活，但是只要找到状态转移方程，就可以解决这道题。首先要有找到枚举状态的能力。</p><h2 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h2><h3 id="例1：数塔"><a href="#例1：数塔" class="headerlink" title="例1：数塔"></a>例1：数塔</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">            9           / <span class="token function selector">\</span>          /   <span class="token function selector">\</span>        12     15        / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>       /   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>     10     6     8     / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>    /   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>   2    18     9     5  / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\</span> /   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>19    7    10     4     16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有如下所示的数塔，要求从顶层走到底层，若每一步只能走到相邻的结点，则经过的结点的数字之和最大是多少？</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入数据首先包括一个整数 $C$,表示测试实例的个数，每个测试实例的第一行是一个整数 $N$，表示数塔的高度，接下来用N行数字表示数塔，其中第 $i$ 行有个 $i$ 个整数。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个测试实例，输出可能得到的最大和，每个实例的输出占一行。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">15 912 1510  6  8 2 18  9  519  7 10  4 16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">59<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1$ $&lt;=$ $N$ $&lt;=$ $100$，所有的整数均在区间 $[0,99]$ 内。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>从底层开始，不断向上遍历，每个节点保留从下面传上来的最大值加上它的本身价值，传到根节点即可（递推的过程）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">            9           / <span class="token function selector">\</span>          /   <span class="token function selector">\</span>        12     15        / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>       /   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>     10     6     8     / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>    /   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>   2    18     9     5  / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\</span> /   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>19    7    10     4     16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从底层向上遍历，更新节点价值。例如：$19$ （左下角）更新 $2$ 的权值，$2$ 变成 $21$。$7$ 也可能要更新  $2$ 的权值，但由于没有 $19$ 更新过后的数值大，所以更新失败。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">          9         / <span class="token function selector">\</span>        /   <span class="token function selector">\</span>      12     15      / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>     /   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>   10     6     8   / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>  /   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>21    28     19    21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一次更新后的结果。然后递推处理，最后输出根节点的值即可。（下面是每一步的更新过程）</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       9      / <span class="token function selector">\</span>     /   <span class="token function selector">\</span>   12     15   / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>  /   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>38    34    29<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    9   / <span class="token function selector">\</span>  /   <span class="token function selector">\</span>50     49<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">59<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="例2：兔子数列（斐波那契）"><a href="#例2：兔子数列（斐波那契）" class="headerlink" title="例2：兔子数列（斐波那契）"></a>例2：兔子数列（斐波那契）</h3><p>直接看 <a href="https://wdsa001.github.io/2021/08/09/fei-bo-na-qi/">斐波那契</a> 吧，太经典了。</p><p>斐波那契数列的的形成就是通过前两项递推的，本身也是动态转移的思想。</p><h3 id="例3：Working-out"><a href="#例3：Working-out" class="headerlink" title="例3：Working out"></a>例3：Working out</h3><p><a href="https://www.luogu.com.cn/problem/CF429B">CF429B Working out</a></p><p>根据题目，我们不难发现两人一人要从左下角到右上角，一人从左上角，到右下角，且中间会有一次相遇。</p><p>关键在于那一次相遇的地点选择，并且从相遇点到终点和终点跑到相遇点的性质其实相同。所以我们可以考虑，四个人从四个角跑到一个点，左上角的人只能向右或向下；左下角的人只能向右或向上；右上角的人只能向左后向下；右下角的人只能向左或向上。四人跑到这个点路径的权值和最大。</p><p>由于我们不知道相遇的地方在哪，所以我们可以通过枚举相遇的点来比对找到最终的最大值。</p><p>那么如何使起点到这个点路径的权值和最大呢？</p><p>通过递推，找出起点到全图上所有点的权值都最大。已左上角举例。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//左上角递推 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    z_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>z_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>z_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是，我们可以发现每个角到一点回合时，进入点的方向也可能不同。分为两种情况（由于方向约束）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">      左上角左下角 汇合 右上角      右下角      右上角左上角 汇合 右下角      左下角<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在计算结果的时候要判一下两种结果最大值。</li><li>我们的讨论的点上下左右四个都可以达到，所以这个相遇的点不在边线上。</li><li>“另外，他们的健身速度不同，所以可以走过的路线长度也不同。”所以，我们不用特判他 们的速度是否合法。</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> o_o<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> z_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//左上角</span><span class="token keyword">long</span> <span class="token keyword">long</span> y_x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//右下角</span><span class="token keyword">long</span> <span class="token keyword">long</span> z_x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//左下角</span><span class="token keyword">long</span> <span class="token keyword">long</span> y_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//右上角</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//读入 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//左上角递推 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        z_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>z_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>z_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//右下角递推 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>y<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        y_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>y_x<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>y_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//左下角递推 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        z_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>z_x<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>z_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//右上角递推 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>y<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        y_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>y_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>y_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> m_a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//找最大值 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>z_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>y_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>z_x<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>y_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>z_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>y_x<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>z_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>y_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><p><del>接下来的 $3$ 道题，非常经典！</del></p><h3 id="例4：采药"><a href="#例4：采药" class="headerlink" title="例4：采药"></a>例4：采药</h3><p><a href="https://www.luogu.com.cn/problem/P1048">P1048 NOIP2005 普及组 采药</a></p><p>一句话题意：限时间，价值最大化，药有限。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m_t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//总时间，药个数 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//每次有新药，更新一次 </span><span class="token keyword">int</span> t_i<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v_i<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个药花费的时间，价值 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m_t<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举剩下的时间 </span>            d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继承上一个状态 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>t_i<span class="token punctuation">)</span>d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>t_i<span class="token punctuation">]</span><span class="token operator">+</span>v_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果时间够用，更新状态 </span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>n_x<span class="token punctuation">]</span><span class="token punctuation">[</span>m_t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最新状态，在时间内的答案 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例5：装箱"><a href="#例5：装箱" class="headerlink" title="例5：装箱"></a>例5：装箱</h3><p><a href="https://www.luogu.com.cn/problem/P1049">P1049 NOIP2001 普及组 装箱问题</a></p><p>一句话题意：限空间，占用空间最大化，物品有限。</p><p><strong>这道题用一维数组写（滚动数组）</strong>（时间换空间）</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">2e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> v_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//物品体积 </span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> m_v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//箱子大小，物品数量 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>v_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存入物品体积 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每个物品来的时候更新状态 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m_v<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//有这个物品的空间 </span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>v_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//占的地方尽量大 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>m_v<span class="token operator">-</span>d_p<span class="token punctuation">[</span>m_v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出浪费的最小空间 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>动态规划：现在决定未来，未来与过去无关。</strong></p><p>所以采药为例，每回返回上一个状态后，上一个状态就没用了，极大浪费空间。可以改进为如下代码。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token comment">//使用时间 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//获得价值 </span><span class="token punctuation">}</span>x_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> m_t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入基础信息 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每个药都要更新结果 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m_t<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//有时间采这个药 </span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新结果 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>m_t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例6：烹调方案"><a href="#例6：烹调方案" class="headerlink" title="例6：烹调方案"></a>例6：烹调方案</h3><p><a href="https://www.luogu.com.cn/problem/P1417">P1417 烹调方案</a></p><p>假如相邻的两个物品 $x$，$y$ 。假设现在已经耗费 $t$ 的时间，那么分别列出先做 $x$，$y$ 的代价：</p><ul><li><p>$1$ 式：$a[x]-(t+c[x])\times b[x]+a[y]-(t+c[x]+c[y])\times b[y] $</p></li><li><p>$2$ 式：$a[y]-(t+c[y])\times b[y]+a[x]-(t+c[y]+c[x])\times b[x] $</p></li></ul><p>不难看出时间（做菜顺序）对结果是有影响的，所以要将价值最大化，就要按一定顺序排好后，再跑 $01$ 背包，所以我们要将 $1$ 式和 $2$ 式做出比对以确定顺序。</p><p>当 $c[x]\times b[y] &lt; c[y]\times b[x]$ 时，$1$ 式 $&gt;$ $2$ 式。我们就可以根据这个性质来排序。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">100001</span><span class="token punctuation">;</span> <span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span>x_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> d_p<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//最优排序 </span><span class="token keyword">return</span> a<span class="token punctuation">.</span>c<span class="token operator">*</span>b<span class="token punctuation">.</span>b<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>b<span class="token operator">*</span>b<span class="token punctuation">.</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m_t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最大时间，菜的个数 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>x_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x_i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>x_n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最优排序 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举每道菜 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m_t<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//有时间做 </span>    d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">-</span>j<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据题意算最大值</span><span class="token comment">//注意，这里的 j 就是题目中的 t 时刻 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m_t<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最大值，有可能菜会更新出负数的美味值，影响最终结果 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><h3 id="例7：疯狂的采药"><a href="#例7：疯狂的采药" class="headerlink" title="例7：疯狂的采药"></a>例7：疯狂的采药</h3><p><a href="https://www.luogu.com.cn/problem/P1616">P1616 疯狂的采药</a></p><p>一句话题意：限时间，价值最大化，药无限。</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span>m_a<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token comment">//这种药的时间 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//这种药的价值 </span><span class="token punctuation">}</span>x_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> d_p<span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> m_t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入时限，药的种类 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每个种类的药的时间和价值 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每选一种药更新 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m_t<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//有时间采这个药 </span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>m_t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出这个时间最多获得的价值 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>在药有限时：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m_t<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在药无限时：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m_t<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不难发现，只是循环顺序有变，但是性质完全不同。但是很好理解，因为我们现在将二维数组压缩成一位数组了。</p><p>我们倒着遍历的原因是什么（采药）？</p><p>为的是这个结果不会干扰别的状态。所以从后向前遍历，这样每回后面的状态根据前面的变化，但是前面的值在遍历前不会改变，所以后面的状态要重复借助前面的状态时不会受到影响。</p><p>那影响会发生什么（即从前往后遍历）？</p><p>就是药无限的情况。因为在前面的时候假如已经选了一次这个药，后面的遍历的时候状态都是建立在已经选了一次这个药的基础上，所以可能再选这个药很多次。</p><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><h3 id="英雄联盟"><a href="#英雄联盟" class="headerlink" title="英雄联盟"></a>英雄联盟</h3><p><a href="https://www.luogu.com.cn/problem/P5365">P5365 SNOI2017 英雄联盟</a></p><p>与 $01$ 背包不同的是此类题的物品不再只是 $1$ 个，所以可直观的理解为多了一层枚举每个物品选几个的循环。</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1000001</span><span class="token punctuation">;</span> <span class="token keyword">long</span> <span class="token keyword">long</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//下标是用的钱数，值为多少种策略 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token comment">//皮肤数量 </span><span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token comment">//皮肤价格 </span><span class="token punctuation">}</span>x_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token punctuation">;</span><span class="token comment">//需要钱的总数 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入皮肤数量 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//皮肤价格 </span>s_m<span class="token operator">+=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>k<span class="token punctuation">;</span><span class="token comment">//所有皮肤买下需要的钱 </span><span class="token punctuation">}</span>d_p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//后面的处理涉及到乘法，所以要初始化 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每个新的英雄出现都要更新 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>s_m<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//有钱买皮肤 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">&lt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>k<span class="token operator">&amp;&amp;</span>p<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//不能超过现有（枚举）的钱，枚举的次数不能超过皮肤总数 </span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>p<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新答案 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a_s<span class="token operator">&lt;=</span>s_m<span class="token operator">&amp;&amp;</span>d_p<span class="token punctuation">[</span>a_s<span class="token punctuation">]</span><span class="token operator">&lt;</span>m<span class="token punctuation">)</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//找到满足要求的就退出，而枚举的钱是从小到大，所以最优 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="宝物筛选（二进制优化）"><a href="#宝物筛选（二进制优化）" class="headerlink" title="宝物筛选（二进制优化）"></a>宝物筛选（二进制优化）</h3><p><a href="https://www.luogu.com.cn/problem/P1776">P1776 宝物筛选</a></p><p>因为二进制可以覆盖所有的数，所以讲一个数也可以分成二进制而不破坏其完整性。</p><p>例如： $11=1+2+4+4$</p><p>而这 $4$ 个分出来的数可以表示 $[1,11]$ 之间的所有书。所以可以将物品的数量分解成几个部分，但不影响取的数量的可能性。</p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a_s<span class="token punctuation">,</span>x_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//下标存分的部分，值存价值 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> w<span class="token punctuation">;</span><span class="token comment">//重量 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//价值 </span><span class="token punctuation">}</span>x_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m_w<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//宝物有几种，最大载重 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> v_i<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>w_i<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入每种宝物的基本信息 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m_i<span class="token punctuation">;</span>j<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//将数量分开存 </span>        x_p<span class="token operator">++</span><span class="token punctuation">;</span>            x_i<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>j<span class="token operator">*</span>v_i<span class="token punctuation">;</span><span class="token comment">//分成这部分的总价值 </span>x_i<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">=</span>j<span class="token operator">*</span>w_i<span class="token punctuation">;</span><span class="token comment">//分成这部分的中重量 </span>            m_i<span class="token operator">-=</span>j<span class="token punctuation">;</span><span class="token comment">//分出去的减去 </span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token punctuation">)</span>x_p<span class="token operator">++</span><span class="token punctuation">,</span>x_i<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v_i<span class="token operator">*</span>m_i<span class="token punctuation">,</span>x_i<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">=</span>w_i<span class="token operator">*</span>m_i<span class="token punctuation">;</span><span class="token comment">//还剩下的不够整分，单独存 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举存的单位 </span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m_w<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//还能承重 </span>      d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新结果 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>m_w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多重背包-完全背包"><a href="#多重背包-完全背包" class="headerlink" title="多重背包+完全背包"></a>多重背包+完全背包</h2><h3 id="The-Fewest-Coins-G"><a href="#The-Fewest-Coins-G" class="headerlink" title="The Fewest Coins G"></a>The Fewest Coins G</h3><p><a href="https://www.luogu.com.cn/problem/P2851">P2851  USACO06DEC The Fewest Coins G</a></p><p>不难得出，我们要找到买物品花的硬币数加找钱的硬币数的总和最小。我们可以枚举真正花的钱（大于目标价），买家跑多重背包（钱币有限），卖家跑完全背包（钱币无限）加和取最小。</p><p>枚举的最大范围是最大钱币的平方加目标价的和，因为如果能拿最大钱币的最大钱币的面值个那么一定不是最优。</p><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//钱币价值 </span><span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token comment">//钱币个数 </span><span class="token punctuation">}</span>x_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>m_x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s_m<span class="token operator">+=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//计算买家所有钱的和 </span>        m_x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m_x<span class="token punctuation">,</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找钱最大范围 </span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s_m<span class="token operator">&lt;</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//买的人所有钱加起来都买不起 </span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//卖家完全背包 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每种钱币更新 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m_x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//还有“挥霍”空间 </span>            g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前面对后面有影响，能少张数就少 </span>    <span class="token comment">//买家多重背包 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//每种钱币更新 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>j<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//二分优化多重背包，变为 01 背包 </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>t<span class="token operator">+</span>m_x<span class="token punctuation">;</span>k<span class="token operator">&gt;=</span>j<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//还有“挥霍”空间 </span>                f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>k<span class="token operator">-</span>j<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//能少给张数就少给 </span>            x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">-=</span>j<span class="token punctuation">;</span><span class="token comment">//分出去的钱减去 </span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token comment">//有剩余张数 </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>t<span class="token operator">+</span>m_x<span class="token punctuation">;</span>k<span class="token operator">&gt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//剩下的单独分成一块 </span>                f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>k<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接比较 </span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>t<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>t<span class="token operator">+</span>m_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>i<span class="token operator">-</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到用的最少的张数 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a_s<span class="token operator">==</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没找到 </span><span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="有依赖的背包"><a href="#有依赖的背包" class="headerlink" title="有依赖的背包"></a>有依赖的背包</h2><h3 id="金明的预算方案"><a href="#金明的预算方案" class="headerlink" title="金明的预算方案"></a>金明的预算方案</h3><p><a href="https://www.luogu.com.cn/problem/P1064">P1064 NOIP2006 提高组 金明的预算方案</a></p><p>找好主附件之间的联系后跑 $01$ 背包即可。由于配件数量过少，情况特判即可。</p><h4 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">;</span><span class="token keyword">int</span> z_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>z_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> f_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//一个主件最多两个附件 </span><span class="token keyword">int</span> f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>            z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//主件价格 </span>            z_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//价格*重要度（结果要使这个最大） </span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            f_w<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//它属于的主件的附件数量增加（下标） </span>            f_w<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span>f_w<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//存入价格 </span>            f_c<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span>f_w<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//价格*重要度 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//有 m 种物品，每多一种，更新一次 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token punctuation">;</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&gt;=</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//只用枚举主件即可（附件很少暴力即可） </span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>z_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是否比买了它的主件更优 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//是否比买了它的第一个附件更优 </span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>z_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//是否比买了它的第二个附件更优 </span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>z_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//是否比两个附件都买更优 </span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>z_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//最多有 2 种附件，所以只用枚举 4 种情况，若没有附件不会影响结果（+0 不会更新结果） </span>    <span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 斐波那契 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021.9.8模拟赛</title>
      <link href="/2021/09/08/2021.9.8-mo-ni-sai/"/>
      <url>/2021/09/08/2021.9.8-mo-ni-sai/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="311f780bfa80c018421328fcfa892f64cd51f4dc3060823c56d99f5fff91c4bd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟赛 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 最近公共祖先 </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速降次</title>
      <link href="/2021/09/08/kuai-su-jiang-ci/"/>
      <url>/2021/09/08/kuai-su-jiang-ci/</url>
      
        <content type="html"><![CDATA[<h3 id="快速降次"><a href="#快速降次" class="headerlink" title="快速降次"></a>快速降次</h3><p>我们以快速幂为例子，模拟一下这个过程。</p><p>假如我们现在要计算 $2^{13}$。我们可以用 <code>&lt;cmath&gt;</code> 头文件的 <code>pow(2,13)</code> 但是它的效率并不高。我们现在要手写快速幂，让 $2$ 直接乘 $13$ 次是很朴素的方法，快速幂比他快的多。</p><p>首先，我们直到如下结论 $x^a\times x^b = x^{a+b}$</p><p>所以，$x\times x=x^2$，$x^2\times x^2 = x^4$，$(x^2)^2 = x^4$。</p><p>我们知道任何一个数都可以写成二进制数，我们也可以将 $13$，直接写成二进制数表示形式 $13 = 2^3+2^2+2^0 = 8+4+1$（二进制：$1101$）</p><p>那么，我们就可以将原式变形 $(((2)^2\times 2)^2)^2\times 2$ 整理一下 $(((2)^2)^2)^2\times ((2)^2)^2\times 2 = 2^8\times 2^4\times 2$。</p><p>这样我们就可以边降次，边让辅助乘数快速生长。</p><p>辅助乘数（笔者为了方便描述自定义变量）：辅助累计答案的变量，比如上面的例子，辅助乘数初始值 $2$，接着会变换成 $4$（$2^2$），然后是 $8$（$2^3$），而当累计需要时，可以直接取到。（后面代码中的辅助加数，意义相同）</p><p><strong>不一定每回都是以 $2$ 次的频率向上升，也可以 $3$，$4$……或更多，根据情况而定即可。不要被模板扼杀了无限的想法！</strong></p><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">k_m</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//辅助乘数，乘的次数 </span><span class="token keyword">long</span> <span class="token keyword">long</span> r_s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//结果统计 </span><span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>r_s<span class="token operator">=</span><span class="token punctuation">(</span>r_s<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//可以理解成二进制时，如果当前位为 1，就需要辅助乘数更新结果。 </span>a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//辅助乘数 </span>b<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//快速降次 </span><span class="token punctuation">}</span><span class="token keyword">return</span> r_s<span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入a，n次乘 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token function">k_m</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到结果 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h3><p>与快速幂道理相似。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">k_c</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//辅助加数，乘的次数 </span><span class="token keyword">long</span> <span class="token keyword">long</span> r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果统计 </span><span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>r_s<span class="token operator">=</span><span class="token punctuation">(</span>r_s<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//更新答案 </span>a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//辅助加数 </span>b<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//快速降次 </span><span class="token punctuation">}</span><span class="token keyword">return</span> r_s<span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入a，加n次 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token function">k_c</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到结果 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>但是，快速乘并非比普通的乘法快</strong>，它的主要作用是：有些时候我们会发现直接相乘会都是信息，找到之间的过程，保留这些信息。举个简单的例子，两个马上越界（极大的）的 <code>long long</code> 相乘一定会丢很多东西。</p><p>这时候就可以用快速乘，一步一取模。虽然会很慢，但是保留了程序和结果的正确性。（很多时候为了保留信息也不得不用，依据题目而言）</p><h3 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h3><p><a href="https://www.luogu.com.cn/problem/P3390">P3390 【模板】矩阵快速幂</a></p><h4 id="矩阵加"><a href="#矩阵加" class="headerlink" title="矩阵加"></a>矩阵加</h4><script type="math/tex; mode=display">\left[\begin{matrix}1 & 3 \\2 & 2 \\\end{matrix}\right]+\left[\begin{matrix}2 & 4  \\3 & 2  \\\end{matrix}\right]=\left[\begin{matrix}1+2 & 3+4  \\2+3 & 2+2  \\\end{matrix}\right]=\left[\begin{matrix}3 & 7  \\5 & 4  \\\end{matrix}\right]</script><h4 id="矩阵减"><a href="#矩阵减" class="headerlink" title="矩阵减"></a>矩阵减</h4><script type="math/tex; mode=display">\left[\begin{matrix}1 & 3 \\2 & 2 \\\end{matrix}\right]-\left[\begin{matrix}2 & 4  \\3 & 2  \\\end{matrix}\right]=\left[\begin{matrix}1-2 & 3-4  \\2-3 & 2-2  \\\end{matrix}\right]=\left[\begin{matrix}-1 & -1  \\-1 & 0  \\\end{matrix}\right]</script><h4 id="矩阵乘"><a href="#矩阵乘" class="headerlink" title="矩阵乘"></a>矩阵乘</h4><script type="math/tex; mode=display">\left[\begin{matrix}1 & 3 \\2 & 2 \\\end{matrix}\right]\times\left[\begin{matrix}2 & 4 & 3 \\3 & 2 & 1 \\\end{matrix}\right]=\left[\begin{matrix}11 & 10 & 6 \\10 & 12 & 8 \\\end{matrix}\right]</script><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">形状上：2*2 和 2*3 的矩阵乘积后,结果是 2*3 的矩阵。即 a*b 矩阵 和 c*d 的矩阵乘积结果是 a*d 的矩阵。其中 b 和 c 必须相等。原因看下面。运算法则：对于结果矩阵的第 i 行第 j 列的位置的结果是由前一个矩阵的对应的行。和后一个矩阵对应的列。对应位置乘积和获得的。    比如第 1 行第 1 列的 11.是由前矩阵的第一行 (1,3) 和后矩阵的第一列 (2,3) 对应位置乘积和。    1*2 + 3*3 = 11 获得的。    如果上述 b 和 c 如果不相等。那么会有地方"失配"没有数值可以进行计算。不符合矩阵乘法定义。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（矩阵还有很多有趣的运算与用途，感兴趣可以自己了解一下，矩阵相乘的的数学意义）。</p><h4 id="代码（矩阵快速幂）"><a href="#代码（矩阵快速幂）" class="headerlink" title="代码（矩阵快速幂）"></a>代码（矩阵快速幂）</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">po</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//初始化数组 </span><span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>po <span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> po <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span><span class="token comment">//重载乘号（封装矩阵相乘格式） </span>po z<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//第一个矩阵的列，第二个矩阵的行 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//结果矩阵的行，第一个矩阵的行 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//结果矩阵的列，第二个矩阵的列 </span>z<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>x<span class="token punctuation">.</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>m_d<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token keyword">return</span> z<span class="token punctuation">;</span><span class="token comment">//返回结果矩阵 </span><span class="token punctuation">}</span><span class="token punctuation">}</span>a<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">k_j</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//可以直接写成快速幂形式，因为已经将矩阵的乘法格式封装好了 </span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span>a_s<span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token comment">//累计答案 </span>a<span class="token operator">=</span>a<span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token comment">//辅助矩阵增次 </span>b<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>、 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入初始矩阵 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化答案矩阵 </span><span class="token function">k_j</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//矩阵快速幂 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//输出结果矩阵 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a_s<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 矩阵 </tag>
            
            <tag> 快速幂 </tag>
            
            <tag> 快速乘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AC自动机（二次加强）</title>
      <link href="/2021/09/07/ac-zi-dong-ji-er-ci-jia-qiang/"/>
      <url>/2021/09/07/ac-zi-dong-ji-er-ci-jia-qiang/</url>
      
        <content type="html"><![CDATA[<p>看此文章前建议先看 <a href="https://wdsa001.github.io/2021/09/04/zi-dian-shu-ac-zi-dong-ji/">字典树&amp;AC自动机</a> 理解相关知识。</p><h3 id="AC自动机（二次加强）（拓扑优化）"><a href="#AC自动机（二次加强）（拓扑优化）" class="headerlink" title="AC自动机（二次加强）（拓扑优化）"></a>AC自动机（二次加强）（拓扑优化）</h3><p><a href="https://www.luogu.com.cn/problem/P5357">P5357 【模板】AC自动机（二次加强版）</a></p><p>现在我们用 $abc$，$bc$，$b$ 来建一棵字典树，效果如下。（括号中的数为编号）</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">     根    (0)    /|<span class="token function selector">\</span>   / | <span class="token function selector">\</span>  /  |  <span class="token function selector">\</span> a   b   c(1) (4) (6) |   |    <span class="token function selector">\</span> |   |     <span class="token function selector">\</span> b   c      *(2) (5) |   | c   *(3) |    * <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们建立完失配指针后，有编号 $3$ 指向 $5$，又有编号 $5$ 指向编号 $6$，在原来的AC自动机中，我们通过暴力跳失配指针来统计字符串出现的次数。不难发现遍历到编号 $3$ 时，要更新编号 $5$，$6$ 节点。遍历到编号 $5$ 时，又要更新编号 $6$ 。所以编号 $6$ 被更新了两遍。</p><p>当节点更多时，复杂度明显上升。所以我们可以用拓扑排序来解决。这时，遍历顺序为编号 $3$ 更新编号 $5$,编号 $5$ 更新编号 $6$。所有编号只会被遍历一次。</p><h4 id="建立拓扑图"><a href="#建立拓扑图" class="headerlink" title="建立拓扑图"></a>建立拓扑图</h4><p>因为要有每个处理点的基本信息，即信息下传（这也是不用暴力查找的原因），所以字典树节点要多存一个出现次数的标记。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">4e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//字典树节点 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数 </span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可将失配指针看作有向连边，那么失配指针处理完后就是一个有向无环图。所以直接在遍历失配指针时，被指向的节点入度直接加一记录即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录入度 </span><span class="token keyword">void</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理失配指针 </span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//遍历根节点的儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有儿子 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//失配后回根节点 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录 </span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的儿子的失配指针 指向 这个节点的失配指针指向的节点的儿子</span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//被指向的点入度 +1 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//压入队列 </span><span class="token punctuation">}</span><span class="token keyword">else</span> a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的失配指针指向的节点的儿子 是 这个节点的儿子</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="处理拓扑图"><a href="#处理拓扑图" class="headerlink" title="处理拓扑图"></a>处理拓扑图</h4><p>每回将入度为 $0$，的点遍历，因为遍历他们不会对结果产生影响（或者说没有节点再去改变它们的值）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//字典树节点 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数 </span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录入度 </span><span class="token keyword">int</span> x_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//字符串出现的次数 </span><span class="token keyword">void</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理失配指针 </span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//遍历根节点的儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有儿子 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//失配后回根节点 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录 </span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的儿子的失配指针 指向 这个节点的失配指针指向的节点的儿子</span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//被指向的点入度 +1 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//压入队列 </span><span class="token punctuation">}</span><span class="token keyword">else</span> a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的失配指针指向的节点的儿子 是 这个节点的儿子</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="特殊处理"><a href="#特殊处理" class="headerlink" title="特殊处理"></a>特殊处理</h4><p>因为本题有重复字符串，所以可已将重复字符串编号指向同一个节点，这样既不影响节点状况，遍历的时候也有去重效果。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">4e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//字典树节点 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数 </span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token comment">//字符串 </span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//字典树节点编号 </span><span class="token keyword">int</span> m_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//处理重串 </span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建立字典树 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//标号 0 为根节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//点没出现过，赋予新编号 </span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">)</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//没出现过，标记 </span>m_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">;</span><span class="token comment">//处理重串，重串本质上一样，只记录个“坐标”即可 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AC自动机（二次加强）代码"><a href="#AC自动机（二次加强）代码" class="headerlink" title="AC自动机（二次加强）代码"></a>AC自动机（二次加强）代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">4e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//字典树节点 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数 </span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token comment">//字符串 </span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//字典树节点编号 </span><span class="token keyword">int</span> m_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//处理重串 </span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建立字典树 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//标号 0 为根节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//点没出现过，赋予新编号 </span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">)</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//没出现过，标记 </span>m_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">;</span><span class="token comment">//处理重串，重串本质上一样，只记录个“坐标”即可 </span><span class="token punctuation">}</span><span class="token keyword">int</span> i_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录入度 </span><span class="token keyword">void</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理失配指针 </span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//遍历根节点的儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有儿子 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//失配后回根节点 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录 </span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的儿子的失配指针 指向 这个节点的失配指针指向的节点的儿子</span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//被指向的点入度 +1 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//压入队列 </span><span class="token punctuation">}</span><span class="token keyword">else</span> a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的失配指针指向的节点的儿子 是 这个节点的儿子</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">g_a_c</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理原串 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顺着往下走 </span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//以这个节点结尾的字符串出现次数 +1 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> x_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//字符串出现的次数 </span><span class="token keyword">void</span> <span class="token function">t_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入度为 0 的点入队</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//保存这个字符串出现的次数 </span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//这个节点指向的节点入度 -1 （这个点要被删去了） </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数赋给被指向的对象（它包含了被指向对象的次数） </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果被指向的点没有别的点指它，就可以处理它了 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入长度</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span><span class="token comment">//读入字符串 </span><span class="token function">b_t</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串建到字典树上</span><span class="token punctuation">}</span><span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理失配指针 </span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span><span class="token comment">//读入查找串</span><span class="token function">g_a_c</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在字典树上处理原串</span><span class="token function">t_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拓扑排序统计答案 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x_n<span class="token punctuation">[</span>m_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>同样可以回刷一下 <a href="https://www.luogu.com.cn/problem/P3796">P3796 【模板】AC自动机（加强版）</a><br> 只要稍微改一下就可以实现，可以用来复习巩固。</p><h3 id="AC自动机（加强）代码"><a href="#AC自动机（加强）代码" class="headerlink" title="AC自动机（加强）代码"></a>AC自动机（加强）代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//字典树节点 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数 </span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span>string s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//字符串 </span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//字典树节点编号 </span><span class="token keyword">void</span> <span class="token function">yv</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a_c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">)</span><span class="token punctuation">;</span>a_c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a_c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建立字典树 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//标号 0 为根节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//点没出现过，赋予新编号 </span><span class="token function">yv</span><span class="token punctuation">(</span>x_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> i_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录入度 </span><span class="token keyword">void</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理失配指针 </span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//遍历根节点的儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有儿子 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//失配后回根节点 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录 </span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的儿子的失配指针 指向 这个节点的失配指针指向的节点的儿子</span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//被指向的点入度 +1 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//压入队列 </span><span class="token punctuation">}</span><span class="token keyword">else</span> a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的失配指针指向的节点的儿子 是 这个节点的儿子</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">g_a_c</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理原串 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顺着往下走 </span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//以这个节点结尾的字符串出现次数 +1 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token keyword">int</span> n_m<span class="token punctuation">;</span> <span class="token punctuation">}</span>a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//字符串出现的次数 </span><span class="token keyword">void</span> <span class="token function">t_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入度为 0 的点入队 </span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a_s<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">=</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//保存这个字符串出现的次数 </span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//这个节点指向的节点入度 -1 （这个点要被删去了） </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数赋给被指向的对象（它包含了被指向对象的次数） </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果被指向的点没有别的点指它，就可以处理它了 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>pp a<span class="token punctuation">,</span>pp b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//按题目要求排序 </span><span class="token keyword">return</span> a<span class="token punctuation">.</span>n_m<span class="token operator">==</span>b<span class="token punctuation">.</span>n_m<span class="token operator">?</span>a<span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>i_d<span class="token operator">:</span>a<span class="token punctuation">.</span>n_m<span class="token operator">&gt;</span>b<span class="token punctuation">.</span>n_m<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入长度 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token function">yv</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入字符串 </span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span>i<span class="token punctuation">;</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">b_t</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串建到字典树上 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理失配指针 </span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入查找串 </span><span class="token function">g_a_c</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在字典树上处理原串 </span><span class="token function">t_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拓扑排序统计答案 </span><span class="token function">sort</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a_s<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//答案排序 </span>cout<span class="token operator">&lt;&lt;</span>a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出 </span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">==</span>a_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字典树 </tag>
            
            <tag> AC自动机 </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典树&amp;AC自动机</title>
      <link href="/2021/09/06/zi-dian-shu-ac-zi-dong-ji/"/>
      <url>/2021/09/06/zi-dian-shu-ac-zi-dong-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h3><p>类似一个找字符串相同前缀存不同的操作。就是利用已经出现过的字符或建立新节点存字符串。</p><p>举个例子：我们现在用 $app$，$add$，$bug$，$bus$，$good$，$go$ 六个单词来建一个字典树，效果如下（“$*$”表示字符串结束标志）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       根      /|<span class="token function selector">\</span>     / | <span class="token function selector">\</span>    /  |  <span class="token function selector">\</span>   a   b   g  /|   |    <span class="token function selector">\</span> / |   |     <span class="token function selector">\</span>p  d   u      o|  |   |<span class="token function selector">\ </span>    |<span class="token function selector">\</span>p  d   s g    o *|  |   | |    |*  *   * *    d              |              *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来解释一下步骤。</p><hr><h4 id="第一步，插入-app-。"><a href="#第一步，插入-app-。" class="headerlink" title="第一步，插入 $app$。"></a>第一步，插入 $app$。</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">根<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先查找根节点，发现根节点没有 $a$ 节点的儿子，那么建立 $a$ 节点的儿子。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    根   /  /  / a <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样没有 $app$ 字符串后面的节点，依次建立。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       根      /     /     /    a   / / p |p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$app$ 字符串建立完了，这是要在结尾补上一个标志，表示有一个字符串在这里结束。也可以建立一个结构体，定义一个节点存在这里结束的字符串是第几个（前提是字符串各不相同，否则可以用链式前向星或其他方法来特殊处理了）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       根      /     /     /    a   / / p |p|*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="第二步：插入-add-。"><a href="#第二步：插入-add-。" class="headerlink" title="第二步：插入 $add$。"></a>第二步：插入 $add$。</h4><p>首先查找根节点，发现根节点有 $a$ 节点的儿子，那么直接进入到这个节点。</p><p>接着发现 $a$ 节点没有 $p$ 儿子的节点，依次建立节字符串后面的字符节点（当匹配一个字符串是，如果一个节点的儿子不能满足当前的字符，那么后面的字符就可以直接建节点了，因为建的新节点不会有子节点，所以会又建新节点，循环往复）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       根      /     /     /    a   /| / |p  d|  |p  d|  |*  *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="同理，插入-bug-，-bus-，-good-三个字符串后，我们来模拟一下插入-go-。"><a href="#同理，插入-bug-，-bus-，-good-三个字符串后，我们来模拟一下插入-go-。" class="headerlink" title="同理，插入 $bug$，$bus$，$good$ 三个字符串后，我们来模拟一下插入 $go$。"></a>同理，插入 $bug$，$bus$，$good$ 三个字符串后，我们来模拟一下插入 $go$。</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       根      /|<span class="token function selector">\</span>     / | <span class="token function selector">\</span>    /  |  <span class="token function selector">\</span>   a   b   g  /|   |    <span class="token function selector">\</span> / |   |     <span class="token function selector">\</span>p  d   u      o|  |   |<span class="token function selector">\ </span>    |p  d   s g    o|  |   | |    |*  *   * *    d              |              *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先查找根节点，发现根节点有 $g$ 节点的儿子，那么直接进入到这个节点。</p><p>接着发现 $g$ 节点有了 $o$ 儿子节点，那么直接进入到这个节点。</p><p>$go$ 遍历完了，接着在这个节点上打一个结束标记即可。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       根      /|<span class="token function selector">\</span>     / | <span class="token function selector">\</span>    /  |  <span class="token function selector">\</span>   a   b   g  /|   |    <span class="token function selector">\</span> / |   |     <span class="token function selector">\</span>p  d   u      o|  |   |<span class="token function selector">\ </span>    |<span class="token function selector">\</span>p  d   s g    o *|  |   | |    |*  *   * *    d              |              *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果带上标号：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">        根       /|<span class="token function selector">\</span>      / | <span class="token function selector">\</span>     /  |  <span class="token function selector">\</span>    a   b   g   /|   |    <span class="token function selector">\</span>  / |   |     <span class="token function selector">\</span> p  d   u      o |  |   |<span class="token function selector">\ </span>    |<span class="token function selector">\</span> p  d   s g    o(6) |  |  /   <span class="token function selector">\ </span>  | (1)(2)(4) (3)  d               |              (5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组大小 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//字典树节点 </span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点（26个字母） </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//要建的字符串长度 </span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历每一位 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果没有这个节点 </span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//建立这个节点 </span><span class="token function">yv</span><span class="token punctuation">(</span>x_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化这个节点（多测清空） </span><span class="token punctuation">}</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顺次往下找 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//结束标记是哪个字符串 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入字符串 </span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//存坐标（第几个答案）</span><span class="token function">b_t</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串建到字典树上 </span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h3><p>AC自动机是一种比较高级的处理字符串的方法。</p><p><a href="https://www.luogu.com.cn/problem/P3796">P3796 【模板】AC自动机（加强版）</a></p><p>这道题目，首先要建出字典树，然后处理失配指针（和 <a href="https://wdsa001.github.io/2021/09/03/kmp-suan-fa/">KMP</a> 的失配指针(这篇博文中，我用 <code>kmp</code> 数组存的失配指针)原理相似），接着统计每个字符串出现的字数，输出即可。</p><p><del>建字典树不再赘述。</del></p><h4 id="处理失配指针"><a href="#处理失配指针" class="headerlink" title="处理失配指针"></a>处理失配指针</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存字符串 </span><span class="token keyword">int</span> x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//为字典树开辟的新节点赋予下标 </span><span class="token keyword">void</span> <span class="token function">yv</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//清空字典树的某个节点 </span><span class="token function">memset</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">)</span><span class="token punctuation">;</span>a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token comment">//存要找失配指针的节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历根节点每个儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//这个儿子存在 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//失配后回根节点 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入到队列中 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断节点是否找完 </span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取队头元素 </span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹掉队头 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找当前节点所有儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//这个节点确实有儿子 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的儿子的失配指针 指向 这个节点的失配指针指向的节点的儿子</span><span class="token comment">//类似于 KMP 的失配指针存法 </span><span class="token comment">//换个想法：在原串找的时候是顺着一条子串走的，但是有可能有其他字串有相同的部分，失配指针就是用来串道的 </span><span class="token comment">//这样保证了原串只用跑一遍 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新节点收入队列 </span><span class="token punctuation">}</span><span class="token keyword">else</span> a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的失配指针指向的节点的儿子 是 这个节点的儿子 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>失配指针主要作用还是“串道”和“KMP失配指针”。</p><p>能匹配到这一步，就已经有了匹配到这里的资格。</p><h4 id="统计字符串在原串中出现的次数"><a href="#统计字符串在原串中出现的次数" class="headerlink" title="统计字符串在原串中出现的次数"></a>统计字符串在原串中出现的次数</h4><p>注意判断字符串结束统计，及时换道。</p><p>失配指针也可以理解成邻接表相似的作用。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">f_a_c</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//统计字符串在原串中出现的次数 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原串长度 </span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化遍历节点下标 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//每个字符都从字典树根找一遍</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顺次往下找 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span>n_w<span class="token punctuation">;</span>t<span class="token punctuation">;</span>t<span class="token operator">=</span>a_c<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">)</span><span class="token comment">//直接跳到失配指针，类似于 KMP 的失配指针</span>a_s<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//如果是结束标记，因为已经标记了是哪个串的（见建字典树部分）所以直接统计 +1 即可。 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点（26个字母） </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span><span class="token keyword">int</span> n_m<span class="token punctuation">;</span><span class="token comment">//存字符串在 </span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//原串的下标 </span><span class="token punctuation">}</span>a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>pp a<span class="token punctuation">,</span>pp b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>n_m<span class="token operator">==</span>b<span class="token punctuation">.</span>n_m<span class="token operator">?</span>a<span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>i_d<span class="token operator">:</span>a<span class="token punctuation">.</span>n_m<span class="token operator">&gt;</span>b<span class="token punctuation">.</span>n_m<span class="token punctuation">;</span><span class="token comment">//多的靠前，一样多的按下标，小的靠前 </span><span class="token punctuation">}</span>string s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存字符串 </span><span class="token keyword">int</span> x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//为字典树开辟的新节点赋予下标 </span><span class="token keyword">void</span> <span class="token function">yv</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//清空字典树的某个节点 </span><span class="token function">memset</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">)</span><span class="token punctuation">;</span>a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//要建的字符串长度 </span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历每一位 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果没有这个节点 </span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//建立这个节点 </span><span class="token function">yv</span><span class="token punctuation">(</span>x_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化这个节点（多测清空） </span><span class="token punctuation">}</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顺次往下找 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//结束标记是哪个字符串 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token comment">//存要找适配指针的节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历根节点每个儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//这个儿子存在 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//失配后回根节点 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入到队列中 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断节点是否找完 </span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取队头元素 </span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹掉队头 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找当前节点所有儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//这个节点确实有儿子 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的儿子的失配指针 指向 这个节点的失配指针指向的节点的儿子</span><span class="token comment">//类似于 KMP 的失配指针存法 </span><span class="token comment">//换个想法：在原串找的时候是顺着一条子串走的，但是有可能有其他字串有相同的部分，失配指针就是用来串道的 </span><span class="token comment">//这样保证了原串只用跑一遍 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新节点收入队列 </span><span class="token punctuation">}</span><span class="token keyword">else</span> a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的失配指针指向的节点的儿子 是 这个节点的儿子 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_a_c</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//统计字符串在原串中出现的次数 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原串长度 </span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化遍历节点下标 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//每个字符都从字典树根找一遍</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顺次往下找 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span>n_w<span class="token punctuation">;</span>t<span class="token punctuation">;</span>t<span class="token operator">=</span>a_c<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">)</span><span class="token comment">//直接跳到失配指针，类似于 KMP 的失配指针</span><span class="token comment">//同样一句话：既然匹配到这，就有匹配到这的资格 </span>a_s<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//如果是结束标记，因为已经标记了是哪个串的（见建字典树部分）所以直接统计 +1 即可。 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//多测 </span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//子串的个数 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//多测终止条件 </span>x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span><span class="token function">yv</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空字典树根节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入字符串 </span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//存坐标（第几个答案）</span><span class="token function">b_t</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串建到字典树上 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化跟节点适配指针 </span><span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历失配指针 </span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入要查询的串 </span><span class="token function">f_a_c</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到每个子串在原串的出现次数 </span><span class="token function">sort</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a_s<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出现次数排序（按题目要求） </span>cout<span class="token operator">&lt;&lt;</span>a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出出现最多的字符串出现了几次 </span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//按顺序输出 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">==</span>a_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//从大到小排的序。若不同，不符合条件 </span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字典树 </tag>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分块&amp;莫队</title>
      <link href="/2021/09/04/fen-kuai-mo-dui/"/>
      <url>/2021/09/04/fen-kuai-mo-dui/</url>
      
        <content type="html"><![CDATA[<h3 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h3><p>首先介绍一下分块。</p><p>分块的思想很暴力，但是是有技巧的暴力。分块有时候还要靠运气和玄学。也有线段树的思想。</p><p>分块的用法：</p><p>数组：$1,2,3,3,2,1,2,3,6,2$</p><p>下标：$1,2,3,4,5,6,7,8,9,10$</p><p>现在要将区间 $[2,7]$ 求和，我们可以用<a href="https://wdsa001.github.io/2021/08/09/xian-duan-shu/">线段树</a>求区间,也可以用前缀和直接算。但这里我们用分块来做一下。</p><p>首先我们定一下每个块的长度（不一定整分总区间），例如我们定块长为 $3$，首先预处理出每个块的基础信息。<br>按题目要求处理。在这里，我们处理出每个区间的长度。</p><p>数组：$1,2,3,3,2,1,2,3,6,2$</p><p>下标：$1,2,3,4,5,6,7,8,9,10$（方便表示下标从 $1$ 开始）</p><p>分块：$6[1,3],6[4,6],11[7,9],2[10,12]$（所以开始时数组定义尽量要大一些）</p><p>然后我们可以知道，询问边界两个数分别属于 $1,3$ 区间，$2\in[1,3]$，$7\in[7,9]$。这时，我们可以先加上两者之间的块，就是第 $2$ 个块。接着，从询问左区间 $2$ 暴力枚举到当前块的结尾也就是原数组中下标为 $3$ 的数暴力加和（$[2,3]$）；再从询问右区间的块初枚举到询问的地方加和即可（$[7,7]$）。</p><p>和线段树的区间维护非常像，但是它没有线段树写的那么复杂，而且它比线段树的用法多一些，方便。缺点就是块长很死板。</p><h3 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h3><p>在区间暴力优化中，经常用到分块和莫队。</p><p>莫队的优化在于对询问进行排序，然后下次询问在上次询问的基础上略作删减搞出结果，而非重新开始。什么意思呢，举个例子。</p><p>数组：$1,2,3,3,2,1,2,3,6,2$</p><p>下标：$1,2,3,4,5,6,7,8,9,10$（我们还用上边的例子）</p><p>询问区间：$[1,5],[2,6],[3,6]$ 的和。</p><p>我们可以发现在查询 $[1,5]$ 了之后，我们可以不重新开始查询 $[2,6]$，我们可以先将上一个询问存的数组处理成 $[2,5]$，在加上最后一位，就可以直接找出结果了。第三个区间同理。这里不再赘述运行原理，感兴趣的可以看看<a href="https://wdsa001.github.io/2021/08/09/p1494/">这里</a>。</p><p>莫队很好被卡掉，比如下面的几组询问：$[1,3],[4,6],[7,10]$。它们没有交集，所以时间复杂度反而上升，但是在随机数据面前还是很好用的。</p><h3 id="莫队-分块"><a href="#莫队-分块" class="headerlink" title="莫队+分块"></a>莫队+分块</h3><p>没错，既然两者都是对区间优化，那么用得好就可以相辅相成。先来看道题。</p><p><a href="https://www.luogu.com.cn/problem/P4137">P4137 Rmq Problem / mex</a></p><p>要找的是区间没有出现过的最小<strong>自然数</strong>，要从 $0$ 开始找。</p><h4 id="分块询问区间"><a href="#分块询问区间" class="headerlink" title="分块询问区间"></a>分块询问区间</h4><p>先看一下变量与常量的定义与意义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span><span class="token comment">//数组的大小 </span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">501</span><span class="token punctuation">;</span><span class="token comment">//块长 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token comment">//数的个数，询问次数 </span><span class="token keyword">int</span> k_k<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//询问分块初始化，原数组 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//存询问 </span>  <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>id<span class="token punctuation">;</span><span class="token comment">//询问的走右边界和编号 </span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_m<span class="token punctuation">[</span><span class="token number">501</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//每个块中不同数字的个数，结果 </span><span class="token keyword">int</span> b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录数出现的次数 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来看块的预处理。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> l_n<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//预定块长 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原数组</span>    <span class="token comment">//一定比n+1小，否则一定不会被考虑到 </span>    k_k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>l_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化分块询问 </span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//查询信息存储 </span><span class="token function">sort</span><span class="token punctuation">(</span>p_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p_p<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么要处理块的询问呢？</p><p>在题目中，我们可以知道可能有 $2\times10^5$ 的询问次数，而对它们全部按照普通的莫队区间排序，时间复杂度会很高，所以可以让它们先大致排序一下再处理即可。按左边界所在的块前后排序。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k_k<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">==</span>k_k<span class="token punctuation">[</span>b<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//小优化 数太多，完全排好时间过大，所以按块排，草草排个大概就可以 </span>      <span class="token keyword">if</span><span class="token punctuation">(</span>k_k<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//奇数从小到大 </span>      <span class="token keyword">else</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&gt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//偶数从大到小 </span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> k_k<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>k_k<span class="token punctuation">[</span>b<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//从小到大</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中用了一个小优化。（为了方便理解，我们用正常的莫队排序演示。）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>l<span class="token operator">==</span>b<span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>l<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&gt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>l<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们用下面几组询问：$[1,2],[1,3],[1,4],[2,3],[2,4],[2,1],[3,4],[3,6]$</p><p>根据我们刚刚所说的先按左边询问排序（已排好序），但是右边我们一直没有介绍应该怎么排序。大部分都会跟左边一样从小到大这样有顺序右边界不会来回伸缩。但是，要想跟快的话，应该是分奇偶排序，比如下面这样。</p><p>$[1,2],[1,3],[1,4],[2,4],[2,3],[2,1],[3,4],[3,6]$</p><p>不难看出“奇升偶降”的规律，搜寻时进一步减少了伸缩次数。但是也可以被卡，比如左询问全奇，但是和右边也从小到大的排序效果是一样的。</p><h4 id="莫队查询，分块统计"><a href="#莫队查询，分块统计" class="headerlink" title="莫队查询，分块统计"></a>莫队查询，分块统计</h4><p>莫队基础操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//初始化莫队</span>  <span class="token keyword">int</span> l<span class="token operator">=</span>p_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>r<span class="token operator">=</span>p_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//初始化走右边界 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最小没出现的自然数 </span>  <span class="token comment">//初始化完毕 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//莫队操作 </span>      <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token function">d_l</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左边回缩 </span>      <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">--</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左边延长 </span>      <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右边延长 </span>      <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&gt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token function">d_l</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右边回缩 </span>      <span class="token function">f_i</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最小没出现的自然数 </span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要介绍增加，减少和查询的操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//增加操作 </span>  <span class="token keyword">int</span> k_x<span class="token operator">=</span>x<span class="token operator">/</span>m_a<span class="token punctuation">;</span><span class="token comment">//分块记录 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>n_m<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//这个块中不同的数增加 </span>    b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//记录数出现的次数 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删除操作 </span>  <span class="token keyword">int</span> k_x<span class="token operator">=</span>x<span class="token operator">/</span>m_a<span class="token punctuation">;</span><span class="token comment">//分块记录 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>n_m<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//这个块中不同的数减少 </span>    b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//记录数出现的次数 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//查询 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举第几个块 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n_m<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>m_a<span class="token punctuation">)</span><span class="token comment">//若n_m[i-1]==m_a说明这部分块中所有的数都已经出现过了 </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>m_a<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token operator">*</span>m_a<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//块长间查找 </span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找到结果 </span>                    a_s<span class="token punctuation">[</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment">//保存结果 </span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们统计每个块中不同的数的个数，如果数量和块长一样，那么这个块中一定没有未出现过的数，所以统计每个块中未出现过的数即可。</p><p>查询的时候，如果一个区间内不同数的数量小于块长，那么一定有未出现的数字，直接用块的两端为查找区间，暴力搜即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">501</span><span class="token punctuation">;</span><span class="token comment">//块长 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token comment">//数的个数，询问次数 </span><span class="token keyword">int</span> k_k<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//询问分块初始化，原数组 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//存询问 </span>  <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>id<span class="token punctuation">;</span><span class="token comment">//询问的走右边界和编号 </span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k_k<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">==</span>k_k<span class="token punctuation">[</span>b<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//小优化 数太多，完全排好时间过大，所以按块排，草草排个大概就可以 </span>      <span class="token keyword">if</span><span class="token punctuation">(</span>k_k<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//奇数从小到大 </span>      <span class="token keyword">else</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&gt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//偶数从大到小 </span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> k_k<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>k_k<span class="token punctuation">[</span>b<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n_m<span class="token punctuation">[</span><span class="token number">501</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录数出现的次数 </span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//增加操作 </span>  <span class="token keyword">int</span> k_x<span class="token operator">=</span>x<span class="token operator">/</span>m_a<span class="token punctuation">;</span><span class="token comment">//分块记录 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>n_m<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//这个块中不同的数增加 </span>    b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//记录数出现的次数 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删除操作 </span>  <span class="token keyword">int</span> k_x<span class="token operator">=</span>x<span class="token operator">/</span>m_a<span class="token punctuation">;</span><span class="token comment">//分块记录 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>n_m<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//这个块中不同的数减少 </span>    b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//记录数出现的次数 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举第几个块 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n_m<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>m_a<span class="token punctuation">)</span><span class="token comment">//若n_m[i-1]==m_a说明这部分块中所有的数都已经出现过了 </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>m_a<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token operator">*</span>m_a<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//块长间查找 </span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找到结果 </span>                    a_s<span class="token punctuation">[</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment">//保存结果 </span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l_n<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//预定块长 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原数组</span>    <span class="token comment">//一定比n+1小，否则一定不会被考虑到 </span>        k_k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>l_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化分块询问 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//查询信息存储 </span>    <span class="token function">sort</span><span class="token punctuation">(</span>p_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p_p<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序 </span>  <span class="token comment">//初始化莫队</span>    <span class="token keyword">int</span> l<span class="token operator">=</span>p_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>r<span class="token operator">=</span>p_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//初始化走右边界 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最小没出现的自然数 </span>    <span class="token comment">//初始化完毕 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//莫队操作 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token function">d_l</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左边回缩 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">--</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左边延长 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右边延长 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&gt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token function">d_l</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右边回缩 </span>        <span class="token function">f_i</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最小没出现的自然数 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按询问顺序输出 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 莫队 </tag>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>manacher 算法</title>
      <link href="/2021/09/03/manacher-suan-fa/"/>
      <url>/2021/09/03/manacher-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="manacher算法"><a href="#manacher算法" class="headerlink" title="manacher算法"></a>manacher算法</h3><p><a href="https://www.luogu.com.cn/problem/P3805">P3805 【模板】manacher 算法</a></p><p>计算回文长度时，一般用 <code>manacher</code> 算法，回文串长度可以是奇数也可以是偶数，<code>mamacher</code> 算法在存的时候克服了这个问题。</p><p>字符串：<code>abba</code>，<code>ababa</code></p><p>不难看出两个字符串都是回文串，第二个回文串直接找到回文中心就可以了判了，但是第一个就有点棘手。</p><p><code>manacher</code> 算法将所有相邻的字符之间补上一个字符，直接找对称中心就行了。</p><p>如果一个回文串长度为 $n$。</p><ul><li>假如 $n$ 是奇数，那么有 $n-1$ 个间隔，增加了偶数个字符。</li><li>假如 $n$ 是偶数，同样有 $n-1$ 个间隔，增加了奇数个字符。</li></ul><p>显然，偶数加奇数是奇数，所以一定有对称中心。</p><h3 id="对称"><a href="#对称" class="headerlink" title="对称"></a>对称</h3><p>保证有了对称中心，就可以通过枚举对称中心两边比对来找回文串即可。</p><p>但是 <code>manacher</code> 的精髓不仅于此。</p><p>我们将对称中心的回文长度存到 <code>h_w[i]</code> 中，原字符串是 <code>a_a</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token operator">+</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>a_a<span class="token punctuation">[</span>i<span class="token operator">-</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//两边辐射 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们通过枚举两边可以知道回文串的长度，但是在记录的过程中我们也可以用到它对称的特性，</p><p>举个例子：<code>qwertrewqwertrewq</code></p><p>这个回文串有两个回文子串：<code>qwertrewq</code>，如果我们单纯的考暴力枚举的话，找到所有的回文串要将所有的字枚举为回文中心，并枚举回文长度，来计算。</p><p>但是当我们枚举回文中心时，枚举完第一个回文串（<code>qwertrewq</code>）和第二个回文串时（<code>qwertrewqwertrewq</code>）。根据对称这一特性，我们其实已经可以断言第三个回文串（<code>qwertrewq</code>）的存在了。</p><p>所以当我们枚举到第三个回文串的对称中心时可以直接从第一个回文串那里获得基本信息，再向两边遍历查找（有可能在大回文串外的字符和串里的字符仍然回文）。</p><p>例子：<code>qwerewqwerewqwe</code></p><p>我们可以发现，我们可以从第一个 <code>qwerewq</code> 和 <code>qwerewqwerewq</code> 断言第二个 <code>qwerewq</code> 的存在，并在第一个串中获得基本信息：回文长度，但是并没有结束，因为它的极限是 <code>ewqwerewqwe</code>，所以还要继续判断。</p><h3 id="manacher的优化程度"><a href="#manacher的优化程度" class="headerlink" title="manacher的优化程度"></a>manacher的优化程度</h3><p>在上面的例子中我们发现 <code>manacher</code> 的优化就是一个获得信息。</p><p>对于大数据用这种优化和暴力相比复杂度应该不大吧？还不如暴力记得方便？</p><p>我们上面举的例子都是“相对友好的”，看看那下面的两个例子。</p><p>例子：<code>qwqwqwqwqwq</code> 和 <code>qqqqqq</code></p><p>我们把它们延长几万倍，暴力和 <code>manacher</code> 的差距就对比出来了。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>h_w<span class="token punctuation">[</span>m_i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对称找最大回文 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为信息要传大回文串里的所以要注意不能超过大回文串的回文中心。</p><p>例子：<code>ewqwerewqwerewq</code></p><p>所以第二个 <code>qwerewq</code> 只能保留第一个 <code>qwerewq</code>的信息，而非 <code>ewqwerewqwe</code> 的，所以这里用一个 <code>min</code>，来规范边界。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">3e7</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>string a<span class="token punctuation">;</span><span class="token keyword">char</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> l_a<span class="token punctuation">,</span>m_a<span class="token punctuation">;</span><span class="token keyword">int</span> h_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a_a<span class="token punctuation">[</span>l_a<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'@'</span><span class="token punctuation">;</span>a_a<span class="token punctuation">[</span>l_a<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token string">'a'</span><span class="token operator">||</span>c<span class="token operator">&gt;</span><span class="token string">'z'</span><span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&gt;=</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a_a<span class="token punctuation">[</span>l_a<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span>    a_a<span class="token punctuation">[</span>l_a<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>l_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>h_w<span class="token punctuation">[</span>m_i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对称找最大回文 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token operator">+</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>a_a<span class="token punctuation">[</span>i<span class="token operator">-</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//两边辐射 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token operator">&gt;</span>r<span class="token punctuation">)</span>r<span class="token operator">=</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//快速跳边界 </span>    m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录最长</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>m_a<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 模板 </tag>
            
            <tag> manacher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP 算法</title>
      <link href="/2021/09/03/kmp-suan-fa/"/>
      <url>/2021/09/03/kmp-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><p>用于快速找子串在原串中的位置和次数。</p><p><a href="https://www.luogu.com.cn/problem/P3375">P3375 【模板】KMP字符串匹配</a></p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>先处理原串，初始化 <code>kmp</code> 数组。从头开始匹配，如果匹配成功下标存匹配成功的下标后一个，否则再向回找。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">举个例子：子串 ABCABCDKMP  0001230<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不难发现，初始化 <code>kmp</code> 时第二个 $A$ 的下表是 $1$,第二个 $B$ 的下标是 $2$，这么存的原因是如果前面几位都匹配成功，下一位突然匹配失败，会从下标的地方继续而不是重新开始，这也是 <code>KMP</code> 的算法的核心思想。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">举个有代表性的例子：原串 ABCEFDABCEFDABCD子串 ABCEFDABCDKMP  0000001230<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>前几位都可以和原串匹配成功，但是在第 $10$ 位（$1$ 为第一位）失配了。</p><ul><li>如果是原来的暴力算法，那么会从第二位从新一点点匹配，第二位不行，第三位不行……第七位成功了，输出。</li><li>但是现在可以直接从失配位置的下标继续匹配，第一次失败后会直接从 $3$ 的 <code>kmp</code> 下标开始继续匹配，但原数组的匹配位置不变。</li></ul><p>到匹配完成时 ，<code>kmp</code> 的方法使原串每位只比对了一次，效率大大提升。</p><h3 id="为什么失配直接回到下标继续匹配？"><a href="#为什么失配直接回到下标继续匹配？" class="headerlink" title="为什么失配直接回到下标继续匹配？"></a>为什么失配直接回到下标继续匹配？</h3><p>这和 <code>kmp</code> 的初始化有关，在初始化的时候，我们就比对了失配位置。比对时就是用当前下标从头开始比对的。</p><p>通俗一点：能匹配到这一步，就已经有了匹配到这里的资格。</p><p>再看上边的例子。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">例子：子串 ABCABCDKMP  0001230<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>能匹配到第 $5$ 位（$B$），假设下一位未匹配失败了，但是还是有回到第 $3$ 位的资格，因为前面已经匹配成功。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">char</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原串，子串 </span><span class="token keyword">int</span> l_a<span class="token punctuation">,</span>l_b<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> kmp<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>a_a<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span>b_b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  l_a<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>a_a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原串长度 </span>  l_b<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>b_b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//子串长度 </span>  k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>l_b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理子串 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&amp;&amp;</span>b_b<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>b_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>k<span class="token operator">=</span>kmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//失配，回到失配指向的下标 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>b_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//匹配成功，继续匹配 </span>    kmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//标记失配下标 </span>  <span class="token punctuation">}</span>  k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>l_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理原串 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&amp;&amp;</span>b_b<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>k<span class="token operator">=</span>kmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//失配，回到失配指向的下标 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//匹配成功，继续匹配 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l_b<span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//匹配完成 </span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">-</span>l_b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出 </span>      k<span class="token operator">=</span>kmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//回到失配下标 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>l_b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>kmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 KMP 失配下标 </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*ABCEFDABCEFDABCDABCEFDABCD*/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 模板 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态仙人掌</title>
      <link href="/2021/09/01/jing-tai-xian-ren-zhang/"/>
      <url>/2021/09/01/jing-tai-xian-ren-zhang/</url>
      
        <content type="html"><![CDATA[<h3 id="静态仙人掌"><a href="#静态仙人掌" class="headerlink" title="静态仙人掌"></a>静态仙人掌</h3><p><a href="https://www.luogu.com.cn/problem/P5236">静态仙人掌（模板）</a></p><p>仙人掌定义：对一个无向连通图，任意一条边属于至多一个简单环。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>每个询问是两点之间的最短路，我们求最短路一般都是在树型结构上，而仙人掌图会存在环，但是每条边最多在一个环中，所以环不会互相影响，我们要对这些环做一些处理。</p><p>我们把每个环重新建为方点，而原来图上的点叫做原点。（圆方树的思想）。这样就可以直接做最短路了。</p><h3 id="找环，建方点"><a href="#找环，建方点" class="headerlink" title="找环，建方点"></a>找环，建方点</h3><p><strong>一点个人理解：环变成的方点并不是真的变成了一个点，而是将整个环封装成一个点。每回访问的时候，只访问其中两个点的最短距离，所以可以预处理出来整个环的长度，和环上每个点到某个点的长度。最短距离就可以直接求出来（后面会有说明）。</strong></p><p>找环，缩点。可以用 <code>tarjan</code> 实现。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">t_j</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//缩点，连边 </span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_x<span class="token punctuation">;</span><span class="token comment">//时间戳 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>k<span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token function">t_j</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">!=</span>f<span class="token punctuation">)</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&gt;</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理环外的点的连边 </span><span class="token function">a_dd</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_dd</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理环上的点的连边 </span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">==</span>k<span class="token operator">||</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&lt;=</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">a_t</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//“封装”的方点 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缩点的时候同时将原来的边在新图上连出来。注意环上的点之间的连边特殊处理（就是建方点）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理环，连方节点到环的每个点 </span>n_p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">int</span> l_l<span class="token operator">=</span>l<span class="token punctuation">,</span>i<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存整个环的大小 </span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>l_l<span class="token punctuation">;</span><span class="token comment">//到先遍历的点的距离 </span>l_l<span class="token operator">+=</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>i<span class="token operator">=</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//因为是个环，所以找父节点找到最后就是最开始的那个点 </span><span class="token punctuation">}</span>q_q<span class="token punctuation">[</span>n_p<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//赋方节点初值 </span>i<span class="token operator">=</span>v<span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_x<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>n_x<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>n_p<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">-</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//环两边走法，那个近存那个 </span><span class="token function">a_dd</span><span class="token punctuation">(</span>n_p<span class="token operator">+</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>n_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方节点和其它点连边 </span><span class="token function">a_dd</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n_p<span class="token operator">+</span>n<span class="token punctuation">,</span>n_x<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">=</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="公共祖先LCA"><a href="#公共祖先LCA" class="headerlink" title="公共祖先LCA"></a>公共祖先LCA</h3><p>这里可以用倍增和树链剖分两种算法，倍增会更快，但是树链剖分处理更方便。所以这里使用树链剖分解法。（建图虽然有些麻烦，但是处理会非常方便，也更加灵活）</p><p><a href="https://wdsa001.github.io/2021/08/31/shu-lian-pou-fen/">树链剖分</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span><span class="token comment">//存点 </span><span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token comment">//父节点 </span><span class="token keyword">int</span> t_p<span class="token punctuation">;</span><span class="token comment">//链顶 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//边转点的价值 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//在环中和最先遍历的点的距离（时间戳最小的点） </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//子树和它的重量 </span><span class="token keyword">int</span> d_p<span class="token punctuation">;</span><span class="token comment">//深度 </span><span class="token keyword">int</span> b_s<span class="token punctuation">;</span><span class="token comment">//重儿子 </span><span class="token keyword">int</span> l_g<span class="token punctuation">;</span><span class="token comment">//到根节点的距离 </span><span class="token punctuation">}</span>q_q<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意要多存一个每个节点到根节点的距离。方便算最短路的距离。</p><h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><p>先找两个点的公共祖先。</p><p>如果在原点上直接输出两个点分别到根节点的距离减去两倍的公共祖先到根节点的距离即可。</p><p>否则，找到两个点分别到“封装”的方点最近的点（就是两个点最短进入环的那两个点）。将两个点的路长度先记上，再加上“封装”好的环中直接计算得到的最短长度。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">g_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> g_f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>g_f<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">+</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>q_q<span class="token punctuation">[</span>g_f<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若公共祖先在圆点上，直接用两点到跟的距离减公共祖先到根的距离的两倍即可 </span><span class="token keyword">int</span> h_a<span class="token operator">=</span><span class="token function">f_h</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>g_f<span class="token punctuation">)</span><span class="token punctuation">,</span>h_b<span class="token operator">=</span><span class="token function">f_h</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>g_f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//找到入环的点 </span><span class="token keyword">int</span> a_s<span class="token operator">=</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">+</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token punctuation">;</span><span class="token comment">//先记上两点到环的距离 </span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>h_a<span class="token punctuation">,</span>h_b<span class="token punctuation">)</span><span class="token punctuation">;</span>a_s<span class="token operator">+=</span><span class="token function">min</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>g_f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//环上两条路，两点最小距离 </span><span class="token keyword">return</span> a_s<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“封装”的方点本身其实是一个已经处理好的环，但是在图上可以看做点来遍历。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//存边 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">;</span><span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>p_pp<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>h_dd<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">,</span>x_pp<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>q<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//原图边 </span>p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> l_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>d_f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_x<span class="token punctuation">;</span><span class="token comment">//tarjan的时间戳和最小能到达时间的戳标记 </span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span><span class="token comment">//存点 </span><span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token comment">//父节点 </span><span class="token keyword">int</span> t_p<span class="token punctuation">;</span><span class="token comment">//链顶 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//边转点的价值 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//在环中和最先遍历的点的距离（时间戳最小的点） </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//子树和它的重量 </span><span class="token keyword">int</span> d_p<span class="token punctuation">;</span><span class="token comment">//深度 </span><span class="token keyword">int</span> b_s<span class="token punctuation">;</span><span class="token comment">//重儿子 </span><span class="token keyword">int</span> l_g<span class="token punctuation">;</span><span class="token comment">//到根节点的距离 </span><span class="token punctuation">}</span>q_q<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_p<span class="token punctuation">;</span><span class="token comment">//方节点编号 </span><span class="token keyword">void</span> <span class="token function">a_dd</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//新图边 </span>p_pp<span class="token punctuation">[</span><span class="token operator">++</span>x_pp<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>p_pp<span class="token punctuation">[</span>x_pp<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>p_pp<span class="token punctuation">[</span>x_pp<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_dd<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>h_dd<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_pp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理环，连方节点到环的每个点 </span>n_p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">int</span> l_l<span class="token operator">=</span>l<span class="token punctuation">,</span>i<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存整个环的大小 </span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>l_l<span class="token punctuation">;</span><span class="token comment">//到先遍历的点的距离 </span>l_l<span class="token operator">+=</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>i<span class="token operator">=</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span>q_q<span class="token punctuation">[</span>n_p<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//赋方节点初值 </span>i<span class="token operator">=</span>v<span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_x<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>n_x<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>n_p<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">-</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//环两边走法，那个近存那个 </span><span class="token function">a_dd</span><span class="token punctuation">(</span>n_p<span class="token operator">+</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>n_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方节点和其它点连边 </span><span class="token function">a_dd</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n_p<span class="token operator">+</span>n<span class="token punctuation">,</span>n_x<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">=</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">t_j</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span> l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_x<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>k<span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token function">t_j</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">!=</span>f<span class="token punctuation">)</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&gt;</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理环外的点 </span><span class="token function">a_dd</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_dd</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理环上的点 </span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">==</span>k<span class="token operator">||</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&lt;=</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">a_t</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span> q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>f<span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_dd<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token operator">=</span>p_pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">=</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">=</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">+</span>p_pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token function">d_1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+=</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">&gt;</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> t_p<span class="token punctuation">)</span><span class="token punctuation">{</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">=</span>t_p<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">)</span><span class="token function">d_2</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">,</span>t_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_dd<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token operator">=</span>p_pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">||</span>v<span class="token operator">==</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">d_2</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找公共祖先 </span><span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&gt;</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a_s<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//点进入公共祖先的链 </span>a_s<span class="token operator">=</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">;</span>a<span class="token operator">=</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//如果这条链的链顶的父亲是公共祖先链的链顶，那返回这个点 </span><span class="token keyword">else</span> <span class="token keyword">return</span> q_q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">;</span><span class="token comment">//否则返回共公祖先的重儿子节点 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">g_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> g_f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>g_f<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">+</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>q_q<span class="token punctuation">[</span>g_f<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若公共祖先在圆点上，直接用两点到跟的距离减公共祖先到根的距离的两倍即可 </span><span class="token keyword">int</span> h_a<span class="token operator">=</span><span class="token function">f_h</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>g_f<span class="token punctuation">)</span><span class="token punctuation">,</span>h_b<span class="token operator">=</span><span class="token function">f_h</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>g_f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//找到入环的点 </span><span class="token keyword">int</span> a_s<span class="token operator">=</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">+</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token punctuation">;</span><span class="token comment">//先记上两点到环的距离 </span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>h_a<span class="token punctuation">,</span>h_b<span class="token punctuation">)</span><span class="token punctuation">;</span>a_s<span class="token operator">+=</span><span class="token function">min</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>g_f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//环上两条路，两点最小距离 </span><span class="token keyword">return</span> a_s<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">t_j</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理环，建新图 </span><span class="token comment">//树链剖分 </span><span class="token function">d_1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">d_2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a_b<span class="token operator">=</span><span class="token function">g_f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">g_m</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>a_b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 最近公共祖先 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 强联通分量 </tag>
            
            <tag> 仙人掌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树链剖分</title>
      <link href="/2021/08/31/shu-lian-pou-fen/"/>
      <url>/2021/08/31/shu-lian-pou-fen/</url>
      
        <content type="html"><![CDATA[<h3 id="树链剖分介绍"><a href="#树链剖分介绍" class="headerlink" title="树链剖分介绍"></a>树链剖分介绍</h3><p><a href="https://www.luogu.com.cn/problem/P3384">轻重链剖分/树链剖分(模板)</a></p><p>常见题目，已知一棵包含 $N$ 个结点的树（连通且无环），每个节点上包含一个数值，需要支持以下操作：</p><ul><li>$1$ $x$ $y$ $z$，表示将树从 $x$ 到 $y$ 结点最短路径上所有节点的值都加上 $z$。</li><li>$2$ $x$ $y$，表示求树从 $x$ 到 $y$ 结点最短路径上所有节点的值之和。</li><li>$3$ $x$ $z$，表示将以 $x$ 为根节点的子树内所有节点值都加上 $z$。</li><li>$4$ $x$ 表示求以 $x$ 为根节点的子树内所有节点值之和</li></ul><h3 id="操作分析"><a href="#操作分析" class="headerlink" title="操作分析"></a>操作分析</h3><p>操作 $1$，$2$非常像线段树的区间和，区间查询操作。而操作 $3$，$4$用线段树也可以实现，但是肯定要给他们一种特殊的存储和特殊的查询。</p><p><a href="https://wdsa001.github.io/2021/08/09/xian-duan-shu/">线段树(先复习一下线段树)</a></p><h3 id="特殊的存储——剖分"><a href="#特殊的存储——剖分" class="headerlink" title="特殊的存储——剖分"></a>特殊的存储——剖分</h3><p>首先介绍几个名词：重儿子，重边，轻儿子，轻链，轻边，重链。</p><ul><li>重儿子：每个节点所有子节点中，儿子最多的节点。</li><li>重边：节点和重儿子连的边。</li><li>轻儿子：除了重儿子，其他子节点。</li><li>轻边：节点和轻儿子连的边。</li><li>重链：连续的重边连成的链。</li><li>轻链：连续的轻边连成的链。</li></ul><h4 id="存储节点状态"><a href="#存储节点状态" class="headerlink" title="存储节点状态"></a>存储节点状态</h4><p>关于节点，我们要存：父节点，节点大小（重量），重儿子，深度，链头，新编号。</p><ul><li>链头：重链中，最靠近根节点的节点。</li><li>新编号：我们要用线段树维护，所以要根据重链重新个所有节点附一个新的编号，将重链上的节点都变成连续的编号，可以方便区间操作。</li></ul><p>我们可以跑两遍深搜，来处理所有存储信息。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">,</span><span class="token keyword">int</span> d_p<span class="token punctuation">)</span><span class="token punctuation">{</span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">=</span>d_p<span class="token punctuation">;</span><span class="token comment">//节点深度 </span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>f<span class="token punctuation">;</span><span class="token comment">//存父节点 </span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//节点大小（重量）初值 </span>  <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//找重儿子 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>     <span class="token function">d_1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">,</span>d_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历儿子 </span>    q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+=</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">;</span><span class="token comment">//更新当前节点重量 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_a<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span>m_a<span class="token operator">=</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//更新重儿子 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>节点深度：方便后面找操作 $1$，$2$ 最近公共祖先。</li></ul><p>要先找到所有的重儿子，才能找到重链。<br></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">d_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> t_p<span class="token punctuation">)</span><span class="token punctuation">{</span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">=</span>t_p<span class="token punctuation">;</span><span class="token comment">//链头 </span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span><span class="token operator">++</span>x_n<span class="token punctuation">;</span><span class="token comment">//赋新节点编号 </span>  n_w<span class="token punctuation">[</span>x_n<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用新节点存储当前节点的价值 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//没有种儿子，说明没有儿子 </span>  <span class="token function">d_2</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">,</span>t_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先遍历重儿子，形成重链 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">||</span>v<span class="token operator">==</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//重儿子已经遍历过 </span>    <span class="token function">d_2</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//轻儿子是新重链的链头 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><h4 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h4><p>点的基础信息存完后就可以开始根据新节点编号建树。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>n_w<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用新编号存储节点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&gt;</span>p<span class="token punctuation">)</span>t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>n_w<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">%</span>o_o<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经典的线段树建树操作。</p><h3 id="处理操作"><a href="#处理操作" class="headerlink" title="处理操作"></a>处理操作</h3><p><del>操作中的的线段树经典操作太长就不放了。</del></p><h4 id="操作一"><a href="#操作一" class="headerlink" title="操作一"></a>操作一</h4><p>两点的路径上的加处理，我们可以根据提前存的链来处理。因为每个重链的节点编号是连续的，所以可以不断遍历这些重链，再用线段数的区间加操作就行。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>  v<span class="token operator">%=</span>p<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//链头不相等（不在同一个链上） </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//深度更深的链先处理区间加 </span>    <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理范围：链头编号到当前节点编号 </span>    l<span class="token operator">=</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//更新范围，变成链头的父亲，进入新链 </span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&gt;</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同一个链上直接处理编号就行 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作二"><a href="#操作二" class="headerlink" title="操作二"></a>操作二</h4><p>两点上的历经求和处理，和加处理相似，通过重链遍历，直接套线段树的区间求和就行。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">s_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间和 </span>  <span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果初始化 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//链头不相等（不在同一个链上） </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//深度更深的链先处理区间和 </span>    r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果赋初值 </span>    <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理范围：链头编号到当前节点编号 </span>    a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span>r_s<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//累加重链结果 </span>    l<span class="token operator">=</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//更新范围，变成链头的父亲，进入新链 </span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&gt;</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>  <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同一个链上直接处理编号</span>  a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span>r_s<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新 </span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作三"><a href="#操作三" class="headerlink" title="操作三"></a>操作三</h4><p>子树全体增值，先放代码再解释。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_z</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//由于按重儿子遍历，且先遍历重链，所以编号是先跟着重链遍历到树底，在回溯的顺序赋予轻节点编号。</span>  <span class="token comment">//所以每个节点的子树的编号是连续的，可以用它的编号到它的编号加它的大小减一的区间进行操作。 </span>  <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">+</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举个例子：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    1   / <span class="token function selector">\</span>  /   <span class="token function selector">\</span> /     <span class="token function selector">\</span>2       3       / <span class="token function selector">\</span>      /   <span class="token function selector">\</span>     4     5    /     / <span class="token function selector">\</span>   6     7   8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们给它剖一下。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">             1新编号：     1            / <span class="token function selector">\</span>           /   <span class="token function selector">\</span>          /     <span class="token function selector">\</span>         2       3新编号： 8        2                / <span class="token function selector">\</span>               /   <span class="token function selector">\</span>              4     5新编号：      6      3             /     / <span class="token function selector">\</span>            6     7   8新编号：    7     4    5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们不难发现没个子数的所有编号都是连续的。<br>比如：节点 $3$ 的子树编号 $[3,5]$，节点 $2$ 的子树编号 $[2,7]$。</p><p>原因在于存点的编号是按重链优先的，所以编号一定是先跑到树底，才从树底慢慢往回跑赋的值，所以树的节点都是连续的。</p><h4 id="操作四"><a href="#操作四" class="headerlink" title="操作四"></a>操作四</h4><p>和操作三非常相似，从区间加变成了区间求和。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">s_z</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果赋初值 </span>  <span class="token comment">//和子树加同理 </span>  <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">+</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> r_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">int</span> f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>r<span class="token punctuation">,</span>p<span class="token punctuation">;</span><span class="token comment">//题目描述：节点数量，操作次数，根节点，取模 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//节点初值 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//链式前向星存边 </span>  <span class="token keyword">int</span> v<span class="token punctuation">;</span>  <span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//链式前向星存边 </span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//节点价值（重量） </span>  <span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token comment">//父节点 </span>  <span class="token keyword">int</span> d_p<span class="token punctuation">;</span><span class="token comment">//深度 </span>  <span class="token keyword">int</span> b_s<span class="token punctuation">;</span><span class="token comment">//重儿子 </span>  <span class="token keyword">int</span> t_p<span class="token punctuation">;</span><span class="token comment">//链头 </span>  <span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//新编号 </span><span class="token punctuation">}</span>q_q<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_n<span class="token punctuation">;</span><span class="token comment">//存贮新编号节点，赋新编号 </span><span class="token keyword">int</span> t_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>l_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//树，懒标记，区间查询结果 </span><span class="token keyword">void</span> <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">,</span><span class="token keyword">int</span> d_p<span class="token punctuation">)</span><span class="token punctuation">{</span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">=</span>d_p<span class="token punctuation">;</span><span class="token comment">//节点深度 </span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>f<span class="token punctuation">;</span><span class="token comment">//存父节点 </span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//节点大小（重量）初值 </span>  <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//找重儿子 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>     <span class="token function">d_1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">,</span>d_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历儿子 </span>    q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+=</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">;</span><span class="token comment">//更新当前节点重量 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_a<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span>m_a<span class="token operator">=</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//更新重儿子 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> t_p<span class="token punctuation">)</span><span class="token punctuation">{</span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">=</span>t_p<span class="token punctuation">;</span><span class="token comment">//链头 </span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span><span class="token operator">++</span>x_n<span class="token punctuation">;</span><span class="token comment">//赋新节点编号 </span>  n_w<span class="token punctuation">[</span>x_n<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用新节点存储当前节点的价值 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//没有种儿子，说明没有儿子 </span>  <span class="token function">d_2</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">,</span>t_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先遍历重儿子，形成重链 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">||</span>v<span class="token operator">==</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//重儿子已经遍历过 </span>    <span class="token function">d_2</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//轻儿子是新重链的链头 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点 </span>  t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>t_t<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>t_t<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l_n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//下传懒标记，更新值 </span>  l_a<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  l_a<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  t_t<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>l_n<span class="token operator">-</span><span class="token punctuation">(</span>l_n<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t_t<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>l_n<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t_t<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>  t_t<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>  l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//懒标记 </span>    t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理当前节点 </span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理懒标记 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>m_i<span class="token punctuation">)</span><span class="token function">u_d</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理左边 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&gt;</span>m_i<span class="token punctuation">)</span><span class="token function">u_d</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理右边 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间查询 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    r_s<span class="token operator">+=</span>t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    r_s<span class="token operator">%=</span>p<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将懒标记释放 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>m_i<span class="token punctuation">)</span><span class="token function">f_i</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理左边</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&gt;</span>m_i<span class="token punctuation">)</span><span class="token function">f_i</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理右边 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>n_w<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用新编号存储节点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&gt;</span>p<span class="token punctuation">)</span>t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>n_w<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">%</span>o_o<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>  v<span class="token operator">%=</span>p<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//链头不相等（不在同一个链上） </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//深度更深的链先处理区间加 </span>    <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理范围：链头编号到当前节点编号 </span>    l<span class="token operator">=</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//更新范围，变成链头的父亲，进入新链 </span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&gt;</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同一个链上直接处理编号就行 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">s_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间和 </span>  <span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果初始化 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//链头不相等（不在同一个链上） </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//深度更深的链先处理区间和 </span>    r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果赋初值 </span>    <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理范围：链头编号到当前节点编号 </span>    a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span>r_s<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//累加重链结果 </span>    l<span class="token operator">=</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//更新范围，变成链头的父亲，进入新链 </span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&gt;</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>  <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同一个链上直接处理编号</span>  a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span>r_s<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新 </span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_z</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//由于按重儿子遍历，且先遍历重链，所以编号是先跟着重链遍历到树底，在回溯的顺序赋予轻节点编号。</span>  <span class="token comment">//所以每个节点的子树的编号是连续的，可以用它的编号到它的编号加它的大小减一的区间进行操作。 </span>  <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">+</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">s_z</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果赋初值 </span>  <span class="token comment">//和子树加同理 </span>  <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">+</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> r_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存节点初值 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连边 </span>    <span class="token function">a_d</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连边 </span>  <span class="token punctuation">}</span>  <span class="token function">d_1</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从根节点开始处理点 </span>  <span class="token function">d_2</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从根节点开始处理点 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//树上两点路径上加处理 </span>      <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">a_p</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//树上两点路径上求和处理 </span>      <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">s_p</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点子树加</span>      <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">a_z</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//节点子树求和 </span>      <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">s_z</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 最近公共祖先 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1538D Another Problem About Dividing Numbers</title>
      <link href="/2021/08/10/cf1538d/"/>
      <url>/2021/08/10/cf1538d/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1538D">传送门</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给 $a$，$b$，$k$ 三个数在 $k$ 次操作后 $a=b$，输出 <code>YES</code>，否则输出 <code>NO</code>，每次操作可以让 $a$ 或 $b$ 整除一个大于 $1$ 的整数。</p><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们看这道题结合样例不难发现，我们可以求出一个范围，只要 $k\in[\min,\max]$ ，反之则不行。</p><p>那么我们先找范围 $\min$，首先我们知道两个不为 $1$ 的数， $k=2$ 是<strong>一定可以</strong>：可以让 $\frac{a}{a}=1$，再 $\frac{b}{b}=1$ 即可。</p><p>而如果 $a\mid b$ 或 $b\mid a$，$k_{\min}=1$，让大的数除到小的数即可 。</p><p>接着我们要找范围 $\max$，我们可以先将两个数的最大公约数求出，设 $f_i$ 为数的分解质因数后的质因数个数，这样我们可以求最大值了。</p><p>例子：</p><p>$4,4$</p><p>$k=2$ 时：$2,2$</p><p>$k=3$ 时：$1,1$</p><p>$k=3$ 时，因为每次可以除大于 $1$ 的整数，所以最大值可以是 $2\times f_i(\gcd(a,b))$（$a$ 贡献一次，$b$ 贡献一次）。</p><p>但这并不全面，因为我们让 $a$ 和 $b$ 直接除到他们的最大公因数，而在 $a$ 和 $b$ 除时，除的数也可以贡献最大值。</p><p>例子：</p><p>$36,48$</p><p>$a=12$ 和 $b=12$ 时，$\frac{a}{3}=12$，$\frac{b}{4}=12$，而 $4=2\times 2$，可以为最大值贡献 $2$。</p><p>所以 $\max={2\times f_i(\gcd(a,b))+f_i(\frac{a}{\gcd(a,b)})+f_i(\frac{b}{\gcd(a,b)})}$</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token comment">//t组数据</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>k<span class="token punctuation">;</span> <span class="token keyword">int</span> m_i<span class="token punctuation">,</span>m_a<span class="token punctuation">;</span><span class="token comment">//可以满足的最小值和最大值 </span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//最大公约数 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//分解质因子，求质因子的数量 </span>  <span class="token keyword">int</span> n_n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a_a<span class="token operator">=</span>a<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>a_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token operator">/=</span>i<span class="token punctuation">;</span>n_n<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span>n_n<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> n_n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方便求最大公约数 </span>    <span class="token keyword">int</span> g_c<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>g_c<span class="token operator">==</span>a<span class="token operator">||</span>g_c<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>a<span class="token operator">!=</span>b<span class="token punctuation">)</span>m_i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//特判 </span>    <span class="token keyword">else</span> m_i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    m_a<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token function">f_i</span><span class="token punctuation">(</span>g_c<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">f_i</span><span class="token punctuation">(</span>a<span class="token operator">/</span>g_c<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">f_i</span><span class="token punctuation">(</span>b<span class="token operator">/</span>g_c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求k最大可以是多少 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&gt;=</span>m_i<span class="token operator">&amp;&amp;</span>k<span class="token operator">&lt;=</span>m_a<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出 </span>    <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
            <tag> GCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1466B Last minute enhancements</title>
      <link href="/2021/08/10/cf1466b/"/>
      <url>/2021/08/10/cf1466b/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1466B">传送门</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给出序列 $x_i$ 单调递增。你可以执行若干次操作(可以不操作)，每次你可以选择一个位置 $1≤i≤n$，并将 $x_i$ 加 1。每个位置<strong>最多只能操作一次</strong>，你需要通过一些操作，使得最后的 $x$ 序列去重后剩余的元素最多</p><hr><h3 id="思路1：顺着遍历"><a href="#思路1：顺着遍历" class="headerlink" title="思路1：顺着遍历"></a>思路1：顺着遍历</h3><p>这道题给的序列很特殊，是一个<strong>单调递增序列</strong>，我们很容易想到维护一个数组，边存边计数，并判断是否出现过，如果出现过那就 +1，在判断是否出现过</p><hr><h3 id="思路2：逆着遍历"><a href="#思路2：逆着遍历" class="headerlink" title="思路2：逆着遍历"></a>思路2：逆着遍历</h3><p>我们也可以直接从后往前遍历，因为最大的数 +1 一定也是最优的</p><p>单调递增的序列倒着遍历就是单调递减序列，边存边计数也是可以过的</p><p><strong>注意</strong>: 1, 1, 2, 2 有连续重复的数的情况</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="思路1实现："><a href="#思路1实现：" class="headerlink" title="思路1实现："></a>思路1实现：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> a_a<span class="token punctuation">[</span><span class="token number">200001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_n<span class="token punctuation">;</span><span class="token comment">//记录每个读入的数 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空！！！ </span>        <span class="token function">memset</span><span class="token punctuation">(</span>a_a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a_a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n_n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_a<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断原数是否存在 </span>                a_a<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_a<span class="token punctuation">[</span>n_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断原数+1是否存在 </span>                a_a<span class="token punctuation">[</span>n_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路2实现："><a href="#思路2实现：" class="headerlink" title="思路2实现："></a>思路2实现：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a_a<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">,</span>last<span class="token punctuation">;</span><span class="token comment">//last 上一个数的大小 </span><span class="token keyword">bool</span> b<span class="token punctuation">;</span><span class="token comment">//判断是否已经出现过相同的数字并算过 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>a_a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a_a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    last<span class="token operator">=</span><span class="token operator">++</span>a_a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//最大的数+1 </span>    ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//单调递减 </span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>last<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span>last<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断是否符合要求 </span>      <span class="token comment">// (a_a[i]+1)!=last : 处理3,3,4,4的情况 </span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//更新相同的数字是否可加入及时一个+1，一个原数 </span>        a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        last<span class="token operator">=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token operator">||</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>last<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断是否加过原数 </span>        b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>        last<span class="token operator">=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT2830 辞書順で何番目？题解</title>
      <link href="/2021/08/10/at2830/"/>
      <url>/2021/08/10/at2830/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/AT2830">传送门</a></p><p><a href="https://www.luogu.com.cn/problem/P5367">康托展开【模板】</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>本题用了康托展开。</p><p>康托展开表达式：$ans=1+\sum\limits_{i=1}^n A\lbrack i\rbrack\times(n-i)!$</p><p>康托展开的主要思想是将所有的情况按顺序编一个号，并用简便的算法快速找出它的顺序。</p><p>举个例子：1 4 2 3</p><p>还没有出现过的数（从小到大）：1 2 3 4</p><p>序列第一位是 1，在还没用过的序列中排第一个所以 $ans=ans+0\times3!$</p><p>还没有用过的数（从小到大）：2 3 4</p><p>序列第一位是 4，在还没用过的序列中排第三个所以 $ans=ans+2\times2!$</p><p>还没有用过的数（从小到大）：2 3</p><p>序列第一位是 2，在还没用过的序列中排第一个所以 $ans=ans+0\times1!$</p><p>还没有用过的数（从小到大）：3</p><p>序列第一位是 2，在还没用过的序列中排第一个所以 $ans=ans+0\times0!$</p><p>此时 $ans=4$，根据公式再加一即是结果。</p><h4 id="康托展开的查找"><a href="#康托展开的查找" class="headerlink" title="康托展开的查找"></a>康托展开的查找</h4><p>根据上面的例子，可能会有疑惑，为什么会出现阶乘？</p><p>其实是因为全排列问题，例如还剩 3 个数，有 3 个空共有 $3\times2\times1=6$ 种情况。</p><p>这也是前面提过的，为了给每种情况一种编号，而我们是通过从小到大的顺序进行编号的，那么我们可以<br>通过每一位的判断将这个位数之前的所有情况都算出来，就能知道当前的排名，在最后一位求完时，再加一就是当前排列的排名了。</p><p>讲得通俗一点就是，例如在自然数中，你要找到 100 这个数的排名，你可以通过所有可能的排序情况，先求出 99 的排名，最后再加 1 就是 100 的排名了。</p><p>所以通过每一位确定的数，求比当前序列已经确定的数组成的序列小的序列排名，最后加一就是当前序列的排名，这就是康托展开的求排序方法。</p><h4 id="实现查找当前数位上的数在未用过数的序列中的排名"><a href="#实现查找当前数位上的数在未用过数的序列中的排名" class="headerlink" title="实现查找当前数位上的数在未用过数的序列中的排名"></a>实现查找当前数位上的数在未用过数的序列中的排名</h4><p>方法一：通过平衡树找当前数排名，注意及时删点（<code>update</code>）。</p><p>方法二：通过树状数组找到当前数的排名（本篇题解的代码就是这个思路）。</p><h4 id="细节优化"><a href="#细节优化" class="headerlink" title="细节优化"></a>细节优化</h4><ul><li><p>即时取模。</p></li><li><p>注意数列中数的下标从 0 开始。</p></li><li><p><a href="http://www.360doc.com/content/19/0707/10/5315_847201395.shtml">推荐一下洛谷日报的康托展开。</a></p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> tree<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//树状数组快速找"儿子" </span>  <span class="token keyword">return</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>y<span class="token punctuation">;</span>    x<span class="token operator">+=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//查询排名 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>    sum<span class="token operator">+=</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    x<span class="token operator">-=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> o_o<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token comment">//取模 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k_t<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//预处理阶乘 </span>    k_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>k_t<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">%</span>o_o<span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>k_t<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>o_o<span class="token punctuation">)</span><span class="token operator">%</span>o_o<span class="token punctuation">;</span><span class="token comment">//康托展开 </span>    <span class="token function">update</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新排名 </span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 康托展开 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1521A Nastia and Nearly Good Numbers</title>
      <link href="/2021/08/10/cf1521a/"/>
      <url>/2021/08/10/cf1521a/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1521A">传送门</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题目中说有 $x+y=z$，其中有且仅有一个为好数，其他的为接近好数。</p><hr><p>假设 $X$ 或 $Y$ 为好数</p><p>设一个好数为 $Z$，两个个接近好数分别为 $X$ 和 $Y$</p><p>$\because$ 一个好数可以被 $A \times B$ 整除</p><p>$\therefore$ $Z$ 可以表示为 $A \times B \times k_z$</p><p>$\because$ 一个接近好数可以被 $A$ 整除</p><p>$\therefore$ $X$ 可以表示为 $A \times k_x$</p><p>$Y$可以表示为 $A \times k_y$</p><p>$\because$ $X+Y=Z$</p><p>$\therefore$ $A \times k_x+A \times k_y=A \times B \times k_z$</p><p>$\therefore$ $B \times k_x+k_y=k_z$或$k_x+B \times k_y=k_z$</p><p>（跟 $A$ 没关系！！！）</p><p>又$\because$ 相邻的两个整数互质</p><p>$\because$相邻的两个整数互质</p><p>$\therefore$（$B+1$）与 $B$ 互质</p><p>$\therefore$ $1+B=$（$B+1$） 符合题意</p><p><strong>注意：$B=1$时要返回NO！！！</strong></p><p>因为 $1$ 可以被任何数整除，那所有的数都为好数，显然不符合题意。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> t<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %lld\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token operator">*</span>b<span class="token punctuation">,</span>a<span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>记得开<strong>long long</strong>！！！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1538C Number of Pairs</title>
      <link href="/2021/08/10/cf1538c/"/>
      <url>/2021/08/10/cf1538c/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1538C">传送门</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给一个数列和 $l$，$r$ 两个数，问在序列中的两个数的和有多少个在 $[l,r]$ 的区间中。</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先，我们要对这个序列从小到大排序。然后思考，我们从序列最小的数开始遍历，从最大的数开始逆着遍历，两者加和如果小于等于 $r$ 开始计数，这样我们的右边界就处理好了。</p><p>接着是左边界，我们刚刚计数记的是小于等于 $r$ 的数的个数，其中包括了小于 $l$ 的数量，所以我们可以再计一次，计小于 $l$ 的数量，这次计的数要减掉，因为他们不符合题意。</p><hr><h3 id="细节优化"><a href="#细节优化" class="headerlink" title="细节优化"></a>细节优化</h3><p>遍历的时候因为是两个数的加和，在考虑边界的时候要注意 $l&lt;r$，当加和时左右边界相遇时可以直接跳出循环。</p><p><strong>注意：</strong></p><p>在计右边边界时，要加上计的数。在计左边界时，要减去计的数。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment">//t组数据 n个元素 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span><span class="token number">200001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储元素 </span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右边界 </span><span class="token keyword">void</span> <span class="token function">get_ans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右边界遍历 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>r<span class="token punctuation">)</span>j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//寻找加和小于r的右边界 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//跳出循环 </span>    ans<span class="token operator">+=</span>j<span class="token operator">-</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左边界遍历 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;=</span>l<span class="token punctuation">)</span>j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    ans<span class="token operator">-=</span>j<span class="token operator">-</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a_a<span class="token punctuation">,</span>a_a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从小到大排序 </span>    <span class="token function">get_ans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1538B Friends and Candies</title>
      <link href="/2021/08/10/cf1538b/"/>
      <url>/2021/08/10/cf1538b/</url>
      
        <content type="html"><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="https://www.luogu.com.cn/problem/CF1538B">传送门</a></p><p>给出一个序列，将它调整，使它最后元素相等，若做不到输出 $-1$，否则输出调整次数。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>因为要做到元素相同，所以将所有<strong>元素之和</strong>除去<strong>元素数量</strong>，就可以知道调整之后每个元素的大小，如果除不尽，就可以输出 $-1$ 了。</p><p>序列：$3,2,2,0,2,3$</p><p>不难发现我们需要调整两次即可完成目的，我们的目的是将糖果多的人的糖果分出去即可，所以我们直接计有多少人的糖果数多于平均糖果数即可。</p><p><strong>注意：</strong></p><p>对于下面的序列，答案为 $1$，因为只需要分配第一个糖果堆即可完成目的。</p><p>序列：$6,1,1,1,1$</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment">//t组数据 n个元素 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span><span class="token number">200001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储糖果堆 </span><span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token punctuation">;</span><span class="token comment">//所有元素的和 </span><span class="token keyword">int</span> n_n<span class="token punctuation">;</span><span class="token comment">//需调整的的糖果堆 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n_n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>a_a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a_a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sum<span class="token operator">+=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">%</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//不能平均分配 </span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sum<span class="token operator">/=</span>n<span class="token punctuation">;</span><span class="token comment">//sum变为元素的平均值 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>sum<span class="token punctuation">)</span>n_n<span class="token operator">++</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>n_n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF135C Zero-One</title>
      <link href="/2021/08/10/cf135c/"/>
      <url>/2021/08/10/cf135c/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF135C">传送门</a></p><p><del>码农题</del></p><p>本题的数据范围很大，暴力会<code>TLE</code>，所以是一道结论题，但是细节很多，考虑一定要周全。</p><h3 id="规律"><a href="#规律" class="headerlink" title="规律"></a>规律</h3><p>设 1 的数量 $x_1$，0的数量 $x_0$，问号的数量 $x_x$。</p><h4 id="最优取"><a href="#最优取" class="headerlink" title="最优取"></a>最优取</h4><p>通过题目不难发现，若保持结果尽量大，就会从左向右取 0；若保持结果尽量小，就会从左向右取 1。</p><p>例 1：1010</p><p>最后要剩两位数所以会取掉一个 0 和 1。若取右边的 1，那么最后一定是 10，但若取左边的 1，有可能会剩 01，所以从左向右会更优；若取右边的 0，会使结果变成 01，而取左边的 0，结果会是 10，所以从左向右取 0 更优。</p><p>我们会发现在 $x_1=x_0$ 时，结果由最后一位影响。</p><h4 id="最后一位的影响"><a href="#最后一位的影响" class="headerlink" title="最后一位的影响"></a>最后一位的影响</h4><p>在 $x_1=x_0$ 时，因为最优取是从左向右的，而结束时取得数量是相同的，且最后一位一定不会被取，所以 $x_1=x_0$ 时结果的第二位是原序列的最后一位，结果的第一位是原数列的最后一位的相反的值。</p><h4 id="先手优势"><a href="#先手优势" class="headerlink" title="先手优势"></a>先手优势</h4><p>因为先取 1，所以在判断的时候要特殊注意一下。</p><p>例 2：11100</p><p>例 3：1100</p><p>根据最优取我们发现例 2 例 3 的结果都是 10，这就体现出先手的优势了，所以在判断时要特判 $x_1=x_0+1$ 情况的出现。</p><h4 id="两种数的数量不同"><a href="#两种数的数量不同" class="headerlink" title="两种数的数量不同"></a>两种数的数量不同</h4><p>例 4：1000</p><p>例 5：1110</p><p>我们可以发现如下的结论：当 $x_1&gt;x_0+1$ 是结果必是 11，当 $x_1&lt;x_o$ 时结果必是 00。</p><h4 id="问号的情况"><a href="#问号的情况" class="headerlink" title="问号的情况"></a>问号的情况</h4><p>本题最大的困难就是对问号的处理。问号的存在使判断过程变得复杂，但既然是结论题，一定还是有规律的。</p><p>根据最优取，我们知道当 $x_1=x_0$ 时，结果由最后一位影响，而再根据先手情况，我们才有更全面的结论：当  $x_1=x_0$ 或 $x_1=x_0+1$ 时，结果由最后一位影响。</p><p>而问号的出现，可以用来判断是否有可能出现某种情况，所以我们只要判断是否会出现对应的情况即可。</p><p>不难发现，当 $x_0+x_x&gt;x_1$ 时结果会出现 00 的情况，当 $x_1+x_x-1&gt;x_0$ 时会出现 11 的情况。</p><p>而当 $x_x&gt;=x_0-x_1$ 且 $x_0&gt;=x_1$ 或 $x_x&gt;=x_1-x_0-1$ 且 $x_1&gt;=x_0+1$ 时，问号就可以使 $x_1=x_0$ 或 $x_1=x_0+1$ 的情况出现了。而这时就可以用最后后一位的结论代入即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> x_1<span class="token punctuation">,</span>x_0<span class="token punctuation">,</span>x_x<span class="token punctuation">;</span>string s_s<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string <span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span>mp<span class="token punctuation">;</span><span class="token comment">//用来判断结果是否有出现的可能</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>s_s<span class="token punctuation">;</span><span class="token comment">//读入序列 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s_s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//统计 x_1 x_0 x_x </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span>x_0<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span>x_1<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> x_x<span class="token operator">++</span><span class="token punctuation">;</span>  mp<span class="token punctuation">[</span><span class="token string">"11"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span><span class="token string">"01"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span><span class="token string">"00"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清空 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x_1<span class="token operator">+</span>x_x<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span>x_0<span class="token punctuation">)</span>mp<span class="token punctuation">[</span><span class="token string">"11"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x_0<span class="token operator">+</span>x_x<span class="token operator">&gt;</span>x_1<span class="token punctuation">)</span>mp<span class="token punctuation">[</span><span class="token string">"00"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x_x<span class="token operator">&gt;=</span>x_0<span class="token operator">-</span>x_1<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>x_0<span class="token operator">&gt;=</span>x_1<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>x_x<span class="token operator">&gt;=</span>x_1<span class="token operator">-</span>x_0<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>x_1<span class="token operator">&gt;=</span>x_0<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//问号使 x_1=x_0 和 x_1=x_0+1 的情况出现 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>s_s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span>mp<span class="token punctuation">[</span><span class="token string">"01"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//最后一位判断</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>s_s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span>mp<span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//最后一位判断</span>    <span class="token comment">//最后一位是问号的判断 </span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x_x<span class="token operator">&gt;</span><span class="token punctuation">(</span>x_1<span class="token operator">-</span>x_0<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>x_1<span class="token operator">&gt;=</span>x_0<span class="token operator">||</span>x_x<span class="token operator">&gt;</span><span class="token punctuation">(</span>x_0<span class="token operator">-</span>x_1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>x_0<span class="token operator">&gt;=</span>x_1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>x_x<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span>mp<span class="token punctuation">[</span><span class="token string">"01"</span><span class="token punctuation">]</span><span class="token operator">=</span>mp<span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//当问号为1或没有时，最多只会出现01和10的一种情况 </span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x_1<span class="token operator">&gt;</span>x_0<span class="token punctuation">)</span>mp<span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> mp<span class="token punctuation">[</span><span class="token string">"01"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">//输出 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span><span class="token string">"00"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"00"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span><span class="token string">"01"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"01"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"10"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span><span class="token string">"11"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"11"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1538A Stone Game</title>
      <link href="/2021/08/10/cf1538a/"/>
      <url>/2021/08/10/cf1538a/</url>
      
        <content type="html"><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="https://www.luogu.com.cn/problem/CF1538A">传送门</a></p><p>给串有标号石头，摧毁其中的最大值和最小值，每次只能从最左和最优最右摧毁一个，问最少需要摧毁多少个石头。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题是一个模拟题，我们可以先找到最大值和最小值石头的编号，然后从两个石头中选出一个离序列两端最近的石头催毁，再找到另一个石头在新序列中离两端最小的距离进行统计，输出结果即可。</p><p><strong>注意：</strong></p><p>摧毁石头也要计一次数。</p><h3 id="细节优化1"><a href="#细节优化1" class="headerlink" title="细节优化1"></a>细节优化1</h3><p>因为我们不知道最大值和最小值石头的序列的先后顺序，可能要判断许多种情况，会相当麻烦。</p><p>但是，我们思考一下，为什么要找最大值和最小值？</p><p>是为了存他们的坐标，那存了之后，我们眼中就只剩坐标了！所以存坐标后，如果最小值坐标在最大值坐标之后，可以用 <code>swap</code> 将两者替换，这样可以省去许多无谓的判断。</p><h3 id="细节优化2"><a href="#细节优化2" class="headerlink" title="细节优化2"></a>细节优化2</h3><p>再找最大值与最小值时，我们可以不存序列，边读边存，因为我们要的只是坐标。</p><h3 id="细节优化3"><a href="#细节优化3" class="headerlink" title="细节优化3"></a>细节优化3</h3><p>我们可能会碰见如下情况：最大值与最小值离两端的最小距离相同。但这并不影响我们。</p><p>例子：</p><ul><li>$2,1,3,5,6,4$</li><li>$3,2,1,6,5,4$</li></ul><p>我们可以发现他们离两端的距离都为 $1$（第二个是 $2$），但是如果我们可以发现，不管我们先摧毁那个石头，另一个石头在新序列中离两端的最近距离不受影响。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment">//t组数据，n个石头 </span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token comment">//当前石头的数值 </span><span class="token keyword">int</span> m_i<span class="token punctuation">,</span>m_a<span class="token punctuation">;</span><span class="token comment">//最小值与最大值 </span><span class="token keyword">int</span> i_x<span class="token punctuation">,</span>a_x<span class="token punctuation">;</span><span class="token comment">//最小值与最大值坐标 </span><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token comment">//答案 </span><span class="token keyword">int</span> n_i<span class="token punctuation">,</span>n_a<span class="token punctuation">;</span><span class="token comment">//找到两个坐标分别离两端的最短距离 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    m_a<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>a_x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    m_i<span class="token operator">=</span><span class="token number">0xfffffff</span><span class="token punctuation">;</span>i_x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span>m_a<span class="token punctuation">)</span><span class="token punctuation">{</span>        m_a<span class="token operator">=</span>x<span class="token punctuation">;</span>        a_x<span class="token operator">=</span>i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>m_i<span class="token punctuation">)</span><span class="token punctuation">{</span>        m_i<span class="token operator">=</span>x<span class="token punctuation">;</span>        i_x<span class="token operator">=</span>i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i_x<span class="token operator">&gt;</span>a_x<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>i_x<span class="token punctuation">,</span>a_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若最小值在最大值后面，交换坐标 </span>    n_i<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>i_x<span class="token punctuation">,</span>n<span class="token operator">-</span>i_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_i<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>a_x<span class="token punctuation">,</span>n<span class="token operator">-</span>a_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到两个坐标分别离两端的最短距离</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n_i<span class="token operator">&lt;</span>m_i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//摧毁离两端最近的石头 </span>      ans<span class="token operator">+=</span>n_i<span class="token punctuation">;</span>      ans<span class="token operator">+=</span><span class="token function">min</span><span class="token punctuation">(</span>a_x<span class="token operator">-</span>i_x<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//摧毁新序列石头 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      ans<span class="token operator">+=</span>m_i<span class="token punctuation">;</span>      ans<span class="token operator">+=</span><span class="token function">min</span><span class="token punctuation">(</span>a_x<span class="token operator">-</span>i_x<span class="token punctuation">,</span>n_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//摧毁新序列石头 </span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出结果 </span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF731E Funny Game</title>
      <link href="/2021/08/10/cf731e/"/>
      <url>/2021/08/10/cf731e/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF731E">传送门</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于双方的操作后，操作后都是将操作数的和在放回去，所以可以用前缀和先处理了一下数组。</p><p>双方都想自己的分值比对方尽量大，所以第一个人一定拿的是最优。否则，对方拿了剩下的最优，再剩下的就一定不是最优的了。那么，我们可以第一次就使得利益最大化。</p><p>我们可以逆着遍历，不断的求计算的数和前缀和差的最大值（尽量使自己比对方的分值大）最后输出即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">200001</span><span class="token punctuation">;</span><span class="token comment">//注意数据范围 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>n_i<span class="token punctuation">,</span>a_s<span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入数列 </span>    a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>n_i<span class="token punctuation">;</span><span class="token comment">//预处理，求前缀和 </span>    <span class="token punctuation">}</span>    a_s<span class="token operator">=</span>a_a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//赋初值，要逆着遍历保证最优情况 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意：最少选两个数注意边界 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF762B USB vs. PS/2题解</title>
      <link href="/2021/08/10/cf762b/"/>
      <url>/2021/08/10/cf762b/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF762B">传送门</a></p><p>本题用贪心，注意开 <code>long long</code>。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目给了我们 $3$ 类电脑：用 USB 的，用 PS/2 的，和两种都可用的，现在我们要找出尽量多的鼠标满足电脑，并在其基础上尽量花钱少。</p><p>对于之能用一种接口的电脑，直接从小到大排序，在要求内尽量多的取最小值。</p><p>对于两种接口都能用的电脑，我们直接找剩下的鼠标中最便宜的就行。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>只能用一种接口的电脑，直接将对应的接口所有的鼠标从小到大排序，取即可。</p><p>两种接口都能用的鼠标，可以将剩下的数拿出来再排序，取够就行；或者直接将数组当队列，记住取到哪了，将两个队头不断更新，取最小即可（代码也是这种思路）。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token comment">//三种端口 </span>string t_p<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">;</span><span class="token comment">//临时变量价钱和端口 </span><span class="token keyword">long</span> <span class="token keyword">long</span> m<span class="token punctuation">;</span><span class="token comment">// 鼠标数量 </span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span><span class="token comment">//花的钱，买的鼠标的数量 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_a<span class="token punctuation">[</span><span class="token number">300001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b_b<span class="token punctuation">[</span><span class="token number">300001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存两种鼠标 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x_a<span class="token punctuation">,</span>x_b<span class="token punctuation">;</span><span class="token comment">//两种鼠标分别的数量 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token operator">&gt;&gt;</span>c<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//读入 </span>    cin<span class="token operator">&gt;&gt;</span>x<span class="token operator">&gt;&gt;</span>t_p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'P'</span><span class="token punctuation">)</span>b_b<span class="token punctuation">[</span>x_b<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token keyword">else</span> a_a<span class="token punctuation">[</span>x_a<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//排序从小到大 </span>  <span class="token function">sort</span><span class="token punctuation">(</span>a_a<span class="token punctuation">,</span>a_a<span class="token operator">+</span>x_a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sort</span><span class="token punctuation">(</span>b_b<span class="token punctuation">,</span>b_b<span class="token operator">+</span>x_b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//取第一种端口鼠标 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    ans<span class="token operator">+=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//取第二种端口鼠标</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    ans<span class="token operator">+=</span>b_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>c<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//取两种端口鼠标</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//鼠标用完了 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&lt;</span>b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">+=</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token operator">++</span><span class="token punctuation">,</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//两种都还有，取小的队头 </span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">+=</span>b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">++</span><span class="token punctuation">,</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//只剩第二种了 </span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">+=</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token operator">++</span><span class="token punctuation">,</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//只剩第一种了 </span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>a_s<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出结果 </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1277 拼字游戏题解</title>
      <link href="/2021/08/10/p1277/"/>
      <url>/2021/08/10/p1277/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://www.luogu.com.cn/problem/P1277">传送门</a></p><p>有一个未知的 $4\times4$ 的拼盘 $M$，它的每个元素都是正整数。给出 $4$ 行元素的总和 $4$ 列元素的总和以及两条对角线元素总和。另外还给出了拼盘中任意 $4$ 个位置的元素值，它们的位置在输入文件中给定</p><p>编写一个程序求出拼盘中另外 $12$ 个位置的正整数的值，要求这些元素的行之和，列之和以及对角线之和与输入文件中给定的值相一致</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先题目给了我们<strong>每列每排</strong>和<strong>对角线</strong>的数的和，以及 $4$ 个<strong>数的数值</strong>，而且任何行对角线或列<strong>之和不会超过 $300$</strong>，另外给定的输入文件<strong>总是存在解决方案</strong></p><p>假设题目给的数为 $sum_i$（从下标 $0$ 开始计数），下图一种颜色代表一个 $sum_i$ 的所管辖的数，也是约束情况合理的条件<br><img src="https://z3.ax1x.com/2021/09/15/4ZscPx.png" alt="手绘要求"><br>（样例）</p><p><strong>目标：我们要找到更多的约束条件</strong>（因为约束越多，尝试的情况越少）</p><p>设 $S = sum_0+sum_1+sum_2+sum_3$（即所有数值和）</p><p>$\because$</p><script type="math/tex; mode=display">\left\{\begin{aligned}(0,0)+(0,1)+(0,2)+(0,3) = sum_0 \\(3,0)+(3,1)+(3,2)+(3,3) = sum_3 \\(0,1)+(1,1)+(2,1)+(3,1) = sum_5 \\(0,2)+(1,2)+(2,2)+(3,2) = sum_6 \\(0,0)+(1,1)+(2,2)+(3,3) = sum_8 \\(0,3)+(1,2)+(2,1)+(3,0) = sum_9 \\\end{aligned}\right.</script><p>$\therefore$ $\frac{(sum_0+sum_3+sum_5+sum_6+sum_8+sum_9)}{2}=S-(1,0)-(2,0)-(1,3)-(2,3)$</p><p>$S_1=(1,0)+(2,0)+(1,3)+(2,3)$（下图中紫色所经过的点的和）</p><p>$S_2=(0,1)+(0,2)+(3,1)+(3,2)=S-(sum_8+sum_9)-S_1$（下图中橙色所经过的点的和）</p><p>$S_3=(0,0)+(0,3)+(3,0)+(3,3)=(sum_0+sum_3)-S_2$（即四个角的和）</p><p>$S_4=S-S_1-S_2-S_3=(1,1)+(1,2)+(2,1)+(2,2)$（即内部四数之和）</p><p><img src="https://z3.ax1x.com/2021/09/15/4ZsRxO.png" alt="点权"></p><hr><p>我们可以开始尝试一下了</p><p>我们先用样例的数据，为了方便我们用 $\times$ 表示已知数，$?$ 表示未知，$1$ 至 $n$ 表示我们自己填的数</p><p><strong>初始：</strong></p><p>$ ? , \times , ? , ? $</p><p>$ ? , ? , ? , \times $</p><p>$ ? , ? , \times , ? $</p><p>$ \times , ? , ? , ? $</p><hr><p><strong>填入第一个数</strong></p><p>$ 1 , \times , ? , ? $</p><p>$ ? , ? , ? , \times $</p><p>$ ? , ? , \times , ? $</p><p>$ \times , ? , ? , ? $</p><hr><p><strong>填入第二个数</strong></p><p>$ 1 , \times , 2 , \times $</p><p>$ ? , ? , ? , \times $</p><p>$ ? , ? , \times , ? $</p><p>$ \times , ? , ? , ? $</p><hr><p>$ 1 , \times , 2 , \times $</p><p>$ ? , ? , ? , \times $</p><p>$ ? , ? , \times , ? $</p><p>$ \times , ? , ? , \times $（我们有 $S_3$）</p><hr><p>$ 1 , \times , 2 , \times $</p><p>$ ? , \times , ? , \times $</p><p>$ ? , ? , \times , \times $</p><p>$ \times , ? , ? , \times $</p><hr><p><strong>填入第三个数</strong></p><p>$ 1 ,\times, 2 , \times $</p><p>$ 3 , \times , \times , \times $</p><p>$ \times , \times , \times , \times $</p><p>$ \times , \times , \times , \times $</p><hr><p>正是因为我们的约束条件找得多，所以我们需要填的数次数少，便利的次数就会减少（填的数只需要 $3$ 或 $4$ 个就可以得出答案！）</p><p><strong>而剩下的就可以移交给随机数来处理了</strong></p><p>通过 $sum_i$ 的范围限制，不断尝试即可。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2651 添加括号III</title>
      <link href="/2021/08/10/p2651/"/>
      <url>/2021/08/10/p2651/</url>
      
        <content type="html"><![CDATA[<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><a href="https://www.luogu.com.cn/problem/P2651">传送门</a></p><p>不难发现两个连续分数线就可以将奇数位的数乘在一起数，偶数位的数乘在一起，这是在没有括号的情况下。而有括号的话括号里的计数<strong>也从括号前计数</strong>，但括号后的计数<strong>不计括号里的数</strong></p><p>例子：$a_1\ /a_2\ /a_3\ /a_4$</p><p>加括号：$a_1/(a_2/a_3)\ /a_4$</p><p>变为：$a_1\times a_3\times a_4 \ /a_2$</p><p>我们可以发现括号里的计数<strong>也从括号前计数</strong>也就是说 $a_2$是第二位（偶数位），$a_3$是第三位（奇数位），所以 $a_3$要乘在上面。而括号后的计数<strong>不计括号里的数</strong>，就是说括号里的东西是第二位，$a_4$是第三位，所以 $a_4$也要乘在上面</p><h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><p>当我们的括号如下使用时表达式可以转换成 $\frac{a_1\times a_3\times …\times a_n}{a_2}$</p><p>$a_1\ /((((a_2\ /a_3)\ /a_4)\ /a_5)\ /…)\ /a_n$</p><p>接着我们发现数据很大，所以不用高精存储不了，但是我们只需要证明结果是<strong>整数</strong>即可，所以我们可以变读变求最大公约数 $gcd(a_i,a_2)$ 再 $\frac{a_2}{gcd(a_i,a_2)}$，最后如果 $a_2=1$ 那么就说明能约分（即整除）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> a_1<span class="token punctuation">,</span>a_2<span class="token punctuation">,</span>a_x<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//不断约分，将分子与分母约分 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方便gcd，大的数除小的数 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>a_1<span class="token punctuation">,</span><span class="token operator">&amp;</span>a_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> g_c<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>a_1<span class="token punctuation">,</span>a_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    a_2<span class="token operator">/=</span>g_c<span class="token punctuation">;</span>    n<span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//a_1,a_2,单独读处理，后面直接约分就行 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a_x<span class="token punctuation">)</span><span class="token punctuation">;</span>      g_c<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>a_x<span class="token punctuation">,</span>a_2<span class="token punctuation">)</span><span class="token punctuation">;</span>      a_2<span class="token operator">/=</span>g_c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a_2<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//可以整除 </span>    <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//不可以 </span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA119 Greedy Gift Givers</title>
      <link href="/2021/08/10/uva119/"/>
      <url>/2021/08/10/uva119/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/UVA119">传送门</a></p><p>这道题可以用模拟来做，不断更新每个人的钱从而求得最后每个人剩的钱，输出即可。</p><p><strong>值得注意的是，此题的输出格式判定比较严格。要多注意一些细节。</strong></p><hr><h3 id="细节1"><a href="#细节1" class="headerlink" title="细节1"></a>细节1</h3><p>每个给钱人都会将尽可能多的钱给出去，但只会给出整数，而剩下无法在平均分的钱会留在自己手中。</p><h3 id="细节2"><a href="#细节2" class="headerlink" title="细节2"></a>细节2</h3><p>有可能会出现有人想把钱分给零个人的情况，所以要特判一下，不能将零作为除数。</p><h3 id="细节3"><a href="#细节3" class="headerlink" title="细节3"></a>细节3</h3><p>每个组的输出应该用空行与其他组分开。这个说明在样例中没有体现，必须要注意一下，这道题的格式要求严格。</p><p>如果是在每组结束后再输出一个换行来满足说明，那最后结束的时候会有换两行，不符合格式会判错。代码中有这个问题的解决方法。这个问题的出现是因为，本该要再读入下一组数据，但此时已经没有数据了，所以程序终止，却保留了要读入的空行。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//n个人 </span>string n_n<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//n个名字 </span><span class="token keyword">long</span> <span class="token keyword">long</span> m_m<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//每个人有的钱 </span>string n_a<span class="token punctuation">;</span><span class="token comment">//花钱的那个人 </span><span class="token keyword">int</span> s_m<span class="token punctuation">,</span>s_n<span class="token punctuation">;</span><span class="token comment">//花钱的数值，分给几个人 </span><span class="token keyword">int</span> t_m<span class="token punctuation">;</span><span class="token comment">//每个人被分给钱的数值 </span>string g_n<span class="token punctuation">;</span><span class="token comment">//每次被分给钱的人的名字 </span>map<span class="token operator">&lt;</span>string <span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span>mp<span class="token punctuation">;</span><span class="token comment">//存人的钱</span><span class="token keyword">bool</span> b_b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>b_b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//格式问题，规范输出 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>n_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入人名，也同样是输出顺序 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cin<span class="token operator">&gt;&gt;</span>n_a<span class="token operator">&gt;&gt;</span>s_m<span class="token operator">&gt;&gt;</span>s_n<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s_n<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//不能除零 </span>      t_m<span class="token operator">=</span>s_m<span class="token operator">/</span>s_n<span class="token punctuation">;</span>      mp<span class="token punctuation">[</span>n_a<span class="token punctuation">]</span><span class="token operator">-=</span>t_m<span class="token operator">*</span>s_n<span class="token punctuation">;</span><span class="token comment">//减去分出钱的数量 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s_n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>g_n<span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>g_n<span class="token punctuation">]</span><span class="token operator">+=</span>t_m<span class="token punctuation">;</span><span class="token comment">//得到钱的人要加上 </span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>n_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>mp<span class="token punctuation">[</span>n_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      mp<span class="token punctuation">[</span>n_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA147 Dollars</title>
      <link href="/2021/08/10/uva147/"/>
      <url>/2021/08/10/uva147/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/UVA147">传送门</a></p><p>这是一道背包题。</p><p>首先我们可以发现数据有小数但范围很小，所以我们可以将其直接乘为整数。又发现最小的钱的价值为 $5$，且其他的价值都是他的倍数，所以可以再整体除去这个数，同时缩小数据范围，避免不必要的空间浪费。</p><p>由于数据范围非常小，我们可以预处理出所有情况，输出即可。同时这道题细节也要注意。</p><h3 id="细节一"><a href="#细节一" class="headerlink" title="细节一"></a>细节一</h3><p>要将读入的小数先数出来并且保留两位小数，在宽度为 $6$ 的字段中右对齐。下一行是可能组成该组数据的方法数，在宽度为 $17$ 的字段中右对齐。所以可以用 <code>printf</code> 输出。</p><h3 id="细节二"><a href="#细节二" class="headerlink" title="细节二"></a>细节二</h3><p>注意给存结果的数组赋初值。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">double</span> a<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//全部除5 </span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">[</span><span class="token number">6001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//最大值范围也除5，节省空间 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//共11种金钱面额 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">6000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>ans<span class="token punctuation">[</span>j<span class="token operator">-</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//预处理出每种情况 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%6.2lf"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意输出格式 </span>    m<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//a*100/5=a*20</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%17lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意输出格式</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2021/08/10/pai-xu/"/>
      <url>/2021/08/10/pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>通过比较两个相邻元素大小，不断交换位置，最后使得整序列有序。效率较低，但可以优化。</p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>每个元素从前向后扫，到自己截止，若有元素比自己大，则插到其前面。</p><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>假设有一组｛$9, 1, 2, 5, 7, 4, 8, 6, 3, 5$｝无序序列。</p><p>第一趟排序： </p><p>$\frac{10}{2}=5$，即相隔距离为 $5$ 的元素组成一组，可以分为 $5$ 组。接下来，按照直接插入排序的方法对每个组进行排序。</p><p>第二趟排序：</p><p>将上次的长度缩小一半，即 $\frac{5}{2}$ (取整数)。这样每相隔距离为 $2$ 的元素组成一组，可以分为 $2$ 组。按照直接插入排序的方法对每个组进行排序。</p><p>第三趟排序：</p><p>再缩小一半，即 $\frac{2}{2}=1$。 这样相隔距离为 $1$ 的元素组成一组，即只有一组。按照直接插入排序的方法对每个组进行排序。</p><p>此时，排序已经结束。</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>每回选择最小的数换到当前位置。</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>从元素之中挑一个基准，所有比他小的排到左边，比他大的排到右边。</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>将整个序列拆成子序列，子序列排成有序后，合并子序列时，再将两个子序列排序，排序时有技巧。</p><p>例子：</p><p>子序列 $1$：$1,3,4$</p><p>子序列 $2$：$2,7,8$</p><p>第一步：比较第一位（$1,2$）比较</p><p>合并序列：$1$</p><p>第二步：大的数比较小的数的后一位（$2,3$）比较</p><p>合并序列：$1,2$</p><p>第三步：重复第二步，比较（$3,7$）</p><p>合并序列：$1,2,3$</p><p>第四步：重复第二步，比较（$4,7$）</p><p>合并序列：$1,2,3,4$</p><p>最后，一个序列已经比较完了，另一个序列剩下的直接补到序列尾。</p><p>合并序列：$1,2,3,4,7,8$</p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>本质是一颗二叉树。</p><p>先将所有的数建一棵二叉树。</p><p>每次将比对父节点和儿子的值，值大的向上传。</p><p>此时根节点至最大。</p><p>最大值入数组，与树的子节点交换后删除此节点。</p><p>不断出最大值，最后数组倒序。</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>将所有的数直接存入相应的下标，最后按下标从小到大输出。</p><p>存入时要计数，输出时，输出下标是记得数的个数。</p><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p>先将最大值除去数组长度 $-1$ 后，将所有的数值同样除去数组长度 $-1$ 后，按计数排序存入数组。</p><p>每一个数组的下标用链表存储数据，数据存入时，按链表顺序与值比对大小，使之有序。</p><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>将数字按位排序，例子：</p><p>$12,43,23,45,61,29,57,49,92$</p><p>第一步：将个位排序</p><p>$61,12,92,43,23,45,57,29,49$</p><p>第二步：将十位排序</p><p>$12,23,29,43,45,49,57,61,92$</p><p>若还有更高数位，依次排序即可。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新随机数生成器（c++11）-mt19937</title>
      <link href="/2021/08/10/xin-sui-ji-shu-sheng-cheng-qi/"/>
      <url>/2021/08/10/xin-sui-ji-shu-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="mt19937"><a href="#mt19937" class="headerlink" title="mt19937"></a>mt19937</h2><p>这是 <code>c++11</code> 的新的随机数生成器，是<code>rand（）</code>远远不能相比的</p><h3 id="rand（）"><a href="#rand（）" class="headerlink" title="rand（）"></a>rand（）</h3><p>这个随机数本身有一定限制，生成的随机数范围貌似在 （$0,32767$）（<code>dev-c++</code>）中，这有时根本不够用，有时还要手动 $\times 10000……$ 但这样也会有局限性，因为数据的随机性被破坏了</p><h3 id="所以聪明的人类发明了新的随机数生成器：："><a href="#所以聪明的人类发明了新的随机数生成器：：" class="headerlink" title="所以聪明的人类发明了新的随机数生成器：："></a>所以聪明的人类发明了新的随机数生成器：：</h3><h1 id="mt19937-1"><a href="#mt19937-1" class="headerlink" title="mt19937"></a>mt19937</h1><p><del>（密集恐惧症者自动跳过。。。）</del></p><p>Mersenne Twister 算法译为马特赛特旋转演算法，是伪随机数发生器之一，其主要作用是生成伪随机数。此算法是 Makoto Matsumoto （松本）和 Takuji Nishimura （西村）于 $1997$ 年开发的，基于有限二进制字段上的矩阵线性再生。可以快速产生高质量的伪随机数，修正了古老随机数产生算法的很多缺陷。Mersenne Twister 这个名字来自周期长度通常取 Mersenne 质数这样一个事实。常见的有两个变种 Mersenne Twister MT19937 和 Mersenne Twister <code>MT19937-64</code>。<br>Mersenne Twister 算法的原理：Mersenne Twister 算法是利用线性反馈移位寄存器 ( LFSR ) 产生随机数的，LFSR 的反馈函数是寄存器中某些位的简单异或，这些位也称之为抽头序列。一个 $n$ 位的 LFSR 能够在重复之前产生 $2^n-1$ 位长的伪随机序列。只有具有一定抽头序列的LFSR才能通过所有 $2^n-1$ 个内部状态，产生 $2^n - 1$ 位长的伪随机序列，这个输出的序列就称之为 $m$ 序列。为了使 LFSR 成为最大周期的 LFSR，由抽头序列加上常数 $1$ 形成的多项式必须是本原多项式。一个 $n$ 阶本原多项式是不可约多项式，它能整除 $x^{(2\times n-1)}+1$ 而不能整除 $x^d+1$，其中 $d$ 能整除$2^n-1$。例如 $(32,7,5,3,2,1,0)$ 是指本原多项式 $x^{32}+x^7+x^5+x^3+x^2+x+1$，把它转化为最大周期LFSR就是在LFSR的第 $32,7,5,2,1$ 位抽头。利用上述两种方法产生周期为 $m$ 的伪随机序列后，只需要将产生的伪随机序列除以序列的周期，就可以得到 $(0,1)$ 上均匀分布的伪随机序列了。<br>Mersenne Twister 有以下优点：随机性好，在计算机上容易实现，占用内存较少 ( <code>mt19937</code> 的 <code>C</code> 程式码执行仅需 $624$ 个字的工作区域 )，与其它已使用的伪随机数发生器相比，产生随机数的速度快、周期长，可达到 $2^{19937}-1$，且具有 $623$ 维均匀分布的性质，对于一般的应用来说，足够大了，序列关联比较小，能通过很多随机性测试。</p><p><strong>$2^{19937}-1$</strong></p><h2 id="实战检测"><a href="#实战检测" class="headerlink" title="实战检测"></a>实战检测</h2><h3 id="mt19937模板"><a href="#mt19937模板" class="headerlink" title="mt19937模板"></a>mt19937模板</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  mt19937 <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>//数据生成<br></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mo<span class="token operator">=</span><span class="token number">31331</span><span class="token punctuation">;</span><span class="token comment">//由于rand（）的区间过小但又要保证公平的数据范围所以模数较小</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"11.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mt19937 <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>mo<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>mo<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>//检验<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> u<span class="token operator">=</span><span class="token number">33332</span><span class="token punctuation">;</span><span class="token keyword">bool</span> a_a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>b_b<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> s_a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>s_b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//比对两种随机数生成中有多少次重复生成</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"11.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"22.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>s_a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>s_b<span class="token operator">++</span><span class="token punctuation">;</span>    a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>s_a<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>s_b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>下面放几组实测数据<p></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">69950 7010069960 7003969989 7014969928 7010270010 70134<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到即使 <code>mt19937</code> 的大区间优势没了，生成的随机数重复次数也比 <code>rand（）</code> 少，由此可见<code>mt19937</code> 的强大性能</p><h4 id="值得一提的是如果数据生成很多例如10000000，他们的输出会相同或非常接近"><a href="#值得一提的是如果数据生成很多例如10000000，他们的输出会相同或非常接近" class="headerlink" title="值得一提的是如果数据生成很多例如10000000，他们的输出会相同或非常接近"></a>值得一提的是如果数据生成很多例如10000000，他们的输出会相同或非常接近</h4><p><code>mt19937</code> 在 <code>c++11</code> 后才能使用，他的种种性能还需尝试</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随机数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凸包</title>
      <link href="/2021/08/10/tu-bao/"/>
      <url>/2021/08/10/tu-bao/</url>
      
        <content type="html"><![CDATA[<h3 id="前置知识——叉积"><a href="#前置知识——叉积" class="headerlink" title="前置知识——叉积"></a>前置知识——叉积</h3><p>在平面中我们为了度量一条直线的倾斜状态，为引入倾斜角这个概念。而通过在直角坐标系中建立 $\tan a=k$，我们实现了将几何关系和代数关系的衔接，这其实也是用计算机解决几何问题的一个核心，计算机做的是数值运算，因此你需要做的就是把几何关系用代数关系表达出来。而在空间中，为了表示一个平面相对空间直角坐标系的倾斜程度，我们利用一个垂直该平面的法向量来度量(因为这转化成了描述直线倾斜程度的问题)。</p><h4 id="求解三角形（平行四边形）面积"><a href="#求解三角形（平行四边形）面积" class="headerlink" title="求解三角形（平行四边形）面积"></a>求解三角形（平行四边形）面积</h4><p>$\lvert \vec{a}\times \vec{b}\rvert  =\lvert \vec{a}\rvert\times \lvert\vec{b}\rvert\times\sin \Theta$</p><p>$S_{\Delta ABC}=\frac{1}{2}\vec{\lvert AB\rvert }\vec{\lvert AC\rvert }\sin A = \frac{1}{2}\lvert \vec{AB}\times \vec{AC}\rvert$</p><h4 id="判断-某一点在直线左右侧"><a href="#判断-某一点在直线左右侧" class="headerlink" title="判断 某一点在直线左右侧"></a>判断 某一点在直线左右侧</h4><ul><li>若$a\times b&gt;0$ , 则 $a$ 在 $b$ 的顺时针方向。</li><li>若$a\times b&lt;0$ , 则 $a$ 在 $b$ 的逆时针方向。 </li><li>若$a\times b=0$ , 则 $a$ 与 $b$ 共线，但可能同向也可能反向。 </li></ul><h3 id="凸包"><a href="#凸包" class="headerlink" title="凸包"></a>凸包</h3><h4 id="定义为："><a href="#定义为：" class="headerlink" title="定义为："></a>定义为：</h4><p>平面的一个子集 $S$ 被称为是“凸”的，当且仅当对于任意两点 $p$，$s ∈S$，线段 $ps$ 都完全属于 $S$。（平面凸包定义）<br><img src="https://img-blog.csdn.net/20180204141337435" alt="集合"></p><p><a href="https://www.luogu.com.cn/problem/P2742">P2742 USACO5.1 圈奶牛Fencing the Cows /【模板】二维凸包</a><br></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">5000001</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">double</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> cn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> fu<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">double</span> x<span class="token punctuation">;</span>  <span class="token keyword">double</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>dian<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">==</span>b<span class="token punctuation">.</span>x<span class="token operator">?</span>a<span class="token punctuation">.</span>y<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>y<span class="token operator">:</span>a<span class="token punctuation">.</span>x<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span>po <span class="token function">n_e</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span><span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token operator">-</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>y<span class="token operator">-</span>a<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">cha</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">*</span>b<span class="token punctuation">.</span>y<span class="token operator">-</span>a<span class="token punctuation">.</span>y<span class="token operator">*</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">sq</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">get_tb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  fu<span class="token punctuation">[</span><span class="token operator">++</span>cn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>fu<span class="token punctuation">[</span><span class="token operator">++</span>cn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    po u<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    po v<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">cha</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>cn<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>      cn<span class="token operator">--</span><span class="token punctuation">;</span>      u<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fu<span class="token punctuation">[</span><span class="token operator">++</span>cn<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> end<span class="token operator">=</span>n<span class="token punctuation">;</span>  fu<span class="token punctuation">[</span><span class="token operator">++</span>cn<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>fu<span class="token punctuation">[</span><span class="token operator">++</span>cn<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    po u<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    po v<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">cha</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>cn<span class="token operator">==</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>      cn<span class="token operator">--</span><span class="token punctuation">;</span>      u<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fu<span class="token punctuation">[</span><span class="token operator">++</span>cn<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>dian<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>dian<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sort</span><span class="token punctuation">(</span>dian<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dian<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">get_tb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>ans<span class="token operator">+=</span><span class="token function">sq</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 平面几何 </tag>
            
            <tag> 凸包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强联通分量</title>
      <link href="/2021/08/10/qiang-lian-tong-fen-liang/"/>
      <url>/2021/08/10/qiang-lian-tong-fen-liang/</url>
      
        <content type="html"><![CDATA[<h3 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h3><p>如果两个顶点可以相互通达，则称两个顶点强连通(strongly connected)。如果有向图G的每两个顶点都强连通，称 G 是一个强连通图。有向图的极大强连通子图，称为强连通分量(strongly connected components)。</p><p>常用于统计环的数量，割点割边。</p><p><a href="https://www.luogu.com.cn/problem/P3388">P3388 【模板】割点（割顶）</a></p><h3 id="割点（割顶）"><a href="#割点（割顶）" class="headerlink" title="割点（割顶）"></a>割点（割顶）</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&gt;=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v<span class="token punctuation">;</span>  <span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x_h<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存边</span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_h<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_h<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> d_f<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x_x<span class="token punctuation">;</span><span class="token comment">//d_f 时间戳 l_w 可以到达最小的时间戳（判环）</span><span class="token keyword">int</span> c_c<span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>top<span class="token punctuation">,</span>b_l<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_d<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r_r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">t_j</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_x<span class="token punctuation">;</span>  <span class="token keyword">int</span> s_t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">t_j</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&gt;=</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断割点</span>        s_t<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s_t<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token operator">||</span>r_r<span class="token operator">!=</span>k<span class="token punctuation">)</span>g_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> a_s<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">r_d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    u<span class="token operator">=</span><span class="token function">r_d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token function">r_d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">==</span>v<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>r_r<span class="token operator">=</span>i<span class="token punctuation">,</span><span class="token function">t_j</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否遍历过</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>g_d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>a_s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>g_d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://www.luogu.com.cn/problem/P1656">P1656 炸铁路</a></p><h3 id="割边"><a href="#割边" class="headerlink" title="割边"></a>割边</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v<span class="token punctuation">;</span>  <span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存边</span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> l_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>d_f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_x<span class="token punctuation">,</span>f_f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span>a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_a<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>pp a<span class="token punctuation">,</span>pp b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>l<span class="token operator">==</span>b<span class="token punctuation">.</span>l<span class="token operator">?</span>a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token operator">:</span>a<span class="token punctuation">.</span>l<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">t_j</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_x<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>v<span class="token operator">!=</span>f_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若果是祖先，割边就没用了</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      f_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//建立祖先关系</span>      <span class="token function">t_j</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&gt;</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>a_s<span class="token punctuation">[</span><span class="token operator">++</span>x_a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>k<span class="token punctuation">,</span>v<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//割边判断条件</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">t_j</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每个店都要遍历到，有时间戳</span>  <span class="token function">sort</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a_s<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>x_a<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据题目要求排序</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://www.luogu.com.cn/problem/P3387">P3387 【模板】缩点</a></p><h3 id="缩点"><a href="#缩点" class="headerlink" title="缩点"></a>缩点</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> p_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v<span class="token punctuation">;</span>  <span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">,</span>i_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>i_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> d_f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_x<span class="token punctuation">,</span>c_c<span class="token punctuation">,</span>t_p<span class="token punctuation">,</span>s_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s_m<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>n_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">t_j</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_x<span class="token punctuation">;</span><span class="token comment">//初始化时间戳</span>  s_s<span class="token punctuation">[</span><span class="token operator">++</span>t_p<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//存环中的点</span>  b_b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//是否遍历过</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">t_j</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在同一环中</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">++</span>c_c<span class="token punctuation">;</span><span class="token comment">//新节点下标</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>t_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断是否遍历完这个环</span>      n_w<span class="token punctuation">[</span>s_s<span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>c_c<span class="token punctuation">;</span><span class="token comment">//赋新下标</span>      s_m<span class="token punctuation">[</span>c_c<span class="token punctuation">]</span><span class="token operator">+=</span>p_t<span class="token punctuation">[</span>s_s<span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存环节点的值的和（根据题目要求）</span>      b_b<span class="token punctuation">[</span>s_s<span class="token punctuation">[</span>t_p<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> f_f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>  f_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>s_m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找最大值</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">f_i</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>f_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新</span>  <span class="token punctuation">}</span>  f_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>m_a<span class="token punctuation">;</span><span class="token comment">//累加答案</span><span class="token punctuation">}</span><span class="token keyword">int</span> a_s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>p_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存初始边</span>    i_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    i_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>i_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">t_j</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>p_p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> p_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空从新存新边</span>  <span class="token function">memset</span><span class="token punctuation">(</span>h_d<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> h_d<span class="token punctuation">)</span><span class="token punctuation">;</span>  x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//不属于同一个环的连边（新点相当于原来的一个环）</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n_w<span class="token punctuation">[</span>i_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>n_w<span class="token punctuation">[</span>i_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>n_w<span class="token punctuation">[</span>i_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n_w<span class="token punctuation">[</span>i_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>c_c<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//便利每个新下标</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f_f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">f_i</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f_f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新更优解</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>a_s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 强联通分量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF33A What is for dinner?</title>
      <link href="/2021/08/09/cf33a/"/>
      <url>/2021/08/09/cf33a/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF33A">传送门</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>鲨鱼有 $n$ 颗牙齿，分别分布于 $m$ 行上，第 $i$ 颗牙齿有一个初始活力值 $c_i$。鲨鱼有 $k$ 个食物想要吃，但是，每吃掉一个食物就要消耗某一排牙齿的每一颗牙齿各 $1$ 点活力，而鲨鱼必须保证每个牙齿的剩余活力不能到负数。试求鲨鱼最多能吃到的食物个数。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>不难发现每排最小活力值的牙齿是整排牙齿能吃的食物的数量，用 <code>ans</code> 累加的最多吃的食物的量。</p><h3 id="求最小值"><a href="#求最小值" class="headerlink" title="求最小值"></a>求最小值</h3><p>将每排牙床赋尽量大的值，通过比较找到最小值</p><h3 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h3><p>我们只讨论了鲨鱼牙齿不好的情况，如果牙齿能吃的食物量大于总食物量，直接输出食物的量即可。</p><p>若存在空牙排，就要判断是否加上当前的最小活力，因为牙床排为空时，活力值为我们赋的的最大值。要舍去这种情况，所以定义一个 <code>bool</code>类型的数组，判断牙床是否存在牙。</p><h2 id="代码奉上"><a href="#代码奉上" class="headerlink" title="代码奉上"></a>代码奉上</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span><span class="token comment">//cin,cout输入输出 </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;limits&gt;</span><span class="token comment">//用于检测整型数据数据类型的值的范围</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span><span class="token comment">//包含min </span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token comment">//鲨鱼有n颗牙齿，分别分布于m行上，鲨鱼有k个食物想要吃。 </span><span class="token keyword">int</span> teeth<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//每排最小活力值 </span><span class="token keyword">bool</span> have<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//是否存在当前排的牙齿 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>  <span class="token comment">//要用比较来找到活力值最小的牙齿，让初始值尽量大 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    teeth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span><span class="token comment">//INT_MAX为int的最大值 在 limits 头文件中 </span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历牙 </span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token comment">//x，c分别表示这个牙齿所在的行数和初始活力值。</span>    cin<span class="token operator">&gt;&gt;</span>x<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span>    teeth<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>teeth<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最小活力牙齿 </span>    have<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//当前排存在牙齿 </span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历排 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>have<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//不存在牙齿直接跳过 </span>    ans<span class="token operator">+=</span>teeth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//计算吃最多的食物的数量 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">&gt;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//超过食物上限，只能吃到最多的食物数 </span>      ans<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//更新最多的食物量 </span>      <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//跳出 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span><span class="token comment">//输出答案 </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花</span>  <span class="token comment">//@^-^@</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1439 最长公共子序列</title>
      <link href="/2021/08/09/p1439/"/>
      <url>/2021/08/09/p1439/</url>
      
        <content type="html"><![CDATA[<h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p>通过不断改变数组状态，达到理想状态，要先找到推导的动态转移方程。</p><p>动态规划：现在决定未来，未来与过去无关。</p><h4 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h4><p>通过对题目的观察，可以发现只给了两个字符串，所以可以将问题进行转换，转换成最长不下降序列。</p><h4 id="以第一个序列为主，转化第二个序列。"><a href="#以第一个序列为主，转化第二个序列。" class="headerlink" title="以第一个序列为主，转化第二个序列。"></a>以第一个序列为主，转化第二个序列。</h4><p>现在 第一个序列为：$1,2,3,4,$……<br>而  第二个序列却是乱序，通过一的转换。</p><p>问题就变成了求最长不下降子序列。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><a href="https://www.luogu.com.cn/problem/P1439">传送门</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_m<span class="token operator">=</span><span class="token number">100001</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span>m_m<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>m_m<span class="token punctuation">]</span><span class="token punctuation">,</span>x_x<span class="token punctuation">[</span>m_m<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>m_m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span><span class="token comment">//长度 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>x_x<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//便利初值，即将第一字符串变成123…… </span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x7f7f7f7f</span><span class="token punctuation">;</span><span class="token comment">//设置最大值，方便找最小值 </span>  <span class="token punctuation">}</span>  f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>o_o<span class="token punctuation">,</span>n_n<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x_x<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span><span class="token operator">++</span>o_o<span class="token punctuation">]</span><span class="token operator">=</span>x_x<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//二分策略 </span>          n_n<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//中间的数 mid </span>          <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token operator">&gt;</span>x_x<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>r<span class="token operator">=</span>n_n<span class="token punctuation">;</span><span class="token comment">//右边界便利 </span>        <span class="token keyword">else</span> l<span class="token operator">=</span>n_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//左边界便利 </span>      <span class="token punctuation">}</span>      f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>x_x<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//搜索最长长度 </span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>o_o<span class="token punctuation">;</span><span class="token comment">//输出最长上升序列 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完美收官@*_*@ </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1043 数字游戏</title>
      <link href="/2021/08/09/p1043/"/>
      <url>/2021/08/09/p1043/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1043">传送门</a></p><h3 id="一道dp"><a href="#一道dp" class="headerlink" title="一道dp"></a>一道dp</h3><p>首先分析发现，给出的是一个环，而要分割这个环是相当麻烦的事情，这里可以暴力枚举一下，枚举开头的情况，再将所有情况算出来的结果进行比对，最终找出最大值的最小值。</p><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p>这里可以使用前缀和，计算得更方便一些，大大提高了效率。</p><h3 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h3><p>可以将数组存两次，更方便查询与处理。</p><p>例： $1,2,3$ -&gt; $1,2,3,1,2,3$</p><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><p>枚举左右端点，惊进行择优</p><p>再将所有的最大值和最小值比对，找到最终结果即可</p><h3 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">o_o</span> <span class="token expression"><span class="token number">0xfffffff</span> </span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//区间[l,r]内分成i段的最大/小值 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a存放前缀和 </span><span class="token keyword">int</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//在复制一遍，直接接上 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前缀和 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//暴力枚举左右点~初始化 </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token operator">=</span>l<span class="token punctuation">;</span>r<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span>        b<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">mod</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化不分段的状态 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//暴力枚举左右点~开始寻找 </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token operator">=</span>l<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span>          c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>o_o<span class="token punctuation">;</span><span class="token comment">//求最小值时记得把数组初始化为极大值 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举分段数 </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举左端点 </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token operator">=</span>l<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举右端点 </span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>l<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举区间断点 注意范围 </span>                c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token function">mod</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//dp 找最小值 </span>                b<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token function">mod</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//dp 找最大值 </span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">int</span> a_a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i_i<span class="token operator">=</span>o_o<span class="token punctuation">;</span><span class="token comment">//答案初始化 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历所有的答案 </span>        a_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_a<span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从前往后扫一遍 </span>        i_i<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>i_i<span class="token punctuation">,</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到真正的最大值与最小值 </span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>i_i<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>a_a<span class="token punctuation">;</span><span class="token comment">//输出 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2233 公交车路线</title>
      <link href="/2021/08/09/p2233/"/>
      <url>/2021/08/09/p2233/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2233">传送门</a></p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p>回忆一下，矩阵式怎么运算的</p><script type="math/tex; mode=display">\left[\begin{matrix}1 & 3 \\2 & 2 \\\end{matrix}\right]\times\left[\begin{matrix}2 & 4 & 3 \\3 & 2 & 1 \\\end{matrix}\right]=\left[\begin{matrix}11 & 10 & 6 \\10 & 12 & 8 \\\end{matrix}\right]</script><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">形状上：2*2 和 2*3 的矩阵乘积后,结果是 2*3 的矩阵。即 a*b 矩阵 和 c*d 的矩阵乘积结果是 a*d 的矩阵。其中 b 和 c 必须相等。原因看下面。运算法则：对于结果矩阵的第 i 行第 j 列的位置的结果是由前一个矩阵的对应的行。和后一个矩阵对应的列。对应位置乘积和获得的。    比如第 1 行第 1 列的 11.是由前矩阵的第一行 (1,3) 和后矩阵的第一列 (2,3) 对应位置乘积和。    1*2 + 3*3 = 11 获得的。    如果上述 b 和 c 如果不相等。那么会有地方"失配"没有数值可以进行计算。不符合矩阵乘法定义。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>发现车站组成了一个环，所以显然可以用矩阵，并且，一个车站只能到相邻两个车站，可以列出矩阵：</p><script type="math/tex; mode=display">\left(\begin{matrix}0 & 1 & 0 & 0 & 0 & 0 & 0 & 1 \\1 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\  0 & 1 & 0 & 1 & 0 & 0 & 0 & 0 \\0 & 0 & 1 & 0 & 1 & 0 & 0 & 0 \\ 0 & 0 & 0 & 1 & 0 & 1 & 0 & 0 \\0 & 0 & 0 & 0 & 1 & 0 & 1 & 0 \\0 & 0 & 0 & 0 & 0 & 1 & 0 & 1 \\1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 \\\end{matrix}\right)</script><p>但是，题中有这样一句话：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">注意 tiger 一旦到达公交站 E，他不会愚蠢到再去换车。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以到了E就不能动了,所以矩阵改为如下模样：</p><script type="math/tex; mode=display">\left(\begin{matrix}0 & 1 & 0 & 0 & 0 & 0 & 0 & 1 \\1 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\  0 & 1 & 0 & 1 & 0 & 0 & 0 & 0 \\0 & 0 & 1 & 0 & 1 & 0 & 0 & 0 \\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\0 & 0 & 0 & 0 & 1 & 0 & 1 & 0 \\0 & 0 & 0 & 0 & 0 & 1 & 0 & 1 \\1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 \\\end{matrix}\right)</script><p>套矩阵快速幂求解即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//辅助矩阵 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//答案矩阵 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x_x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//临时矩阵 </span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">k_m</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//矩阵快速幂 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新答案矩阵 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//将答案矩阵存入临时矩阵 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          x_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//重置答案矩阵 </span>        <span class="token punctuation">}</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举答案矩阵和辅助矩阵（第一个矩阵）的行 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举答案矩阵的行的第几个数（列）和临时矩阵（第二个矩阵）的列 </span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举辅助矩阵（第一个矩阵）的列和临时矩阵（第二个矩阵）的行 </span>            a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>x_x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//存入答案矩阵 </span>    <span class="token punctuation">}</span>    <span class="token comment">//更新辅助矩阵 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//将辅助矩阵存入临时矩阵</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//重置辅助矩阵 </span>      <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举辅助矩阵和临时矩阵（第一个矩阵）的行 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举辅助矩阵的行和临时矩阵（第二个矩阵）的列 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举临时矩阵（第一个矩阵）的列和临时矩阵（第二个矩阵）的行 </span>          x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>x_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>x_x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//存入辅助矩阵 </span>    k<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">yv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  a_s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  a_s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  a_s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  a_s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  a_s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  a_s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入幂 </span>  n<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">//矩阵大小 </span>  <span class="token function">yv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化矩阵 </span>  <span class="token function">k_m</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//矩阵快速幂 </span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld "</span><span class="token punctuation">,</span>a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">%</span>m_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是哪个车站输出那个（E==5）</span><span class="token comment">//  完整矩阵 </span><span class="token comment">//  for(int i=1;i&lt;=n;i++){</span><span class="token comment">//    for(int j=1;j&lt;=n;j++){</span><span class="token comment">//      cout&lt;&lt;a_s[i][j]&lt;&lt;" ";</span><span class="token comment">//    }</span><span class="token comment">//    cout&lt;&lt;endl;</span><span class="token comment">//  } </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2467 [SDOI2010]地精部落</title>
      <link href="/2021/08/09/p2467/"/>
      <url>/2021/08/09/p2467/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2467">传送门</a></p><h3 id="读题"><a href="#读题" class="headerlink" title="读题"></a>读题</h3><p>可以发现，需要山峰山谷相接的山脉。例如：$1423$,$2143$。<br>乍一看并没有什么头绪。所以需要亿个小小的表。 </p><h3 id="打表"><a href="#打表" class="headerlink" title="打表"></a>打表</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">3位数：      4位数：(先峰) (先谷)   (先峰) (先谷) 山峰   山谷    山峰  山谷 132           1324 213   231     1423 312           2314  2134                     2413               3412  3142                     3241                     4132                     4231<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="找规律"><a href="#找规律" class="headerlink" title="找规律"></a>找规律</h3><ul><li>所有的山峰情况让 $n+1$ 减每一位可以得到所有的山谷情况，所以要计算总和只用求出先锋<strong>或</strong>先谷全部情况在 $\times2$ 即可   </li><li>$n$ 位数的情况皆可以有 $n-1$ 位数的情况推出来。例如：$1324$，$1423$。可以分成 $1$—$324$，和 $1$—$423$。现在我们将 $324$ 和 $423$ 看成三位数，合法化后就是 $213$ 和 $312$。</li></ul><p><strong>这里说的合法化就是 $n$ 位数有 $1$~$n$ 组成的峰谷相连的数列，例如 $324$ 的合法化：$324$ 是三位数，应由 $1$，$2$，$3$ 组成，所以合法化后就是 $213$，符合峰谷相连，且山脉大致形状不变（左峰比右峰低）</strong></p><p>这不就是 $3$ 位数中先峰的情况之和么。再比如：$2143$,$2314$,$2413$.可以分成两类：</p><ol><li>第一类是 $2143$（先峰）；</li><li>第二类是 $2314$,$2413$（先谷）。</li></ol><ul><li>先山峰：$2143$ 可分成 $2$—$143$。$143$ 合法化后就是 $132$.可以发现同样是 $3$ 位数情况里的第一个。至于为什么<strong>没有</strong>合法化后是 $231$（同样是先谷山脉）在后面说明</li><li>先山谷：$2$—$314$，$2$—$413$ 合法化后是 $213$ 和 $312$.也都是 $3$ 位数中先山峰的情况。</li><li>如果将 $4$ 位数中 $3$ 开头的情况也打出来会发现：与 $2$ 开头的情况恰好相反。即：$3$—$412$ 合法化后是 $312$，没有 $213$ 的情况。想想为什么？</li></ul><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>现在假如有以 $2$ 开头的 $4$ 位数，后三位合法化后是 $231$ 的情况。现在我们要逆推一下，这个 $4$ 位数如果合法是什么。<br>    $2$—$231$。不能存在两个 $2$，所以要做一些操作。</p><ul><li>首先，既然选了 $3$ 位数中的先山谷，那几一定要比前面的开头数小。</li><li>所以只能将 $231$ 中的 $2$ 缩小，缩小后又与原来的 $1$ 冲突。</li><li>现在就只能放弃或改变山峰的形状了（不再是左谷比右谷高的山脉特点）。</li></ul><p><strong>事实证明，不存在 $2$—$231$ 的合法山脉</strong></p><p>同样 $3$—$213$ 同样不存在（证明方法相似，不再赘述）</p><h3 id="规律"><a href="#规律" class="headerlink" title="规律"></a>规律</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">现在将打的表整理一下：            n=3       n=4         n=5序列开头数字  先锋   先谷    先锋   先谷    先锋   先谷  1:      0      1       0     2       0      5  2:      1      1       1     2       2      5  3:      1      0       2     1       4      4  4:                     2     0       5      2  5:                                   5      0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上面的推论和图可以发现递推规律：<br>  设$g_i[n]$为输入$i$时的山谷，设$f_i[n]$为输入的$i$时的山峰。</p><p>拿$i=4$举例</p><p>$g_4[0]=f_3[0]+f_3[1]+f_3[2]+f_3[3]$</p><p>$g_4[1]=f_3[1]+f_3[2]+f_3[3]$</p><p>$g_4[2]=f_3[2]+f_3[3]$</p><p>$g_4[3]=f_3[3]$</p><p>$ans=g_4[0]+g_4[1]+g_4[2]+g_4[3];$</p><p>$ans*=2;$//山峰和山谷情况一样多</p><p> <strong>运算时记得及时取模</strong></p><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p>用我们发现的规律每回都求一次和，显然会<strong>TLE</strong>。。。<del>别问我是怎么知道的</del></p><p>所以我们需要一种更快的方式来加和，仔细观察上面的规律中的公式，反过来看不就是一个<strong>前缀和</strong>么！！所以完全可以倒序计算存储。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>p<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> now_xvlie<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\\当前序列，存先锋<span class="token keyword">long</span> <span class="token keyword">long</span> nest_xvlie<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\\ 前缀和，也是下一个序列倒序，即下一个序列先谷<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\\更新下一个序列，即求当前序列的前缀和  nest_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">(</span>nest_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nest_xvlie<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>now_xvlie<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">gai</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\\更改当前序列，递推出下一个序列  <span class="token function">update</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    now_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nest_xvlie<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\\逆序存储  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\\输出  <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>now_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ans<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">;</span>  now_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>now_xvlie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\\初始化，注意n<span class="token operator">&gt;=</span><span class="token number">3</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\\从 <span class="token number">3</span> 开始    <span class="token function">gai</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">out</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>这个代码可以看到从 $3$ 到 $n$ 的先锋和先谷顺序以及总和（注意数据范围）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>p<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> now_xvlie<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> next_xvlie<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>now_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" total:"</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ans<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  next_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" next_xvlie:"</span><span class="token operator">&lt;&lt;</span>next_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">(</span>next_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>next_xvlie<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>now_xvlie<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>next_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">gai</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" n="</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token function">update</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" now_xvlie:"</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    now_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>next_xvlie<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>now_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token function">out</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">;</span>  now_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>now_xvlie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  next_xvlie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>next_xvlie<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" n=3"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" next_xvlie:"</span><span class="token operator">&lt;&lt;</span>next_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>next_xvlie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>next_xvlie<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" now_xvlie: "</span><span class="token operator">&lt;&lt;</span>now_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>now_xvlie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>now_xvlie<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token function">out</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">gai</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token function">out</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1072 Hankson的趣味题</title>
      <link href="/2021/08/09/p1072/"/>
      <url>/2021/08/09/p1072/</url>
      
        <content type="html"><![CDATA[<h3 id="趣味题"><a href="#趣味题" class="headerlink" title="趣味题"></a>趣味题</h3><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>对于两个正整数 $a$，$b$ 设 $\gcd(a,b)=k$，则存在 $\gcd(\frac{ a }{ k },\frac{ b }{ k })=1$。</p><p>$\gcd(\frac{ x }{ a_1 },\frac{ a_0 }{ a_1 })=1$</p><p>$\gcd(\frac{ b_1 }{ b_0 },\frac{ b_1 }{ x })=1$</p><p>然后通过暴力枚举将因数试出，再带如另一因数，解出答案即可</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">*</span>x<span class="token operator">&lt;=</span>b1<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//暴力枚举 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>b1<span class="token operator">%</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>a1<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token operator">/</span>a1<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>b1<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//统计 </span>                <span class="token keyword">int</span> y<span class="token operator">=</span>b1<span class="token operator">/</span>x<span class="token punctuation">;</span><span class="token comment">//找到另一个因子</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//相同跳出 </span>                <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">%</span>a1<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>y<span class="token operator">/</span>a1<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>b1<span class="token operator">/</span>y<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//统计 </span>            <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以像上面代码一样，对便利范围缩小，进行时间大幅度的优化</p><p><del>这可比全搜一遍快得多</del></p><p>看这两个式子，发现 $x$ 是 $a1$ 的整数倍而且是 $b_1$ 的因子</p><h3 id="再看上面两个式子"><a href="#再看上面两个式子" class="headerlink" title="再看上面两个式子"></a>再看上面两个式子</h3><p>$\gcd(\frac{ x }{ a_1 },\frac{ a_0 }{ a_1 })=1$</p><p>$\gcd(\frac{ b_1 }{ b_0 },\frac{ b_1 }{ x })=1$</p><h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><p>$\sqrt b_1$ 枚举 $b_1$ 的因子，也就是 $x$，如果这个数是 $a_1$ 的整数倍并且满足那两个式子，则 <code>ans++</code></p><p><a href="https://www.luogu.com.cn/problem/solution/P1072">传送门</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//最大公约数 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//a组数据 </span>        <span class="token keyword">int</span> a0<span class="token punctuation">,</span>a1<span class="token punctuation">,</span>b0<span class="token punctuation">,</span>b1<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>a0<span class="token operator">&gt;&gt;</span>a1<span class="token operator">&gt;&gt;</span>b0<span class="token operator">&gt;&gt;</span>b1<span class="token punctuation">;</span><span class="token comment">//两个式子的数 </span>        <span class="token keyword">int</span> p<span class="token operator">=</span>a0<span class="token operator">/</span>a1<span class="token punctuation">,</span>q<span class="token operator">=</span>b1<span class="token operator">/</span>b0<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">*</span>x<span class="token operator">&lt;=</span>b1<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//暴力枚举 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b1<span class="token operator">%</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>a1<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token operator">/</span>a1<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>b1<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//统计 </span>                <span class="token keyword">int</span> y<span class="token operator">=</span>b1<span class="token operator">/</span>x<span class="token punctuation">;</span><span class="token comment">//找到另一个因子</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//相同跳出 </span>                <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">%</span>a1<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>y<span class="token operator">/</span>a1<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>b1<span class="token operator">/</span>y<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//统计 </span>            <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出 </span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1494 小Z的袜子</title>
      <link href="/2021/08/09/p1494/"/>
      <url>/2021/08/09/p1494/</url>
      
        <content type="html"><![CDATA[<h3 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h3><p>莫队可以快速找到某区间的元素个数，元素最大值，最小值……</p><h3 id="遍历莫队"><a href="#遍历莫队" class="headerlink" title="遍历莫队"></a>遍历莫队</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">举个小例子：      1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10设： l为左边界，r为右边界，sum为元素个数，shu为现有的数存的数组（假设数据很小）        求1,2区间分别出现次数最多的数的和（若一样多，以最小的数为例）。1区间：0~62区间：3~8    先来求1区间出现最多次的数：数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点 rsum=1,shu<span class="token punctuation">[</span>1<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>1<span class="token punctuation">]</span>=1)      数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点   rsum=2,shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>=1)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点     rsum=3,shu<span class="token punctuation">[</span>4<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>4<span class="token punctuation">]</span>=1)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点       rsum=4,shu<span class="token punctuation">[</span>2<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>2<span class="token punctuation">]</span>=1)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点         rsum=5,shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>=2)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点           rsum=6,shu<span class="token punctuation">[</span>4<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>4<span class="token punctuation">]</span>=2)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点             rsum=7,shu<span class="token punctuation">[</span>2<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>2<span class="token punctuation">]</span>=2)上面可以发现，2,3,4都出现了两次，所以取2（按题意）    下面 找区域2，出现次数最多的数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="出现区域2次数最多的数"><a href="#出现区域2次数最多的数" class="headerlink" title="出现区域2次数最多的数"></a>出现区域2次数最多的数</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">2区间：3~8数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点             rsum=7,shu<span class="token punctuation">[</span>2<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>2<span class="token punctuation">]</span>=2)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点   l右端点             rsum=6,shu<span class="token punctuation">[</span>1<span class="token punctuation">]</span>--;(shu<span class="token punctuation">[</span>1<span class="token punctuation">]</span>=0)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点     l右端点             rsum=5,shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>--;(shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>=1)   数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点       l右端点             rsum=4,shu<span class="token punctuation">[</span>4<span class="token punctuation">]</span>--;(shu<span class="token punctuation">[</span>4<span class="token punctuation">]</span>=1)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点       l右端点               rsum=5,shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>=2)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点       l右端点                 rsum=6,shu<span class="token punctuation">[</span>6<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>6<span class="token punctuation">]</span>=1)        由上述可以得到2,3次数一样多取2综上，答案呼之欲出了，2+2=4。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h3><p>因为有好几组询问，所以每回莫队都是要变得，通过上一个结果，该加的加，该减的减，再通过数学的$C^n_m$运算，就可以搞定了</p><p><a href="https://www.luogu.com.cn/problem/P1494">传送门</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>pp<span class="token punctuation">[</span><span class="token number">50005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">50005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> s<span class="token punctuation">[</span><span class="token number">50005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">data</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>id<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">50005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> data <span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> data <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pp<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">==</span>pp<span class="token punctuation">[</span>b<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>l<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">ccmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> data <span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> data <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>id<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> add<span class="token punctuation">)</span><span class="token punctuation">{</span>    ans<span class="token operator">-=</span>s<span class="token punctuation">[</span>c<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span>s<span class="token punctuation">[</span>c<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span>c<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span>add<span class="token punctuation">;</span>    ans<span class="token operator">+=</span>s<span class="token punctuation">[</span>c<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span>s<span class="token punctuation">[</span>c<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">gai</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>r<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>r<span class="token operator">&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>r<span class="token operator">--</span><span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>l<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>l<span class="token operator">&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>l<span class="token operator">--</span><span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">=</span>ans<span class="token operator">-</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1ll</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> g<span class="token operator">=</span><span class="token function">__gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">/=</span>g<span class="token punctuation">;</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token operator">/=</span>g<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b_b<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>b_b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gai</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>ccmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld/%lld\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2602 数字计数</title>
      <link href="/2021/08/09/p2602/"/>
      <url>/2021/08/09/p2602/</url>
      
        <content type="html"><![CDATA[<h3 id="统计题"><a href="#统计题" class="headerlink" title="统计题"></a>统计题</h3><p>数字统计可以用一些特殊的方法来求</p><h3 id="两位数的时候"><a href="#两位数的时候" class="headerlink" title="两位数的时候"></a>两位数的时候</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">例如：10~99 中 0，1，2，3，4，5，6，7，8，9 分别出现的次数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以先看最高位有 $1$~$9$，$9$ 种选择，再看各位，$0$~$9$，$0$ 种选择，也就是说，只看十位 $1$x 有 $10$ 个 $1$，看个位 x$1$ 有 $9$ 个$1$。</p><p>$1$ 出现次数可以表达成 $1\times9+1\times10=19$ 和 $2$，$3$，$4$，$5$，$6$，$7$，$8$，$9$ 一样，但 $0$ 不一样，因为不能在最高位，所以出现的次数为 $1\times9=9$ 次<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">答案为：9，19，19，19，19，19，19，19，19，19<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h3 id="三位数的时候"><a href="#三位数的时候" class="headerlink" title="三位数的时候"></a>三位数的时候</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">例如：100~999 中 0，1，2，3，4，5，6，7，8，9 分别出现的次数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以先看最高位有 $1$~$9$,$9$ 种选择，再看十位，$0$~$9$，$10$ 种选择，再看个位，$0$~$9$，$10$ 种选择，也就是说：</p><p>只看百位 $1$xx 有 $100$ 个 $1$，只看十位 x$1$x 有 $9\times10$ 个 $1$，只看个位 xx$1$ 有 $9\times10$ 个一。</p><p>$1$ 出现的次数可以表达成 $100+9\times10+9\times10=280$</p><p>$0$ 呢？$9\times10+9\times10=180$</p><h3 id="四位数的时候（重点）"><a href="#四位数的时候（重点）" class="headerlink" title="四位数的时候（重点）"></a>四位数的时候（重点）</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">例如：1000~9999 中 0，1，2，3，4，5，6，7，8，9 分别出现的次数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以先看最高位有 $1$~$9$,$9$ 种选择，再看百位，$0$~$9$，$10$ 种选择，再看十位，$0$~$9$，$10$ 种选择，再看个位，$0$~$9$，$10$种选择，也就是说，</p><p>只看千位 $1$xxx 有 $1000$ 个 $1$，只看百位 x$1$xx 有 $9\times10\times10$ 个 $1$，只看十位 xx$1$x 有 $9\times10\times10$ 个 $1$ ，只看个位 xxx$1$ 有 $9\times10\times10$ 个一。</p><p>$1$ 出现的次数可以表达成 $1000+9\times10\times10+9\times10*\times10+9\times10\times10=3700$</p><p>$0$ 呢？$9\times10\times10+9*10\times10+9\times10\times10=2700$</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>是 $C^m_n$？但是：<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">例如：673~9283 中 0，1，2，3，4，5，6，7，8，9 分别出现的次数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">通过仔细地观察，可以发现，可以将这些数拆分。1673-&gt;1000+600+70+3  经过细致的观察，发现可以寻找一个中间量：2000，先求出 2000~9283 中分别的数，再求出 1673~2000 中各数的出现次数。还要拆分： 9283-&gt;9000+200+80+3变成了 2000~9283-&gt;2000~9000+9001~9283，9201-&gt;9280，9281-&gt;92831673-&gt;2000 就先对容易多了不断拆分即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>碰见位数不同的就可以 $0$ 补位！！！</p><p><a href="https://www.luogu.com.cn/problem/P2602">传送门</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>w_w<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ji</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>xy<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> num<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        num<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        x<span class="token operator">=</span>x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        xy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        xy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>w_w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> num2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num2<span class="token operator">=</span>num2<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        xy<span class="token punctuation">[</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span>num2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        xy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-=</span>w_w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>    w_w<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">15</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>w_w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        w_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">10</span><span class="token operator">*</span>w_w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ji</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ji</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3355 骑士共存问题</title>
      <link href="/2021/08/09/p3355/"/>
      <url>/2021/08/09/p3355/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3355">传送门</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>由题可知，有很多种元素。例如：马的走法，有障碍物……</p><p>那么就需要分别讨论，找到题的共性来解决。</p><h4 id="问题特性"><a href="#问题特性" class="headerlink" title="问题特性"></a>问题特性</h4><p>不难发现，只要将网格标记后就行了。因为都是马，也只有马。所以如果一个方格被标记，就不能放马。同理，如果一个个并未标记，那么一定可以放马。</p><h4 id="马的走法"><a href="#马的走法" class="headerlink" title="马的走法"></a>马的走法</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">o x o x ox o o o xo o m o ox o o o xo x o x o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 $m$ 代表马，$x$ 代表不能走的地方。<br>再多举几个例子，通过上面问题特性的判断，在画一个图。<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">x m x m xm x m x mx m x m xm x m x mx m x m x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>不难发现一些显而易见的规律了。但是仍然会有一些差别，如下：</p><p>情况 1：<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">x m x m xm x m x mx m x m xm x m x mx m x m x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>和：</p><p>情况 2<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">m x m x mx m x m xm x m x mx m x m xm x m x m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>就有本质上的差别。马的数量是有差别的。</p><p>所以，在没有就障碍的情况下，最优解为：</p><p>$n$ 为棋盘大小。</p><p>$n\mod2==0$ 时 $ans=\frac{n^2}{2}$;</p><p>$n\mod2==1$ 时 $ans=\frac{n^2}{2}+1$;</p><h4 id="A"><a href="#A" class="headerlink" title="A*"></a>A*</h4><p>搜索，但对于每种路径有一个期望，若搜索路径过程中，消费大于期望，则放弃本路径。从而提升效率。</p><h4 id="A-算法注意"><a href="#A-算法注意" class="headerlink" title="A*算法注意"></a>A*算法注意</h4><p>注意，障碍的地方不能放士兵！！！所以个能会有空白，只要是空白一定可以放士兵，但记得的更新当前的值。</p><p>最重要的是不知道现在是情况一和情况二那个多，所以最好进行一次比较。确保最优解。记得方法合理即可，以防TLE。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">2000010</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> ma_am<span class="token operator">=</span><span class="token number">1000000010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>s<span class="token punctuation">,</span>t<span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">edge</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> adj<span class="token punctuation">,</span>nex<span class="token punctuation">,</span>fw<span class="token punctuation">;</span><span class="token punctuation">}</span>e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>top<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span>  e<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">{</span>y<span class="token punctuation">,</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>z<span class="token punctuation">}</span><span class="token punctuation">;</span>  g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>top<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> dep<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>cur<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> Q<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">b_b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cur<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>vis<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>dep<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span>Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nex<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> to<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fw<span class="token punctuation">)</span><span class="token punctuation">{</span>        vis<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        dep<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">=</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">d_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> F<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>F<span class="token operator">||</span>x<span class="token operator">==</span>t<span class="token punctuation">)</span>    <span class="token keyword">return</span> F<span class="token punctuation">;</span>  <span class="token keyword">int</span> flow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> to<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span> cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>dep<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span>f<span class="token operator">=</span><span class="token function">d_d</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>F<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fw<span class="token operator">-=</span>f<span class="token punctuation">;</span>      e<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fw<span class="token operator">+=</span>f<span class="token punctuation">;</span>      flow<span class="token operator">+=</span>f<span class="token punctuation">,</span>F<span class="token operator">-=</span>f<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>F<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> flow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> G<span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tx<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> ty<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">p</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> xt<span class="token operator">=</span>tx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">,</span>yt<span class="token operator">=</span>ty<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xt<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>xt<span class="token operator">&gt;</span>n<span class="token operator">||</span>yt<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>yt<span class="token operator">&gt;</span>n<span class="token operator">||</span>G<span class="token punctuation">[</span>xt<span class="token punctuation">]</span><span class="token punctuation">[</span>yt<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">p</span><span class="token punctuation">(</span>xt<span class="token punctuation">,</span>yt<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>ma_am<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span>xt<span class="token punctuation">,</span>yt<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">p</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">add</span><span class="token punctuation">(</span>n<span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token function">p</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  ans<span class="token operator">=</span>n<span class="token operator">*</span>n<span class="token operator">-</span>m<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">=</span>t<span class="token operator">=</span>n<span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">b_b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ans<span class="token operator">-=</span><span class="token function">d_d</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>ma_am<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> A* </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P7285 「EZEC-5」修改数组</title>
      <link href="/2021/08/09/p7285/"/>
      <url>/2021/08/09/p7285/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P7285">传送门</a></p><h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><p>给定一个长度为 $n$、元素由 $0$ 或 $1$ 组成的数组。</p><p>现在可以选择若干（可以为 $0$）个值为 $0$ 的元素，将其修改为 $1$。</p><p>记：</p><ol><li><p>$x$ 为数组中最长连续 $1$ 子段的长度（规定，若所有数均为 $0$，则 $x$ 为 $0$；</p></li><li><p>$y$ 为修改的元素的个数。</p></li></ol><p>求要怎么修改才能使 $x-y$ 最大，并构造一个方案（输出修改后的数组）。</p><h3 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h3><p>我们要 $1$ 尽量长，修改的尽量少。</p><h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><p>我们在把题读一遍</p><p>$x$ 为数组中最长连续 $1$ 子段的长度</p><p>那么每修改一个数，$x$ 会加 $1$</p><p>$y$ 为修改的元素的个数</p><p>那么每修改一个数，$y$ 会加 $1$</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>于是题目变成了给的数组中有多少个 $1$</p><p>而要输出改后的数组，就可以全部输出 $1$ 即可</p><p>因为不管修改了多少个，给的数组的 $1$ 的个数不会变</p><p>题目：如有多个方案，任意输出一种即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token comment">//t组数据</span>  cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//n为数组长度,sum记录1的个数</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> x<span class="token punctuation">;</span>      cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>sum<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">//可以全部输出 1。</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//记得每个数据结束换行</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2821 变幻数</title>
      <link href="/2021/08/09/p2821/"/>
      <url>/2021/08/09/p2821/</url>
      
        <content type="html"><![CDATA[<h3 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h3><p><a href="https://www.luogu.com.cn/problem/P2821">传送门</a></p><h4 id="题目定义"><a href="#题目定义" class="headerlink" title="题目定义"></a>题目定义</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">给定一个十进制正整数 n，它的递归变幻数定义如下：1．如果 n 的位数多于 1 位（忽略前置的0），将 n 的各个位上的数相乘，乘积为 m。称 m 为 n 的子变幻数，n 称为 m 的父变幻数。求一个数的变幻数等于求其子变幻数。即求 n 的变幻数等于求 m 的变幻数。2．如果 n 的位数只有一位，n 的变幻数即为它本身。    如求 679 的变幻数过程为：679 -&gt; 378(=6*7*9) -&gt; 168(=3*7*8) -&gt; 48(=1*6*8) -&gt; 32(=4*8) -&gt; 6(=2*3)，所以 679 的变幻数为 6。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><p>如果要逆着求，可以先分解。于是就有了第一个思路：分解。</p><h4 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h4><p>以样例给的数先分解一波：枚举所有因数，再找最小的。</p><p>$48:1,2,3,4,6,8,12,16,24,48$</p><p>因为是每位相乘的得数，所以可以先排除：</p><p>$12,16,24,48$</p><p>剩下：</p><p>$2,3,4,6,8$ 要求最小的组合，那么一定不会用到  $1$。毕竟没啥用，还站着一位呢。而且剩下的数的组合，从高位到低位一定是字典序。</p><h3 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h3><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><ul><li><p>$48=2\times3\times8$//毕竟不能出现两位数，能少位就少位</p></li><li><p>$48=3\times4\times4$</p></li><li><p>$48=6\times8$</p></li></ul><p>显然，$3$ 最小</p><h4 id="规律"><a href="#规律" class="headerlink" title="规律"></a>规律</h4><p>通过上面的分解至少可以发现规律，尽量分成和最小的因数组。位数也尽量少。如果分解后让有高位数，就继续分解即可。最后再排次序即可。</p><h4 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h4><h5 id="高精"><a href="#高精" class="headerlink" title="高精"></a>高精</h5><p>需要高精存数与作除，但会发现个问题，上面说会分解，还有可能会很大的除因数，</p><p>所以一定还有玄机！！！</p><h5 id="再分解"><a href="#再分解" class="headerlink" title="再分解"></a>再分解</h5><p>上面的分解最主要的就是分的尽量少，但是很有可能会出现特别情况。比如：最后出现$2\times2\times3\times4\times……$</p><p>所以并不是最优解！！！</p><p>那怎么做？既然是尽量少，还要&lt;=$9$</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>就可以从 $9$-&gt;$2$ 依次便利出结果，一定是最优解！！！</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>len<span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span><span class="token operator">=</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      y<span class="token operator">=</span>y<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      y<span class="token operator">%=</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>x<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>      v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        y<span class="token operator">=</span>y<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token operator">/</span>x<span class="token punctuation">;</span>y<span class="token operator">%=</span>x<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>l<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">!=</span>l<span class="token punctuation">)</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"There is no such number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 高精 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P7589 黑白棋（2021 CoE-II B）</title>
      <link href="/2021/08/09/p7589/"/>
      <url>/2021/08/09/p7589/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P7589">传送门</a></p><h3 id="简化题意"><a href="#简化题意" class="headerlink" title="简化题意"></a>简化题意</h3><p>有很多条线，每条线上都有两人的棋，靠近对方的棋叫<strong>前进</strong>，远离叫<strong>后退</strong>，后退有次数的距离限制，而前进没有，先走走不了的一方输。</p><h3 id="情况分析"><a href="#情况分析" class="headerlink" title="情况分析"></a>情况分析</h3><p>后退不需考虑：一方只要后退，对方就可以前进相同的距离。</p><p>那么，现在只用考虑前进了，当两人的棋挨在一起的时候，本条线就走不了了。</p><p>因为两人足够聪明，所以当他们发现情况不利时，会尽量打破这种可能，举个例子：</p><p>—-A——B—-（A：Alice B：Bob）</p><p>如果只有一条线，Alice 的棋会直接对到 Bob 的棋的前面，取得胜利；但是如果还有一条两人的棋没有对到一起的情况，Alice 就不会这么做，但她可以对到 Bob 的棋的前一个格处。</p><p>———A-B—-（A：Alice B：Bob）</p><p>这样另一条线的 Bob 的棋不会直接对上，为了这种解决情况，他也会在另一条线上，对在 Alice 的棋的前面的一格，而这种情况，Alice 会必输。</p><p>所以聪明的 Alice 在一开始，为了后面有路可走，可能会如下：</p><p>——-A—B—-（A：Alice B：Bob）</p><p>而 Bob 也会随机应变……</p><p>因为两方都非常聪明，就可能会出现每个人的棋就会一步一步向前走。</p><h3 id="异或处理"><a href="#异或处理" class="headerlink" title="异或处理"></a>异或处理</h3><p>我们就可以统计两人的间距和来判断谁先无路可走，我们可以在这里用异或快速处理。</p><p>例如：</p><p>—-A—-B—-</p><p>—-A—-B—-</p><p>两人一步一步走，可以想象 Alice 只走上面，Bob 只走下面，会发现两人走的次数相同，异或一下就抵消了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token comment">//多测 </span><span class="token keyword">int</span> b_b<span class="token punctuation">;</span><span class="token comment">//判断输赢 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b_b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>w<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      b_b<span class="token operator">^=</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token operator">-</span>w<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//异或距离，注意两点距离为 abs（a-b）-1 </span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//结果输出 </span>    <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快读</title>
      <link href="/2021/08/09/kuai-du/"/>
      <url>/2021/08/09/kuai-du/</url>
      
        <content type="html"><![CDATA[<h3 id="快读模板"><a href="#快读模板" class="headerlink" title="快读模板"></a>快读模板</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契</title>
      <link href="/2021/08/09/fei-bo-na-qi/"/>
      <url>/2021/08/09/fei-bo-na-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="斐波那契"><a href="#斐波那契" class="headerlink" title="斐波那契"></a>斐波那契</h3><p>首先回忆一下这是个什么东西：</p><p>（别名：兔子数列）</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">数：  1 1 2 3 5 8 13 21 34 55 89 ……下标：1 2 3 4 5 6 7  8  9  10 11 ……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="通项公式"><a href="#通项公式" class="headerlink" title="通项公式"></a>通项公式</h3><p>$\frac{1}{\sqrt5}[(\frac{1+\sqrt5}{2})^n-(\frac{1-\sqrt5}{2})^n]$</p><p>提示：递推公式推论即可</p><p>$F[n]=F[n-1]+F[n-2]$</p><p>$F[1]=1$</p><p>$F[2]=1$</p><h3 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h3><p>和最大公约数</p><p>$gcd(F(n)+F(m))=F(gcd(n,m))$</p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><script type="math/tex; mode=display">\left[\begin{matrix}1 & 3 \\2 & 2 \\\end{matrix}\right]\times\left[\begin{matrix}2 & 4 & 3 \\3 & 2 & 1 \\\end{matrix}\right]=\left[\begin{matrix}11 & 10 & 6 \\10 & 12 & 8 \\\end{matrix}\right]</script><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">形状上：2*2 和 2*3 的矩阵乘积后,结果是 2*3 的矩阵。即 a*b 矩阵 和 c*d 的矩阵乘积结果是 a*d 的矩阵。其中 b 和 c 必须相等。原因看下面。运算法则：对于结果矩阵的第 i 行第 j 列的位置的结果是由前一个矩阵的对应的行。和后一个矩阵对应的列。对应位置乘积和获得的。    比如第 1 行第 1 列的 11.是由前矩阵的第一行 (1,3) 和后矩阵的第一列 (2,3) 对应位置乘积和。    1*2 + 3*3 = 11 获得的。    如果上述 b 和 c 如果不相等。那么会有地方"失配"没有数值可以进行计算。不符合矩阵乘法定义。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问题来了矩阵跟斐波那契有啥关系？"><a href="#问题来了矩阵跟斐波那契有啥关系？" class="headerlink" title="问题来了矩阵跟斐波那契有啥关系？"></a>问题来了矩阵跟斐波那契有啥关系？</h3><script type="math/tex; mode=display">\left[\begin{matrix}1 & 1 \\1 & 0 \\\end{matrix}\right]\times\left[\begin{matrix}F(1) \\F(0) \\\end{matrix}\right]=\left[\begin{matrix}F(1) + F(0) \\F(1) \\\end{matrix}\right]=\left[\begin{matrix}F(2) \\F(1) \\\end{matrix}\right]</script><p>同样：</p><script type="math/tex; mode=display">\left[\begin{matrix}1 & 1 \\1 & 0 \\\end{matrix}\right]\times\left[\begin{matrix}F(2) \\F(1) \\\end{matrix}\right]=\left[\begin{matrix}F(2) + F(1) \\F(2) \\\end{matrix}\right]=\left[\begin{matrix}F(3) \\F(2) \\\end{matrix}\right]</script><p>整理一下：</p><script type="math/tex; mode=display">\left[\begin{matrix}1 & 1 \\1 & 0 \\\end{matrix}\right]\times\left[\begin{matrix}F(n-1) \\F(n-2) \\\end{matrix}\right]=\left[\begin{matrix}F(n-1) + F(n-2) \\F(n-1) \\\end{matrix}\right]=\left[\begin{matrix}F(n) \\F(n-1) \\\end{matrix}\right]</script><p>求 $n$ 次方乘 $n$ 次即可，可以快速矩阵求解。</p><h3 id="其他公式"><a href="#其他公式" class="headerlink" title="其他公式"></a>其他公式</h3><ul><li><p>$F(1)+F(2)+F(3)+……+F(n)=F(n+2)-1$</p></li><li><p>$F(1)^2+F(2)^2+F(3)^2+……+F(n)^2=F(n)\times F(n+1)$</p></li><li><p>$F(1)+F(3)+F(5)+……+F(2n-1)=F(2n)$</p></li><li><p>$F(2)+F(4)+F(6)+……+F(2n)=F(2n+1)-1$</p></li><li><p>$F(n)=F(m)\times F(n-m+1)+F(m-1)\times F(n-m)$</p></li><li><p>$ps:n&gt;=m$</p></li><li><p>$F(n-1)\times F(n+1)=F(n)^2+(-1)^n$</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> GCD </tag>
            
            <tag> 矩阵 </tag>
            
            <tag> 斐波那契 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树（基本）</title>
      <link href="/2021/08/09/zui-xiao-sheng-cheng-shu/"/>
      <url>/2021/08/09/zui-xiao-sheng-cheng-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="最少生成树思路（基本）"><a href="#最少生成树思路（基本）" class="headerlink" title="最少生成树思路（基本）"></a>最少生成树思路（基本）</h1><h2 id="链接两点"><a href="#链接两点" class="headerlink" title="链接两点"></a>链接两点</h2><h3 id="创建一个存储用的“树”"><a href="#创建一个存储用的“树”" class="headerlink" title="创建一个存储用的“树”"></a>创建一个存储用的“树”</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">p</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token comment">//连接的两个点</span>      <span class="token keyword">int</span> w<span class="token punctuation">;</span><span class="token comment">//连接用的价值（连接长度）</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="kruskal算法"><a href="#kruskal算法" class="headerlink" title="kruskal算法"></a>kruskal算法</h2><h3 id="排序条件"><a href="#排序条件" class="headerlink" title="排序条件"></a>排序条件</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">il <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>p a<span class="token punctuation">,</span>p b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//if(a.w==b.w)return a.x&lt;b.x;//某些题可能会有特判</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>w<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token comment">//按边的从小到大的顺序排列</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序（加权）（最短路）"><a href="#排序（加权）（最短路）" class="headerlink" title="排序（加权）（最短路）"></a>排序（加权）（最短路）</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="并查集-判断是否已入“树”"><a href="#并查集-判断是否已入“树”" class="headerlink" title="并查集 判断是否已入“树”"></a>并查集 判断是否已入“树”</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="找祖先"><a href="#找祖先" class="headerlink" title="找祖先"></a>找祖先</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">il <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token operator">=</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找爹</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token comment">//返回祖先</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="入树"><a href="#入树" class="headerlink" title="入树"></a>入树</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">fa<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token operator">=</span>zz<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="判终条件"><a href="#判终条件" class="headerlink" title="判终条件"></a>判终条件</h2><p>不同题目，求的东西不同，判终条件不同</p><p>例如本题，要判的是两点之间的最短路，由于边是按照从小到大“入树”的，所以，只要判断是否都进“树”（祖先是否相同）即可。<br></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><p>例如 <a href="https://www.luogu.com.cn/problem/P2121">P2121</a> 与本题思路相似但判终条件不同，此题要求的是拆地毯的数量，所以只要数量达到就可以结束</p><h3 id="代码（例子）"><a href="#代码（例子）" class="headerlink" title="代码（例子）"></a>代码（例子）</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span><span class="token comment">//标椎I/O</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span><span class="token comment">//scanf,printf 可缩短时间，但没有,cin,cout“智能”</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">il</span> <span class="token expression"><span class="token keyword">inline</span></span><span class="token comment">//用于缩短时间</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>s<span class="token punctuation">,</span>t<span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span><span class="token number">20001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//找爹</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//判终止条件</span><span class="token keyword">int</span> ss<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//输出</span><span class="token keyword">struct</span> <span class="token class-name">p</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">;</span>  <span class="token keyword">int</span> w<span class="token punctuation">;</span> <span class="token punctuation">}</span>q<span class="token punctuation">[</span><span class="token number">20001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//“树”</span>il <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>p a<span class="token punctuation">,</span>p b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//排序</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>w<span class="token operator">==</span>b<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>w<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token punctuation">}</span>il <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找祖先，判断是否以入“树”</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token operator">=</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>s<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">&gt;&gt;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">&gt;&gt;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token comment">//读入</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//初始化</span>  <span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> z<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>zz<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找祖先</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">!=</span>zz<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//若祖先相同，说明已经有更优的解（以入“树”）</span>      fa<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token operator">=</span>zz<span class="token punctuation">;</span><span class="token comment">//若还未入树，让它入树</span>      ss<span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token comment">//并更新值（因为排序是从小到大，所以后来的一定比先来的大，所以保证一直是最大值）</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//判终</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>ss<span class="token punctuation">;</span><span class="token comment">//输出</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//好习惯</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 生成树 </tag>
            
            <tag> kruskal </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高斯消元</title>
      <link href="/2021/08/09/gao-si-xiao-yuan/"/>
      <url>/2021/08/09/gao-si-xiao-yuan/</url>
      
        <content type="html"><![CDATA[<h3 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h3><ol><li><p>$a_1x+b_1y+c_1z=d_1$</p></li><li><p>$a_2x+b_2y+c_2z=d_2$</p></li><li><p>$a_3x+b_3y+c_3z=d_3$</p></li></ol><h3 id="高斯消元思路"><a href="#高斯消元思路" class="headerlink" title="高斯消元思路"></a>高斯消元思路</h3><p>约旦消元法大致思路如下：</p><ul><li><p>1.选择一个尚未被选过的未知数作为主元，选择一个包含这个主元的方程。</p></li><li><p>2.将这个方程主元的系数化为 $1$。</p></li><li><p>3.通过加减消元，消掉其它方程中的这个未知数。</p></li><li><p>4.重复以上步骤，直到把每一行都变成只有一项有系数。</p></li></ul><h3 id="高斯消元做法"><a href="#高斯消元做法" class="headerlink" title="高斯消元做法"></a>高斯消元做法</h3><p>先消一个元 例如 $x$</p><p>$1$ 式 $\times a_2$ — $2$ 式 $\times a_1$</p><p>$1$ 式 $\times a_3$ — $3$ 式 $\times a_1$</p><p>消去了$x$，并且成为二元二次方程再将 $2$ 式和 $3$ 式的 $y$ 消去，可以求出 $z$。将 $z$ 回代 $2$ 式，求出 $y$。将 $z$，$y$ 回带 $1$ 式，求出 $x$。</p><p><a href="https://www.luogu.com.cn/problem/P3389#submit">P3389 【模板】高斯消元法</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">double</span> a_a<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m_a<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//初值，线性，到这个编号 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//找这一列（这个元绝对值最小的系数）中最小的值 </span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">fabs</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m_a<span class="token operator">=</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换这两列 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//若最小值是 0 无解 </span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"No Solution"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">double</span> l_l<span class="token operator">=</span>a_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//每个方程的这一列（这个元）的倍数 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//消去这个元 </span>        a_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>l_l<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//方程中只有对角线还有数，每个数只出现了一次。</span>            <span class="token comment">//可以看成 n 个一元一次方程 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">/</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求解输出 </span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 高斯消元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大神集</title>
      <link href="/2021/08/09/da-shen-ji/"/>
      <url>/2021/08/09/da-shen-ji/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e3ffe401b95db55761b5dbe135ec08b3ac830b4643482a03796ff091f60e1f76">6c9ff7be93430635dfccb11d8387492f8b7a0335cb308c3a3b8fdf7a41a490cf2b26883134a46399ec72dea4857c1e8e7d8b2ee0113957df4eba29098411aeef81616b4a361143f03d9eae018e44389f10196fe5c5aab039bec542dba23aa7d8f7c3cfafc9deb1bad225af809dd89ecbd1187b39617d9a9cab5bd9293e298ab6ea90e9ba1cd0c507f299c31770810099e6a9680c1efc7b5cb65ca9e4fa324dba971ed15e86fce54a6e03d82961f48bff0cfd4981ba044421e9e067a8c3652d47939c3d7e7a532d525f7168ea04b64b89dedcebb7ba643bd35ea1dd8929b4212218e0381555adac51a666a48a3fa6e78fa94761650aa44ef02667bf3ab2fbd9271f22f45bb22b00748458e2bcda41159a3a69029f81439b52a42481ac86431af8b9795d078a97965603e6e9881c630c67ff116be974eab6094a2a1f722496310335fc9ad6fa3960ac53de538629912dc990cc025e24c88bc3cee646192cae32b7545451f35a9b0bba997050b2ffaf6f65325b95b85345b66a42728991157c2d06a9f4e0cba6dba30ed13e02f9ffbf36eb37cf428c757718d6cc7db3b355f813102e228269400713ca15f7ab3751a929168b8ccb00eb7e01ec2b8b1cb3d4e22a68e267d06bf17eba0da48d4be6d829e941534a242c8584a9b7c7845dcf8d350ee245235de01276e4e6a508dce90a201cc58c4e557f72c12b8de23b09e02c8cc38112375b207754c9ddc3e264431a4aadb26984b5eec1fc5f07aed4b08355cf3f9052f0e91d56e99c4f31db11e20f1647ddf42acc532c8bf73b2834c66ddd28e99a1f9395c20c4ed205efe140adbb8da0feb8de12a884c87ae5c6a9c021f1e98e52dee32a4b84efcdbf6d2b68dc9f5f8065fa8630817972f35f6559abe63a74e849065621e328e59c23e0928b65812da88aa75a6bf7b659af4ae01dc8a925887b7e1c6f5de2f6a308fe059a9981f37bf6b0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建中。。。</title>
      <link href="/2021/08/09/da-jian-bo-ke/"/>
      <url>/2021/08/09/da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>搭建博客中。。。</p><p><a href="https://tool.oschina.net/encrypt?type=2">密码</a></p><p><a href="https://www.jianshu.com/p/5a27d195678f">数学符号 Markdown</a></p><p><a href="https://hammyhome.com/">仓鼠之家</a></p><p><a href="http://lab.mkblog.cn/">奇怪之家</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
