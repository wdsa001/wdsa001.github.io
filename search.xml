<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>说明</title>
      <link href="/6666/06/06/shuo-ming/"/>
      <url>/6666/06/06/shuo-ming/</url>
      
        <content type="html"><![CDATA[<p>（仍在完善。。。）</p><h3 id="文章说明"><a href="#文章说明" class="headerlink" title="文章说明"></a>文章说明</h3><h4 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h4><p>功能暂不开启</p><h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><p>功能暂不开启</p><h4 id="图片加载失败"><a href="#图片加载失败" class="headerlink" title="图片加载失败"></a>图片加载失败</h4><ul><li>刷新网页。</li></ul><p>若仍然失败，将图片加载失败图标拖到搜索栏后，会变成图片原本地址。当图片加载出来后，刷新原文文章即可。</p><h4 id="密码文章"><a href="#密码文章" class="headerlink" title="密码文章"></a>密码文章</h4><p>本人博客查看密码文章步骤有些繁琐。</p><ul><li>进入网页时输入第一次密码</li><li>进入网页后，文章需要输入第二次密码</li><li>这时文章可以观看，但数学符号渲染不到位</li><li>刷新网页（第二次密码会保存）</li><li>刷新网页后再次输入进入网页密码</li><li>观看文章</li></ul><p>若需要刷新，取消文章（第二次密码）的保存，点击文章底部篮框 $Encrypt$ $again$ 的标识即可。</p><p>加密文章暂时无法使用目录功能。</p><h4 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h4><p>QQ：$1054942544$（要加备注）</p><p>如果发现文章有问题或者有更好的意见，欢迎建议与指正。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文艺平衡树</title>
      <link href="/2021/09/20/wen-yi-ping-heng-shu/"/>
      <url>/2021/09/20/wen-yi-ping-heng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="文艺平衡树"><a href="#文艺平衡树" class="headerlink" title="文艺平衡树"></a>文艺平衡树</h2><p><a href="https://www.luogu.com.cn/problem/P3391">P3391 【模板】文艺平衡树</a></p><h3 id="数组变量名意义"><a href="#数组变量名意义" class="headerlink" title="数组变量名意义"></a>数组变量名意义</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组下标大小 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token comment">//父节点 </span><span class="token keyword">int</span> l_n<span class="token punctuation">;</span><span class="token comment">//懒标记 </span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右儿子 </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//子树大小 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_g<span class="token punctuation">;</span><span class="token comment">//根节点 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h3><p>和不同的平衡术不同点在于，它的表示变成区间。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">      (4)      / <span class="token function selector">\</span>     /   <span class="token function selector">\</span>    /     <span class="token function selector">\</span>  (2)     (6)  / <span class="token function selector">\ </span>    / <span class="token function selector">\</span>(1) (3) (5) (7)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一棵初始化的“平衡树”，它的初始化很线段树的每个区间处理很相似。首先找出根节点（一班选区间中间的数），然后它的左右子树的意义在于：代表一个区间。而<strong>将数中序遍历则是原序列</strong>。</p><p>$4$ 的左子树就代表 $[1,3]$，右子树代表 $[5,7]$。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//不在区间内，退出 </span>    <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>f<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>m_i<span class="token punctuation">;</span><span class="token comment">//符合平衡树特性，存储左右节点 </span><span class="token keyword">else</span> t_r<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>m_i<span class="token punctuation">;</span>    t_r<span class="token punctuation">[</span>m_i<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>f<span class="token punctuation">;</span><span class="token comment">//存父节点 </span>t_r<span class="token punctuation">[</span>m_i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化节点大小 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//子节点，不会再存在左右子树，退出 </span>    <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span><span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新当前节点 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>节点更新信息维护及节点子树大小即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//左右子树大小的和 +1 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>和平衡树的旋转方式相同，但由于我们要让一些节点有目的的向上转，所以要存父节点，和 <a href="https://wdsa001.github.io/2021/09/20/ping-heng-shu-ji-chu/">这里</a> 的思路相同，只是视角从父节点比变成了子节点（或孙节点）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">b_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左旋 </span><span class="token comment">//旋转（从根节点向上转） </span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>y<span class="token punctuation">;</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>y<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>z<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右旋 </span><span class="token comment">//旋转（从根节点向上转） </span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>y<span class="token punctuation">;</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>y<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>z<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区间翻转"><a href="#区间翻转" class="headerlink" title="区间翻转"></a>区间翻转</h3><p>首先，整棵树一定是按照中序遍历输出的（存的时候就是这个目的存的）。接着我们目前会的只有旋转。<strong>但是，单纯的旋转并不能改变中序遍历的输出顺序</strong>。和 <a href="https://wdsa001.github.io/2021/09/20/ping-heng-shu-ji-chu/">这里</a> 讲的“相对位置”（降维打击变成一维数组的节点左右的关系）的理解相同。</p><p>既然是区间翻转那么一定是要有“相对位置”改变的。是时候破坏“先对位置”！，我们<strong>将一个节点的左右子树交换</strong>，就可以破坏“相对位置”。<del>简单粗暴，行之有效</del>。</p><p>现在有了破坏的思路，那么要怎么做呢？</p><p>既然是区间翻转，树维护的就是区间，树的特性又是单调的（我们破坏的是值的单调性，但我们这棵树维护的是区间的单调性），那么我们又知道旋转不会破坏单调性，那么我们不难讲我们要旋转的区间放到一个子树中。如下：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">      (4)      / <span class="token function selector">\</span>     /   <span class="token function selector">\</span>    /     <span class="token function selector">\</span>  (2)     (6)  / <span class="token function selector">\ </span>    / <span class="token function selector">\</span>(1) (3) (5) (7)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们要翻转 $[3,6]$。进行如下处理，将 $[3,6]$ 放到一个子树中。为了方便描述子树坐标，我们将 $2$ 转到根节点，$7$ 为 $2$ 的右节点，更具树的性质（单调性），$[3,6]$ 会变成 $7$ 的左子树。</p><p>先处理 $2$：</p><p>右旋：<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    (2)    / <span class="token function selector">\</span>   /   <span class="token function selector">\</span>  /     <span class="token function selector">\</span>(1)     (4)        / <span class="token function selector">\</span>      (3) (6)          / <span class="token function selector">\</span>        (5) (7)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>$2$ 到达目标地点。</p><p>再处理 $7$：</p><p>左旋：<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    (2)    / <span class="token function selector">\</span>   /   <span class="token function selector">\</span>  /     <span class="token function selector">\</span>(1)     (4)        / <span class="token function selector">\</span>      (3) (7)          /         (6)         /      (5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>左旋：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    (2)    / <span class="token function selector">\</span>   /   <span class="token function selector">\</span>  /     <span class="token function selector">\</span>(1)     (7)        /       (4)       / <span class="token function selector">\ </span>      (3) (6)         /      (5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$7$ 到达目标地点。</p><p>现在我们可以将 $4$ 打上懒标记，这个懒标记是需要交换左右<strong>子树</strong>的懒标记。每次访问到这个点，需要释放并下传。为方便理解，我们释放所有懒标记。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    (2)    / <span class="token function selector">\</span>   /   <span class="token function selector">\</span>  /     <span class="token function selector">\</span>(1)     (7)        /       (4)       / <span class="token function selector">\ </span>      (6) (3)       <span class="token function selector">\ </span>      (5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中序遍历：$1,2,6,5,4,3,7$。问题解决。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">x_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//没有到达预期位置 </span>        <span class="token keyword">int</span> y<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//原点的父节点 </span><span class="token keyword">int</span> z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//原节点的父节点的父节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//父节点也没有到达预期 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">l_r</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一条链（都是左儿子或右儿子） </span>            <span class="token keyword">else</span> <span class="token function">l_r</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不是一条链 </span>        <span class="token punctuation">}</span>        <span class="token function">l_r</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//父节点到达预期，只用再旋转一次即可到达目的 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将目标区间转移到一个子树，遍历整棵子树可以直接放心的打标记，不会影响到其他数据。</p><p><strong>注意：我们每回要找 $l-1$ 和 $r+1$，但加入有一棵 $7$ 节点的树。翻转正好是 $[1,7]$，就会出问题。所以我们在一开始时手动加入两个点，$1$，$r+2$，而原区间变为 $[l+1,r+1]$，就可以解决这个问题。</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组下标大小 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token comment">//父节点 </span><span class="token keyword">int</span> l_n<span class="token punctuation">;</span><span class="token comment">//懒标记 </span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右儿子 </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//子树大小 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_g<span class="token punctuation">;</span><span class="token comment">//根节点 </span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//左右子树大小的和 +1 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//释放懒标记 </span>        <span class="token function">swap</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换左右子树 </span>        t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//懒标记下传 </span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清空懒标记 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左旋 </span><span class="token comment">//旋转（从根节点向上转） </span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>y<span class="token punctuation">;</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>y<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>z<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右旋 </span><span class="token comment">//旋转（从根节点向上转） </span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>y<span class="token punctuation">;</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>y<span class="token punctuation">;</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>z<span class="token punctuation">;</span><span class="token comment">//更新父节点 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token function">u_p</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">l_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> y<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//原点父节点 </span><span class="token keyword">int</span> z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//原点的父节点的父节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span>k<span class="token punctuation">)</span>k<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//父节点即目标状态 </span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//爷节点即目标状态 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>y<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//都是左儿子 </span><span class="token keyword">else</span> t_r<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//都是右儿子 </span><span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token function">b_r</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右旋 </span><span class="token keyword">else</span> <span class="token function">b_l</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左旋 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">x_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//没有到达预期位置 </span>        <span class="token keyword">int</span> y<span class="token operator">=</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//原点的父节点 </span><span class="token keyword">int</span> z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//原节点的父节点的父节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//父节点也没有到达预期 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">l_r</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一条链（都是左儿子或右儿子） </span>            <span class="token keyword">else</span> <span class="token function">l_r</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不是一条链 </span>        <span class="token punctuation">}</span>        <span class="token function">l_r</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//父节点到达预期，只用再旋转一次即可到达目的 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//不在区间内，退出 </span>    <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>f<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>m_i<span class="token punctuation">;</span><span class="token comment">//符合平衡树特性，存储左右节点 </span><span class="token keyword">else</span> t_r<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>m_i<span class="token punctuation">;</span>    t_r<span class="token punctuation">[</span>m_i<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>f<span class="token punctuation">;</span><span class="token comment">//存父节点 </span>t_r<span class="token punctuation">[</span>m_i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化节点大小 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//子节点，不会再存在左右子树，退出 </span>    <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span><span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新当前节点 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">p_d</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span><span class="token keyword">int</span> s<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">;</span><span class="token comment">//左子树大小 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token comment">//左子树大小 +1 即本点的排名 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span>s<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">g_a</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//被左子树包含 </span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">g_a</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token operator">-</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//被右子树包含 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">x_z</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">g_a</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在树上找到 x 的坐标 </span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token function">g_a</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再树上找到 y 的坐标 </span>    <span class="token function">x_t</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>g_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 x 换到根节点 </span><span class="token function">x_t</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 y 换到根节点右儿子节点 </span><span class="token keyword">int</span> z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//打懒标记 </span>    t_r<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    g_g<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//定义根 </span><span class="token function">b_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>g_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树（初始化） </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">x_z</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//旋转区间 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span><span class="token function">g_a</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出每个数 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡树（基础）</title>
      <link href="/2021/09/20/ping-heng-shu-ji-chu/"/>
      <url>/2021/09/20/ping-heng-shu-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="普通平衡树"><a href="#普通平衡树" class="headerlink" title="普通平衡树"></a>普通平衡树</h2><p><a href="https://www.luogu.com.cn/problem/P3369">P3369 【模板】普通平衡树</a></p><h3 id="旋转原理"><a href="#旋转原理" class="headerlink" title="旋转原理"></a>旋转原理</h3><p>为方便理解，先定义两个名词：</p><ul><li><p>相对位置：树被压缩成一维数组后，节点的左右位置关系。</p></li><li><p>相对高度：相邻的两个节点在树上的高低关系。</p></li></ul><p>由于平衡树的性质：左节点比父节点的值小，父节点的值比父节点的值大。所以我们将整棵树压成一维数组后，变成了一个升序数组。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">数            (5)              /|<span class="token function selector">\</span>             / | <span class="token function selector">\</span>            /  |  <span class="token function selector">\</span>           /   |   <span class="token function selector">\</span>          /    |    <span class="token function selector">\</span>        (3)    |    (7)        /|<span class="token function selector">\ </span>   |    /|<span class="token function selector">\</span>       / | <span class="token function selector">\ </span>  |   / | <span class="token function selector">\</span>     (1) | (4) | (6) | (9)      |  |  |  |  |  |  |数组 (1)(3)(4)(5)(6)(7)(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>平衡树的建立会根据数据的插入决定。例如不同顺序插入 $1,3,4,5,6,7,9$。</p><p>按 $5,3,7,1,4,6,9$ 的顺序插入：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">数            (5)              /|<span class="token function selector">\</span>             / | <span class="token function selector">\</span>            /  |  <span class="token function selector">\</span>           /   |   <span class="token function selector">\</span>          /    |    <span class="token function selector">\</span>        (3)    |    (7)        /|<span class="token function selector">\ </span>   |    /|<span class="token function selector">\</span>       / | <span class="token function selector">\ </span>  |   / | <span class="token function selector">\</span>     (1) | (4) | (6) | (9)      |  |  |  |  |  |  |数组 (1)(3)(4)(5)(6)(7)(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按 $1,3,4,5,6,7,9$ 的顺序插入：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">数   (1)      | <span class="token function selector">\</span>      | (3)      |  | <span class="token function selector">\</span>      |  | (4)      |  |  | <span class="token function selector">\</span>      |  |  | (5)      |  |  |  | <span class="token function selector">\</span>      |  |  |  | (6)      |  |  |  |  | <span class="token function selector">\</span>      |  |  |  |  | (7)      |  |  |  |  |  | <span class="token function selector">\</span>      |  |  |  |  |  | (9)      |  |  |  |  |  |  |数组 (1)(3)(4)(5)(6)(7)(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>退化的惨不忍睹。</del></p><p>我们旋转的目的，是将整棵树尽量向着满二叉树进步，查询一次或插入一个数，便利的次数直接影响时间效率。而越接近满二叉树，时间复杂路越接近<br> $O(\log_n)$ 而如果退化成一条链，时间复杂度变为 $O(n)$。为了防止这种情况的出现，便有了旋转操作。</p><p>旋转操作并不会破坏平衡树的性质，只是改变值在树上的相对高度。上面的两个图可以发现顺序相同，但值在两个图中的相对高度不同，而旋转操作可以理解成将第二个图向着第一个图的方向转换（一些节点的相对高度下拉或上提）。</p><h4 id="旋转过程"><a href="#旋转过程" class="headerlink" title="旋转过程"></a>旋转过程</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">数   (1)      | <span class="token function selector">\</span>      | (3)      |  | <span class="token function selector">\</span>      |  | (4)      |  |  | <span class="token function selector">\</span>      |  |  | (5)      |  |  |  | <span class="token function selector">\</span>      |  |  |  | (6)      |  |  |  |  | <span class="token function selector">\</span>      |  |  |  |  | (7)      |  |  |  |  |  | <span class="token function selector">\</span>      |  |  |  |  |  | (9)      |  |  |  |  |  |  |数组 (1)(3)(4)(5)(6)(7)(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 $5$ 为旋转节点旋转。为了让他更接近满二叉树我们要左旋，即：让他的父亲变为它的左儿子（父节点相对位置下拉）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">数   (1)      | <span class="token function selector">\</span>      | (3)      |  | <span class="token function selector">\</span>      |  |  <span class="token function selector">\</span>      |  |   <span class="token function selector">\</span>      |  |    <span class="token function selector">\</span>      |  |    (5)      |  |   / | <span class="token function selector">\</span>      |  | (4) | (6)      |  |  |  |  | <span class="token function selector">\</span>      |  |  |  |  | (7)      |  |  |  |  |  | <span class="token function selector">\</span>      |  |  |  |  |  | (9)      |  |  |  |  |  |  |数组 (1)(3)(4)(5)(6)(7)(9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：平衡树的左右旋转的操作可以抵消，就是说以一个点左旋后，在以这个点右旋会变为原来的样子。（上一个图以 $5$ 节点右旋换变成左旋的图）。</p><p>上面的图可能不方便理解，我们演示一个旋转后是满二叉树的例子。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">            (1)            /|<span class="token function selector">\</span>           / | <span class="token function selector">\</span>          /  |  <span class="token function selector">\</span>         /   |   <span class="token function selector">\</span>        /    |    <span class="token function selector">\</span>      (2)    |   (3)      /|<span class="token function selector">\ </span>   |    |     / | <span class="token function selector">\ </span>  |    |    /  |  <span class="token function selector">\ </span> |    |    (4)  | (5) |    |  /|<span class="token function selector">\ </span> |  |  |    |(6)|(7)|  |  |    |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 $2$ 节点右旋即可成为满二叉树，我们顺便演示一下旋转的过程。</p><p>首先我们要知道旋转后的样子（没有目地的旋转是无用功）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">        (2)         /|<span class="token function selector">\</span>       / | <span class="token function selector">\</span>      /  |  <span class="token function selector">\</span>     /   |   <span class="token function selector">\</span>   (4)   |   (1)   /|<span class="token function selector">\ </span>  |   /|<span class="token function selector">\</span>  / | <span class="token function selector">\ </span> |  / | <span class="token function selector">\</span>(6) | (7)|(5) | (3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（不难看出，两个节点的左右关系没变，变的只是相对高度，它的原理其实就是平衡术的性质：左儿子 $ &lt; $ 父节点 $ &lt; $ 右儿子）</p><p>相对位置不变，我们又要右旋 $2$ 节点，所以 $1$ 要成为 $2$ 的儿子，$1$ 比 $2$ 大所以会成为 $2$ 的右儿子，但是 $2$ 本身有右儿子 $5$，所以 $1$ 和 $5$ 也要有新的关系，因为 $1$ 在 $5$ 的右边（相对位置）所以 $5$ 只能是 $1$ 的左儿子。</p><p>大概的方向也有了，可以旋转了。首先建一个新节点来保存 $2$ 的右节点，这样就可以为 $1$ 节点腾出位置，$1$ 节点可以直接成为 $2$ 的右子树，然后将 $2$ 原来的右节点接到 $1$ 的左子树，最后换根,将更的编号直接换成 $2$，更新节点信息即可。<strong>要先更新节点信息，才能保证根节点是最新信息</strong>。</p><p>但是，由于我们平衡树只存子节点，存父节点不必要的，所以我们还要讨论节点的左右旋（道理极其相似）。我们现在站在父节点的角度来看这次旋转。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">            (1)            /|<span class="token function selector">\</span>           / | <span class="token function selector">\</span>          /  |  <span class="token function selector">\</span>         /   |   <span class="token function selector">\</span>        /    |    <span class="token function selector">\</span>      (2)    |   (3)      /|<span class="token function selector">\ </span>   |    |     / | <span class="token function selector">\ </span>  |    |    /  |  <span class="token function selector">\ </span> |    |    (4)  | (5) |    |  /|<span class="token function selector">\ </span> |  |  |    |(6)|(7)|  |  |    |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们现在以 $1$ 的角度看这次旋转。旋转的方向不变，还是向右。但是表达不同（思路一样，为方便理解才有了前面的节点 $2$ 的视角）。</p><p>先定义一个新变量保存 $1$ 的左儿子 $2$ 节点，然后将 $2$ 的右儿子接到 $1$ 的左子树（相对位置不变），接着再将 $1$ 接到 $2$ 的右子树，换根根变成 $2$ 节点，旋转完成。<strong>先更新子节点 $1$ 的子树大小，在更新新根 $2$ 的子树大小</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">b_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左旋 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//存当前节点的右节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//右节点的左子树接到当前节点的右边 </span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//当前节点接到右节点的左边 </span>k<span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//右节点取代当前节点（换根） </span><span class="token function">u_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新的根的左子树（刚刚进行变动的部分） </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新根的信息（注意顺序，要先更新它的节点，才能获得最新信息） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右旋 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//存当前节点的左节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//左节点的右子树接到当前节点的左边 </span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//当前节点接到做节点的右边 </span>k<span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//左节点取代当前节点（换根） </span><span class="token function">u_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新的根的右子树（刚刚进行变动的部分） </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新根的信息（注意顺序，要先更新它的节点，才能获得最新信息） </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span>m_x<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//节点价值 </span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右儿子 </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//节点大小 </span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//相同节点数量</span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//随机优先值 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//新节点编号 </span><span class="token keyword">int</span> g_g<span class="token punctuation">;</span><span class="token comment">//根节点 </span>mt19937 <span class="token function">m_t</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机数种子 </span><span class="token keyword">int</span> <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//动态开点 </span>t_r<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//新节点的值 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取随机优先级 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化大小 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化相同节点数量 </span><span class="token keyword">return</span> x_p<span class="token punctuation">;</span><span class="token comment">//返回新节点编号（方便父节点存左右儿子） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点大小 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">;</span><span class="token comment">//节点子树大小是左右子树的和加上相同节点个数 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>g_g<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token operator">-</span>m_x<span class="token punctuation">)</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span>m_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化平衡树，放最大最小值 </span><span class="token function">u_p</span><span class="token punctuation">(</span>g_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点子树信息 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左旋 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//存当前节点的右节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//右节点的左子树接到当前节点的右边 </span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//当前节点接到右节点的左边 </span>k<span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//右节点取代当前节点（换根） </span><span class="token function">u_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新的根的左子树（刚刚进行变动的部分） </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新根的信息（注意顺序，要先更新它的节点，才能获得最新信息） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右旋 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//存当前节点的左节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//左节点的右子树接到当前节点的左边 </span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//当前节点接到做节点的右边 </span>k<span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//左节点取代当前节点（换根） </span><span class="token function">u_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新的根的右子树（刚刚进行变动的部分） </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新根的信息（注意顺序，要先更新它的节点，才能获得最新信息） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">n_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//加入新节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点不存在 </span>k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开点 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//权值相同，增加相同节点数 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//比当前节点小 </span><span class="token function">n_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token function">b_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果节点优先级更优（旋转） </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//比当前节点大 </span><span class="token function">n_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token function">b_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果节点优先级更优（旋转）</span><span class="token punctuation">}</span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">c_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//节点不存在，跳过 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//权值相同（找到目标节点） </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有多个 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//直接删 </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有子树 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&gt;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右子树不存在，或左子树比右子树优先级高 </span><span class="token function">b_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右旋 </span><span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//左子树不存在，或者左子树优先级低 </span><span class="token function">b_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左旋 </span><span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token punctuation">}</span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">else</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//没子树直接送走 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值小，向左搜 </span><span class="token keyword">else</span> <span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值大，向右搜 </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//查询 x 的排名 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//不存在是当前小的数 +1，那么排名就是第一 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//找到值，左子树的大小 +1 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值小 </span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token function">f_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值大 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_x</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//查询 x 排名的值 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> m_x<span class="token punctuation">;</span><span class="token comment">//不存在这么多数 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_x</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排名被左子树大小包含，一定在左子树 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//排名比左子树大，但是不大于左子树大小与当前节点的个数的和，排名包含于当前节点的数量中 </span><span class="token keyword">return</span> <span class="token function">f_x</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排名在右子树中找，先减去一定在排名前的数量 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_q</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找前驱 </span><span class="token keyword">int</span> k<span class="token operator">=</span>g_g<span class="token punctuation">;</span><span class="token comment">//从根节点搜 </span><span class="token keyword">int</span> x_q<span class="token punctuation">;</span><span class="token comment">//记录前驱（记录答案） </span><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点存在 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">&lt;</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前节点值比目标值小（可能是结果） </span>x_q<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//记录 </span>k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//前往右子树（结果可能更优） </span><span class="token punctuation">}</span><span class="token keyword">else</span> k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//比目标大或等于，前往左子树 </span><span class="token punctuation">}</span><span class="token keyword">return</span> x_q<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找后继 </span><span class="token keyword">int</span> k<span class="token operator">=</span>g_g<span class="token punctuation">;</span><span class="token comment">//从根节点搜 </span><span class="token keyword">int</span> x_h<span class="token punctuation">;</span><span class="token comment">//记录后继（记录答案） </span><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前节点存在 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">&gt;</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前节点值比目标值大（可能是结果） </span>x_h<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//记录 </span>k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//前往左子树（结果可能更优） </span><span class="token punctuation">}</span><span class="token keyword">else</span> k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//比目标小或等于，前往右子树 </span><span class="token punctuation">}</span><span class="token keyword">return</span> x_h<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">b_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化平衡树 </span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">n_d</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">c_t</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f_p</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找排名（初始化时有一个最小值，要减去它的贡献） </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f_x</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找排名为 x 的值（初始化时有一个最小值，要算上它的贡献） </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f_q</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找前驱 </span><span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">f_h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找后继 </span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="普通平衡树（数据加强）"><a href="#普通平衡树（数据加强）" class="headerlink" title="普通平衡树（数据加强）"></a>普通平衡树（数据加强）</h2><p><a href="https://www.luogu.com.cn/problem/P6136">P6136 【模板】普通平衡树（数据加强版）</a></p><p>大体思路并没有变，注意几个小细节即可。</p><ul><li><p>操作4：查询排名为 $x$ 的数（如果不存在，则认为是排名小于 $x$ 的最大数。保证 $x$ 不会超过当前数据结构中数的总数）。</p></li><li><p>本题强制在线，保证所有操作合法（操作 $2$ 保证存在至少一个 $x$，操作 $4,5,6$ 保证存在答案）。</p></li><li><p>我们记 $last$ 表示上一次 $3,4,5,6$ 操作的答案，则每次操作的 $x^, $<br>都要异或上 $last$ 才是真实的 $x$。初始 $last$ 为 $0$。</p></li><li><p>本题输入数据较大，请使用较快的读入方式。</p></li></ul><p>操作 $4$ 的处理很容易，如果找的值必当前值大，那么先记下当前值的贡献，取 <code>max</code>，如果最后没找到，那么返回极小值，这样回溯统计答案是不会有贡献，我们也找到额最大值。而如果小于等于，那么久不用取 <code>max</code>，因为答案必然存在。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">2e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">2e9</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//节点价值 </span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右儿子 </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//节点大小 </span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//相同节点数量</span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//随机优先值 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//新节点编号 </span><span class="token keyword">int</span> g_g<span class="token punctuation">;</span><span class="token comment">//根节点 </span><span class="token keyword">long</span> <span class="token keyword">long</span> l_t<span class="token punctuation">;</span><span class="token comment">//存上次操作的答案（解密） </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">;</span><span class="token comment">//统计答案，异或和 </span>mt19937 <span class="token function">m_t</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机数种子 </span><span class="token keyword">int</span> <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//动态开点 </span>t_r<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//新节点的值 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span><span class="token function">m_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取随机优先级 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化大小 </span>t_r<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化相同节点数量 </span><span class="token keyword">return</span> x_p<span class="token punctuation">;</span><span class="token comment">//返回新节点编号（方便父节点存左右儿子） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点大小 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">;</span><span class="token comment">//节点子树大小是左右子树的和加上相同节点个数 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>g_g<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token operator">-</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化平衡树，放最大最小值 </span>t_r<span class="token punctuation">[</span>g_g<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">u_p</span><span class="token punctuation">(</span>g_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点子树信息 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左旋 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//存当前节点的右节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//右节点的左子树接到当前节点的右边 </span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//当前节点接到右节点的左边 </span>k<span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//右节点取代当前节点（换根） </span><span class="token function">u_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新的根的左子树（刚刚进行变动的部分） </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新根的信息（注意顺序，要先更新它的节点，才能获得最新信息） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右旋 </span><span class="token keyword">int</span> k_k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//存当前节点的左节点 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//左节点的右子树接到当前节点的左边 </span>t_r<span class="token punctuation">[</span>k_k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//当前节点接到做节点的右边 </span>k<span class="token operator">=</span>k_k<span class="token punctuation">;</span><span class="token comment">//左节点取代当前节点（换根） </span><span class="token function">u_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新的根的右子树（刚刚进行变动的部分） </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新新根的信息（注意顺序，要先更新它的节点，才能获得最新信息） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">n_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//加入新节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点不存在 </span>k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开点 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//权值相同，增加相同节点数 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//比当前节点小 </span><span class="token function">n_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token function">b_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果节点优先级更优（旋转） </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//比当前节点大 </span><span class="token function">n_d</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token function">b_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果节点优先级更优（旋转）</span><span class="token punctuation">}</span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">c_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删节点 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//节点不存在，跳过 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//权值相同（找到目标节点） </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有多个 </span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//直接删 </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有子树 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&gt;</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右子树不存在，或左子树比右子树优先级高 </span><span class="token function">b_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右旋 </span><span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//左子树不存在，或者左子树优先级低 </span><span class="token function">b_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左旋 </span><span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续搜 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//没子树直接送走 </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值小，向左搜 </span><span class="token keyword">else</span> <span class="token function">c_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值大，向右搜 </span><span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//查询 x 的排名 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//不存在是当前小的数 +1，那么排名就是第一 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//找到值，左子树的大小 +1 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值小 </span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token function">f_p</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比当前值大 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_x</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//查询 x 排名的值</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//找不到，不对答案做贡献 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_x</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排名被左子树大小包含，一定在左子树 </span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//排名比左子树大，但是不大于左子树大小与当前节点的个数的和，排名包含于当前节点的数量中 </span><span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span><span class="token function">f_x</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>v<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最大值，这样可以解决不存在的情况 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_q</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找前驱 </span><span class="token keyword">int</span> k<span class="token operator">=</span>g_g<span class="token punctuation">;</span><span class="token comment">//从根节点搜 </span><span class="token keyword">int</span> x_q<span class="token punctuation">;</span><span class="token comment">//记录前驱（记录答案） </span><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点存在 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">&lt;</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前节点值比目标值小（可能是结果） </span>x_q<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//记录 </span>k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//前往右子树（结果可能更优） </span><span class="token punctuation">}</span><span class="token keyword">else</span> k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//比目标大或等于，前往左子树 </span><span class="token punctuation">}</span><span class="token keyword">return</span> x_q<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找后继 </span><span class="token keyword">int</span> k<span class="token operator">=</span>g_g<span class="token punctuation">;</span><span class="token comment">//从根节点搜 </span><span class="token keyword">int</span> x_h<span class="token punctuation">;</span><span class="token comment">//记录后继（记录答案） </span><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前节点存在 </span><span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">&gt;</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前节点值比目标值大（可能是结果） </span>x_h<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//记录 </span>k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token comment">//前往左子树（结果可能更优） </span><span class="token punctuation">}</span><span class="token keyword">else</span> k<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//比目标小或等于，前往右子树 </span><span class="token punctuation">}</span><span class="token keyword">return</span> x_h<span class="token punctuation">;</span><span class="token comment">//返回结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">b_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化平衡树 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//原序列插入树中 </span><span class="token keyword">int</span> v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">n_d</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入 </span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">n_d</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">c_t</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除 </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>l_t<span class="token operator">=</span><span class="token function">f_p</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>a_s<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//找排名（初始化时有一个最小值，要减去它的贡献） </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>l_t<span class="token operator">=</span><span class="token function">f_x</span><span class="token punctuation">(</span>g_g<span class="token punctuation">,</span>v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a_s<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//找排名为 x 的值（初始化时有一个最小值，要算上它的贡献） </span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>l_t<span class="token operator">=</span><span class="token function">f_q</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>a_s<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//找前驱 </span><span class="token keyword">else</span> l_t<span class="token operator">=</span><span class="token function">f_h</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>a_s<span class="token operator">^=</span>l_t<span class="token punctuation">;</span><span class="token comment">//找后继 </span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2021/09/18/shu-zhuang-shu-zu/"/>
      <url>/2021/09/18/shu-zhuang-shu-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><p>树状数组将数组分成树状结构存储信息，与线段树相似。代码短，但实现有局限性，功能较为单一。</p><p>树状数组将一些数组存区间和，一个例子如下：</p><p>维护如下序列：$1,2,3,1,6,2,5,1$。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">&lt;---------21----------&gt;&lt;----7----&gt;           |   &lt;-3-&gt;     | &lt;-8-&gt;     | &lt;1&gt; | &lt;3&gt; | &lt;6&gt; | &lt;5&gt; |  1  2  3  1  6  2  5  1 1  2  3  4  5  6  7  8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>树状数组：在保证数据不丢失的情况下，尽量多的存储信息。</p><p>这样我们可以向线段树的区间查询一样，直接查询区间和。例如查询 $[3,5]$ 的区间和，那么可以 $[1,5]-[1,2]=[1,4]+[5,5]-[1,2]$。而我们的区间查询复杂度为 $O(\log_n)$ ，即使一次询问要两次查询也很快。 </p><p>维护区间信息，不难发现如果更新一个值，那么要更新所有覆盖这个数的区间的值（和线段树的节点更新一个道理）</p><h3 id="区间处理"><a href="#区间处理" class="headerlink" title="区间处理"></a>区间处理</h3><p>关于下标的二进制关系图如下：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">                           1000            100              |    010      |      110      |001  |  011  |  101  |  111  | 1   2   3   4   5   6   7   8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到二进制化的下标后，不难发现区间和存的数是<strong>所有当前位 $1$ 出现前的情况</strong>。例如 $4(100)$ 包含 $001,010,011$ 第三位（从左向右数） $1$ 出现前所有可能的三种情况，</p><p>同样，由于 $5$ 的第三位是 $1$，所以它不会存 $4$ 下标的值。在询问时也要分找区间加和，例如求 $[1,5]=[1,4]+[5,5]$ （ 这里的区间是为了好理解，在树状数组中可以直接 $[4]+[5]$ 即可）。</p><h3 id="上传，下放实现"><a href="#上传，下放实现" class="headerlink" title="上传，下放实现"></a>上传，下放实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">l_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快速上下访问（二进制） </span>  <span class="token keyword">return</span> k<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么，为什么这么写？</p><p>首先一个数的补码是这个数的负数的二进制数。（补码是反码 $+1$，反码是原码（二进制）所有位的取反 $1$-&gt;$0$，$0$-&gt;$1$）</p><p>我们以 $8$ 二进制数来举例。</p><p>$5$：$00000101$</p><p>$-5$：$11111011$</p><p>当 $5\&amp;-5$ 时，我们的找到了 $00000001$，将 $5$ 减去它，$(00000100)_2=(4)_{10}$，那么继续。</p><p>$4$：$00000100$</p><p>$-4$：$11111100$</p><p>当 $4\&amp;-4$ 时，我们的找到了 $00000100$，将 $4$ 减去它，$(00000000)_2=(0)_{10}$，结束。</p><p>这正好是我们需要查询的区间！为什么呢？</p><p>$5=(100)_{2}+(1)_{2}$，我们先查的是区间 $[5,5]$ 然后减去 $1$，后查询的是 $(100)_2=(4)_{10}$ 即 $[1,4]$，统计即可。</p><p>我们从概念出发：</p><p>补码是原码的反码 $+1$。反码是原码每位取反，如果这一位是 $1$，那么现在它是 $0$，我们给它 $+1$，可以更具它二进制特性，直接填好从右向左的第一个 $0$，而填的这个 $0$，正是原码中从右向左的第一个 $1$，我们已经知道这个 $1$ 之前的所有情况已经存储，我们直接拿来用即可，然后将这个 $1$ 拿去，前面的 $1$ 的情况也已经存过，直接加和，这样每次询问相当于求了这个数中有多少个 $1$ 的次数。</p><p>而修改数值（上传）也是一个道理，可以感性理解为不断左移最低位的 $1$，如果和原来位的 $1$ <strong>重合</strong>，那么直接进位即可。</p><h2 id="树状数组-1"><a href="#树状数组-1" class="headerlink" title="树状数组 1"></a>树状数组 1</h2><p><a href="https://www.luogu.com.cn/problem/P3374">P3374 【模板】树状数组 1</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//树状数组 </span><span class="token keyword">int</span> <span class="token function">l_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快速上下访问（二进制） </span>  <span class="token keyword">return</span> k<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//上传标记 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>k<span class="token punctuation">;</span><span class="token comment">//更新区间 </span>    x<span class="token operator">+=</span><span class="token function">l_b</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//向下求和 </span>  <span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    a_s<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//累计结果 </span>    k<span class="token operator">-=</span><span class="token function">l_b</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原始序列值 </span>    <span class="token function">b_t</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树（更新区间信息） </span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//操作 </span>    <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">b_t</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新区间（单点修改） </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token function">g_a</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">g_a</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间和 </span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树状数组-2"><a href="#树状数组-2" class="headerlink" title="树状数组 2"></a>树状数组 2</h2><p><a href="https://www.luogu.com.cn/problem/P3368">P3368 【模板】树状数组 2</a></p><p>将区间加变成标记打在树状数组上，区间和变成了打标记的方法，查询向上查，存值向下找。区间存值时，区间的覆盖范围，就是这个区间增的值，但是由于树状数组的区间范围比较死板，所以如果覆盖的超过需求要在往下找，打一个相反数的标记，这样查询的时候，一正一反，直接抵消。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">l_b</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> k<span class="token operator">&amp;</span><span class="token operator">-</span>k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//[1,r] 加标记 </span>    t_r<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span>    r<span class="token operator">-=</span><span class="token function">l_b</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  l<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//[1,l-1] 减去多打的标记 </span>    t_r<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">-=</span>v<span class="token punctuation">;</span>    l<span class="token operator">-=</span><span class="token function">l_b</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a_k<span class="token operator">=</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储原序列中的值 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//累计本数上的所有标记 </span>    a_s<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    k<span class="token operator">+=</span><span class="token function">l_b</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>a_k<span class="token operator">+</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标记加值为答案 </span>  <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储原序列 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">a_d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间标记 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token function">g_a</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找答案 </span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>个人感觉树状数组比较单一，不因为树状数组不学线段树。虽然代码短，但其他方面线段树更加灵活，思路难度相似。</strong></p><p><a href="https://wdsa001.github.io/2021/09/16/xian-duan-shu/">线段树学习</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树合并&amp;分裂</title>
      <link href="/2021/09/17/xian-duan-shu-he-bing-fen-lie/"/>
      <url>/2021/09/17/xian-duan-shu-he-bing-fen-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="线段树合并"><a href="#线段树合并" class="headerlink" title="线段树合并"></a>线段树合并</h2><ul><li>数据结构</li><li>最近公共祖先</li><li>倍增</li><li>线段树</li></ul><p><a href="https://www.luogu.com.cn/problem/P4556">P4556  Vani有约会 雨天的尾巴 /【模板】线段树合并</a></p><h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><ul><li>连边</li><li>倍增（求LCA）（存深度）</li><li>存救济粮发放信息（打懒标记）</li><li>遍历基础信息</li><li>动态开点</li><li>合并线段树</li><li>记录结果</li><li>输出</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v<span class="token punctuation">;</span>  <span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存边 </span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">;</span><span class="token keyword">int</span> f_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存父节点（倍增） </span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存点的深度 </span><span class="token keyword">int</span> a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储答案 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i_d<span class="token punctuation">,</span>n_m<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> po <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span><span class="token comment">//这里必须是小于号，max 默认的判断小于。</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n_m<span class="token operator">==</span>a<span class="token punctuation">.</span>n_m<span class="token punctuation">)</span><span class="token operator">?</span>i_d<span class="token operator">&gt;</span>a<span class="token punctuation">.</span>i_d<span class="token operator">:</span>n_m<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>n_m<span class="token punctuation">;</span><span class="token comment">//如果数量一样，返回标号小的 </span>  <span class="token punctuation">}</span>    po <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> po <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">{</span>i_d<span class="token punctuation">,</span>n_m<span class="token operator">+</span>a<span class="token punctuation">.</span>n_m<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//数量累计 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span><span class="token number">40</span><span class="token operator">*</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>po<span class="token operator">&gt;</span>l_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//线段树懒标记 </span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建边 </span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">40</span><span class="token operator">*</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//节点左右儿子 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//节点赋新编号 </span><span class="token keyword">void</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span>po k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//动态开点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是叶子  </span>    t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token operator">+</span>t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//合并，注意这里的加法顺序不能颠倒 </span>    <span class="token comment">//不能写成 t_r[p]+k，由于重载运算符，我们取的是前者的 id（救济粮编号） </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>i_d<span class="token operator">&lt;=</span>m_i<span class="token punctuation">)</span><span class="token punctuation">{</span>      s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">++</span>s_m<span class="token punctuation">;</span><span class="token comment">//左儿子已有编号，继续用；没有编号，赋新编号 </span>    <span class="token function">g_a</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续遍历 </span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">?</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">++</span>s_m<span class="token punctuation">;</span><span class="token comment">//右儿子已有编号，继续用；没有编号，赋新编号 </span>      <span class="token function">g_a</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续遍历 </span>  <span class="token punctuation">}</span>  t_r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求左右儿子最大值（同时更新了编号） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_g</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是叶子</span>    t_r<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">+</span>t_r<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//合并 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//将 b 并到 a 中 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">b_g</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左儿子都存在，开始合并 </span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a 没有左儿子 </span>  <span class="token comment">//b 若没有儿子不用操作</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">b_g</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右儿子都存在，开始合并 </span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a 没有右儿子 </span>  <span class="token comment">//b 若没有儿子不用操作</span>    t_r<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储最大值（同时更新了编号） </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//倍增求 LCA </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>f_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>f_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f_a<span class="token punctuation">[</span>f_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>f_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//处理深度 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">!=</span>f_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      f_a<span class="token punctuation">[</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>      <span class="token function">d_1</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续遍历 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">l_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找公共祖先 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">&lt;</span>d_p<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token operator">=</span>d_p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">-</span>d_p<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>d<span class="token punctuation">;</span>d<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//两者深度相同 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>u<span class="token operator">=</span>f_a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//二进制判断（将差的值分解成二进制判断） </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">==</span>v<span class="token punctuation">)</span><span class="token keyword">return</span> u<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//跳公共祖先 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f_a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>f_a<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      u<span class="token operator">=</span>f_a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      v<span class="token operator">=</span>f_a<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> f_a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//返回公共祖先 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//合并线段树 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">!=</span>f_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">d_2</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按顺序合并线段树（类似于拓扑序的合并，不会因为合并的顺序互相影响结果） </span>      <span class="token function">b_g</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并线段树 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>po<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>it<span class="token punctuation">)</span>    <span class="token function">g_a</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1e5</span><span class="token punctuation">,</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放懒标记 </span>    a_s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">;</span><span class="token comment">//存储结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s_m<span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//连边，建图 </span>    u<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理 LCA </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>z<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        u<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        z<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入救济粮发放 </span>    <span class="token keyword">int</span> g_f<span class="token operator">=</span><span class="token function">l_a</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取两者公共祖先 </span>        l_n<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">{</span>z<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在叶节点打标记（前缀和求法） </span>    l_n<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">{</span>z<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打标记 </span>        l_n<span class="token punctuation">[</span>g_f<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">{</span>z<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标记结束（这个点还有 1 的权值，所以要保留 1 的值） </span>    l_n<span class="token punctuation">[</span>f_a<span class="token punctuation">[</span>g_f<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">{</span>z<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标记彻底结束 </span>    <span class="token punctuation">}</span>  <span class="token function">d_2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//线段树合并 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线段树分裂"><a href="#线段树分裂" class="headerlink" title="线段树分裂"></a>线段树分裂</h2><ul><li>数据结构</li><li>平衡树</li><li>线段树</li></ul><p><a href="https://www.luogu.com.cn/problem/P5494">P5494 【模板】线段树分裂</a></p><h3 id="整体思路-1"><a href="#整体思路-1" class="headerlink" title="整体思路"></a>整体思路</h3><ul><li>实现动态开点</li><li>建树（根节点为 1）</li><li>实现操作一：分裂（开点）</li><li>实现操作二：合并（合并，删点）</li><li>实现废点回收（再利用）</li><li>实现操作三：插入（叶子结点加权）</li><li>实现操作四：查找区间数的个数（线段树区间和）</li><li>实现操作五：根据排名找原数（Splay）</li></ul><h4 id="各变量意义"><a href="#各变量意义" class="headerlink" title="各变量意义"></a>各变量意义</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">6e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组大小 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token comment">//序列长度，操作次数 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//线段树节点左右边界 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token punctuation">;</span><span class="token comment">//区间和 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//所有节点个个数（包括垃圾桶中的点） </span><span class="token keyword">int</span> s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//垃圾桶中可用的点 </span><span class="token keyword">int</span> r_s<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//节点垃圾桶 </span><span class="token keyword">int</span> r_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录每个序列的线段树根节点 </span><span class="token keyword">int</span> x_t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//新可重集序号 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原序列 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现动态开点-amp-废点回收（再利用）"><a href="#实现动态开点-amp-废点回收（再利用）" class="headerlink" title="实现动态开点&amp;废点回收（再利用）"></a>实现动态开点&amp;废点回收（再利用）</h4><p>动态开点用来即时给新节点赋予编号。由于本题空间范围较紧迫，要进行废点的回收利用。</p><p>我们要再开一个数组专门用废弃的点，要新时的时，先不开新点，先废物利用。（新开一个记录废点的数组要比直接开两个存点数组优的多）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删除节点 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清空数据 </span>  r_s<span class="token punctuation">[</span><span class="token operator">++</span>s_m<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//放入垃圾桶 </span>  k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//节点编号清空 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//赋新节点编号 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>s_m<span class="token punctuation">)</span><span class="token keyword">return</span> r_s<span class="token punctuation">[</span>s_m<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//垃圾桶中有可用的，先回收利用 </span>  <span class="token keyword">return</span> <span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//造新点 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h4><p>线段树基础操作。（需要复习的可以看<a href="https://wdsa001.github.io/2021/09/16/xian-duan-shu/">这里</a>）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点信息 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不存在节点，赋予编号 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//叶节点赋值 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现操作一：分裂"><a href="#实现操作一：分裂" class="headerlink" title="实现操作一：分裂"></a>实现操作一：分裂</h4><p>分裂的主要思路在于动态开点和值的转移（将原值附在新树上同时<strong>清空</strong>原点（不是删除））。</p><p><strong>注意更新被分裂的线段树节点的值！</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">n_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_2<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建新树，分裂 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>x<span class="token operator">||</span>y<span class="token operator">&lt;</span>l<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//不在范围内，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_1<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//树不存在，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在范围内 </span>    t_2<span class="token operator">=</span>t_1<span class="token punctuation">;</span><span class="token comment">//节点赋值 </span>    t_1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//原节点清空 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_2<span class="token punctuation">)</span>t_2<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点不存在，建新点 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">n_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树分裂 </span>  <span class="token function">n_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树分裂 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>t_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>t_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现操作二：合并"><a href="#实现操作二：合并" class="headerlink" title="实现操作二：合并"></a>实现操作二：合并</h4><p>合并的思路与分裂的思路很像但区别在于，节点要删除。原因在于题干：（数据保证在此后的操作中不会出现可重集 $t$）。</p><p>所以，这些空出来的节点就可以直接回收了。<strong>不仅要删叶节点，要删所有的节点</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">b_g</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_2<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//线段树合并 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_1<span class="token operator">||</span><span class="token operator">!</span>t_2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有一棵不存在 </span>    t_1<span class="token operator">+=</span>t_2<span class="token punctuation">;</span><span class="token comment">//直接赋值 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是叶节点，合并 </span>    t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span>    <span class="token function">d_l</span><span class="token punctuation">(</span>t_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删掉被合并的节点（叶子结点） </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_g</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树合并 </span>  <span class="token function">b_g</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树合并 </span>  <span class="token function">d_l</span><span class="token punctuation">(</span>t_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删掉被合并的节点（区间节点） </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>t_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现操作三：插入"><a href="#实现操作三：插入" class="headerlink" title="实现操作三：插入"></a>实现操作三：插入</h4><p>找到子叶编号为 $q$ 的叶子，将他的权值（或者说个数）加上 $x$ 即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> n_m<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n_m<span class="token operator">&lt;</span>l<span class="token operator">||</span>n_m<span class="token operator">&gt;</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//不在范围内返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点不存在，新建节点 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找到叶子结点 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//加权（增加数量） </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">a_d</span><span class="token punctuation">(</span>n_m<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树维护 </span>  <span class="token function">a_d</span><span class="token punctuation">(</span>n_m<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树维护 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现操作四：查找区间数的个数"><a href="#实现操作四：查找区间数的个数" class="headerlink" title="实现操作四：查找区间数的个数"></a>实现操作四：查找区间数的个数</h4><p>线段树区间和操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">s_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&lt;</span>l<span class="token operator">||</span>r<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//区间外，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//节点不存在，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//被范围包含，返回个数 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">s_a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">s_a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回左右子树符合要求的和（此节点的子树总贡献） </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现操作五：根据排名找原数"><a href="#实现操作五：根据排名找原数" class="headerlink" title="实现操作五：根据排名找原数"></a>实现操作五：根据排名找原数</h4><p>本操作用到了平衡树的思想，如果左区间的大小比 $k$ 大，那么排名为 $k$ 的值一定在其中，否则减去左子树的大小（左边的数排名一定比它小），跳到右子树继续找。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">f_k</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> p_k<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>p_k<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//未找到，直接返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token comment">//找到节点，返回值 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">&gt;=</span>p_k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_k</span><span class="token punctuation">(</span>p_k<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树的数量超过 k 的排名数，一定在左子树 </span>  <span class="token keyword">return</span> <span class="token function">f_k</span><span class="token punctuation">(</span>p_k<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//减去左子树的数的数量，在右子树继续找 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">6e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组大小 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token comment">//序列长度，操作次数 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//线段树节点左右边界 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token punctuation">;</span><span class="token comment">//区间和 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//所有节点个个数（包括垃圾桶中的点） </span><span class="token keyword">int</span> s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//垃圾桶中可用的点 </span><span class="token keyword">int</span> r_s<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//节点垃圾桶 </span><span class="token keyword">int</span> r_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录每个序列的线段树根节点 </span><span class="token keyword">int</span> x_t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//新可重集序号 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原序列 </span><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删除节点 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清空数据 </span>  r_s<span class="token punctuation">[</span><span class="token operator">++</span>s_m<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//放入垃圾桶 </span>  k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//节点编号清空 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//赋新节点编号 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>s_m<span class="token punctuation">)</span><span class="token keyword">return</span> r_s<span class="token punctuation">[</span>s_m<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//垃圾桶中有可用的，先回收利用 </span>  <span class="token keyword">return</span> <span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//造新点 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点信息 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不存在节点，赋予编号 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//叶节点赋值 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_g</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_2<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//线段树合并 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_1<span class="token operator">||</span><span class="token operator">!</span>t_2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有一棵不存在 </span>    t_1<span class="token operator">+=</span>t_2<span class="token punctuation">;</span><span class="token comment">//直接赋值 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是叶节点，合并 </span>    t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span>    <span class="token function">d_l</span><span class="token punctuation">(</span>t_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删掉被合并的节点（叶子结点） </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_g</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树合并 </span>  <span class="token function">b_g</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树合并 </span>  <span class="token function">d_l</span><span class="token punctuation">(</span>t_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删掉被合并的节点（区间节点） </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>t_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">n_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>t_2<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建新树，分裂 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>x<span class="token operator">||</span>y<span class="token operator">&lt;</span>l<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//不在范围内，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_1<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//树不存在，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在范围内 </span>    t_2<span class="token operator">=</span>t_1<span class="token punctuation">;</span><span class="token comment">//节点赋值 </span>    t_1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//原节点清空 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t_2<span class="token punctuation">)</span>t_2<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点不存在，建新点 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">n_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树分裂 </span>  <span class="token function">n_t</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_1<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>t_2<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树分裂 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>t_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>t_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> n_m<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n_m<span class="token operator">&lt;</span>l<span class="token operator">||</span>n_m<span class="token operator">&gt;</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//不在范围内返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点不存在，新建节点 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找到叶子结点 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//加权（增加数量） </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">a_d</span><span class="token punctuation">(</span>n_m<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树维护 </span>  <span class="token function">a_d</span><span class="token punctuation">(</span>n_m<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树维护 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">s_a</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&lt;</span>l<span class="token operator">||</span>r<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//区间外，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//节点不存在，返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//被范围包含，返回个数 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">s_a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">s_a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回左右子树符合要求的和（此节点的子树总贡献） </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_k</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> p_k<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>p_k<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//未找到，直接返回 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token comment">//找到节点，返回值 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">&gt;=</span>p_k<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f_k</span><span class="token punctuation">(</span>p_k<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树的数量超过 k 的排名数，一定在左子树 </span>  <span class="token keyword">return</span> <span class="token function">f_k</span><span class="token punctuation">(</span>p_k<span class="token operator">-</span>t_r<span class="token punctuation">[</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//减去左子树的数的数量，在右子树继续找 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入序列 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span>r_t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以 1 为根节点建树 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">n_t</span><span class="token punctuation">(</span>r_t<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>r_t<span class="token punctuation">[</span><span class="token operator">++</span>x_t<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建新树 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">b_g</span><span class="token punctuation">(</span>r_t<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>r_t<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并可重集 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">a_d</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>x<span class="token punctuation">,</span>r_t<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加数字 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">s_a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r_t<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询范围内数的个数 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">s_a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>r_t<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//总数不够 k 个，不存在第 k 小 </span>      <span class="token keyword">else</span> a_s<span class="token operator">=</span><span class="token function">f_k</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>r_t<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找第 k 小 </span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 最近公共祖先 </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2021/09/16/xian-duan-shu/"/>
      <url>/2021/09/16/xian-duan-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="线段树模板1（基础）"><a href="#线段树模板1（基础）" class="headerlink" title="线段树模板1（基础）"></a>线段树模板1（基础）</h2><p><a href="https://www.luogu.com.cn/problem/P3372">P3372 【模板】线段树 1</a></p><p>（上：编号，下：区间管辖范围）</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">             <span class="token punctuation">[</span>1<span class="token punctuation">]</span>            <span class="token punctuation">[</span>0~5<span class="token punctuation">]</span>             /<span class="token function selector">\</span>            /  <span class="token function selector">\</span>           /    <span class="token function selector">\</span>          /      <span class="token function selector">\</span>         /        <span class="token function selector">\</span>       <span class="token punctuation">[</span>2<span class="token punctuation">]</span>        <span class="token punctuation">[</span>3<span class="token punctuation">]</span>      <span class="token punctuation">[</span>0~3<span class="token punctuation">]</span>      <span class="token punctuation">[</span>4~5<span class="token punctuation">]</span>       /<span class="token function selector">\ </span>         /<span class="token function selector">\</span>      /  <span class="token function selector">\ </span>       /  <span class="token function selector">\ </span>          /    <span class="token function selector">\ </span>     /    <span class="token function selector">\</span>   <span class="token punctuation">[</span>4<span class="token punctuation">]</span>    <span class="token punctuation">[</span>5<span class="token punctuation">]</span>  <span class="token punctuation">[</span>6<span class="token punctuation">]</span>    <span class="token punctuation">[</span>7<span class="token punctuation">]</span>  <span class="token punctuation">[</span>0~1<span class="token punctuation">]</span>  <span class="token punctuation">[</span>2~3<span class="token punctuation">]</span> <span class="token punctuation">[</span>4<span class="token punctuation">]</span>    <span class="token punctuation">[</span>5<span class="token punctuation">]</span>   /<span class="token function selector">\ </span>     /<span class="token function selector">\ </span>   <span class="token function selector">\ </span>     <span class="token function selector">\</span> <span class="token punctuation">[</span>8<span class="token punctuation">]</span><span class="token punctuation">[</span>9<span class="token punctuation">]</span> <span class="token punctuation">[</span>10<span class="token punctuation">]</span><span class="token punctuation">[</span>11<span class="token punctuation">]</span> <span class="token punctuation">[</span>12<span class="token punctuation">]</span>   <span class="token punctuation">[</span>13<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>  <span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span>  <span class="token punctuation">[</span>3<span class="token punctuation">]</span>  <span class="token punctuation">[</span>4<span class="token punctuation">]</span>    <span class="token punctuation">[</span>5<span class="token punctuation">]</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不断二分查找支持懒标记的树状结构。</p><h3 id="左儿子"><a href="#左儿子" class="headerlink" title="左儿子"></a>左儿子</h3><p>位运算提速。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="右儿子"><a href="#右儿子" class="headerlink" title="右儿子"></a>右儿子</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="树的存储"><a href="#树的存储" class="headerlink" title="树的存储"></a>树的存储</h3><p>将序列存储成树状结构。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//若到达叶节点 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储a数组的值</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建子树 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//更新信息 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="懒标记"><a href="#懒标记" class="headerlink" title="懒标记"></a>懒标记</h3><p>快捷存储状态，在访问时，在将要访问的点同时更新（懒标记下传）。这样原本要更新 $10$ 次，但是现在，在访问前只需更新 $1$ 次即可（要更新的数是原来要更新累计的）。</p><p>在扫区间时，只要区间在要更新范围内，在区间上打懒标记。这样在询问前将区间懒标记释放即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在要求范围内 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>v<span class="token punctuation">;</span><span class="token comment">//更新区间</span>    l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//懒标记 </span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新懒标记 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历左右子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新当前节点 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在子节点遍历完时，回溯到区间时。要更新区间，区间存的是区间和，区间内节点值被更新，区间值也要更新。</p><h3 id="区间修改（加值）"><a href="#区间修改（加值）" class="headerlink" title="区间修改（加值）"></a>区间修改（加值）</h3><p>遍历区间在要更新的区间内，将此区间打上懒标记并更新，继续分左右子树遍历即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在要求范围内 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>v<span class="token punctuation">;</span>    l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//懒标记 </span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新懒标记 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历左右子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="懒标记释放"><a href="#懒标记释放" class="headerlink" title="懒标记释放"></a>懒标记释放</h3><p>当前节点只用更新区间的左右子树的值和懒标记，遍历完这个点后，直接遍历左右子树就可以保证懒标记传递完整。回溯时，也要及时更新区间维护的值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新懒标记 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  l_n<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//懒标记下传 </span>  l_n<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>m_i<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新子树 </span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span>  l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清空懒标记 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>与区间修改相似，注意在查询前先释放懒标记。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">s_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//求区间和 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//在区间范围内，返回区间和 </span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span>a_s<span class="token operator">+=</span><span class="token function">s_m</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找左右子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span>a_s<span class="token operator">+=</span><span class="token function">s_m</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组空间 </span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原序列 </span><span class="token keyword">long</span> <span class="token keyword">long</span> t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//线段树 </span><span class="token keyword">long</span> <span class="token keyword">long</span> l_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//懒标记 </span><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新当前节点 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//叶节点，赋值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建子树 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新懒标记 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  l_n<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//懒标记下传 </span>  l_n<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>m_i<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新子树 </span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span>  l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清空懒标记 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在要求范围内 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>v<span class="token punctuation">;</span>    l_n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//懒标记 </span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新懒标记 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历左右子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">s_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//求区间和 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//在区间范围内，返回区间和 </span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span>a_s<span class="token operator">+=</span><span class="token function">s_m</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找左右子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span>a_s<span class="token operator">+=</span><span class="token function">s_m</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原序列 </span>    <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//区间求和 </span>      <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">s_m</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线段树模板2（深度认知）"><a href="#线段树模板2（深度认知）" class="headerlink" title="线段树模板2（深度认知）"></a>线段树模板2（深度认知）</h2><p><a href="https://www.luogu.com.cn/problem/P3373">P3373 【模板】线段树 2</a></p><p>比上一道题多一个区间乘操作，注意符号运算有优先级。</p><p>$(a+b)\times c=a\times c+b\times c$。</p><p>$($ 加法懒标记 $+$ 值 $)\times $ 乘法懒标记 $=$ 加法懒标记 $\times$ 乘法懒标记 $+$ 值 $\times$ 乘法懒标记</p><p><strong>即时取模</strong></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组空间 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span><span class="token comment">//节点值 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> c_h<span class="token punctuation">;</span><span class="token comment">//乘法懒标记 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_d<span class="token punctuation">;</span><span class="token comment">//加法懒标记 </span><span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新当前节点的值 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">+</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化，乘法懒标记（要设为 1，否则所有乘运算都是无用功） </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化，加法懒标记 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是节点，记录 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点变量 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//懒标记下穿（运算优先级，先乘再加）  </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//更新儿子数值 </span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//处理左儿子的值的乘法值增加 </span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">*</span><span class="token punctuation">(</span>m_i<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//处理左儿子的值的加法值增加</span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//处理右儿子的值的乘法值增加 </span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>m_i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//处理右儿子的值的加法值增加</span>    <span class="token comment">//更新儿子乘法懒标记 </span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新左儿子乘法懒标记（标记下传） </span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新右儿子乘法懒标记（标记下传） </span>    <span class="token comment">//更新儿子加法懒标记 </span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新左儿子加法懒标记经过乘法后的变化（标记下传） </span>  t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新左儿子加法懒标记（标记下传） </span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新右儿子加法懒标记经过乘法后的变化（标记下传） </span>  t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">+</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新左儿子加法懒标记（标记下传） </span>    <span class="token comment">//清空懒标记 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">c_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间修改——乘法 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新区间值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c_h<span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新乘法懒标记 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//乘法的优先运算比加法高，所以加法要加括号，把括号拆开，加法运算也要更新 </span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//懒标记下传 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span><span class="token function">c_h</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span><span class="token function">c_h</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回溯更新节点 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间修改——加法 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d<span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新加法懒标记 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">+</span>v<span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新值 </span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//懒标记下传 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回溯更新节点 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">s_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间查询 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//统计结果 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//在区间范围内，直接调用区间值 </span>  <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&gt;=</span>x<span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span><span class="token function">s_m</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//向左查 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token operator">&lt;</span>y<span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span><span class="token function">s_m</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//向右查 </span>  <span class="token keyword">return</span> a_s<span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取原序列 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">c_h</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间修改——乘法 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间修改——加法 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">s_m</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间求和 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线段树模板3（深刻理解）"><a href="#线段树模板3（深刻理解）" class="headerlink" title="线段树模板3（深刻理解）"></a>线段树模板3（深刻理解）</h2><p><a href="https://www.luogu.com.cn/problem/P6242">P6242 【模板】线段树 3</a></p><p>比前面的模板有特色地地方在于维护最大值，历史最大值，区间更新最小值。</p><p>主要难点在与最小值的维护。维护最小值我们需要四个信息：区间最大值，最大值个数，区间历史最大值，区间严格次大值。</p><p>这样在更新区间最小值时，会出现以下三种情况。</p><ul><li><p>更新值 $&gt;$ 区间最大值。（那么此时直接跳出，因为没有只需要更新）</p></li><li><p>更新值 $&lt;$ 区间最大值，但是 $&gt;$ 区间次大值，那么将现在的区间和减去最大值个数 $\times ($ 最大值 $-$ 区间要更新的最小值 $)$，即完成了维护，再更新区间最大值，更新为区间要更新的最小值。</p></li><li><p>更新值 $&lt;$ 区间次大值，那么继续向下搜。</p></li></ul><p>区间历史最大值虽然不用参与讨论，但是要时刻维护（操作 $5$）</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">3e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组大小 </span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">2e9</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//最大值 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//树的节点（覆盖区间） </span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//区间覆盖范围 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> m_x<span class="token punctuation">;</span><span class="token comment">//区间最大值 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x_p<span class="token punctuation">;</span><span class="token comment">//最大值个数 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> m_x_<span class="token punctuation">;</span><span class="token comment">//区间历史最大值 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> m_i_x<span class="token punctuation">;</span><span class="token comment">//区间严格次大值 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token punctuation">;</span><span class="token comment">//区间和 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a_d_1<span class="token punctuation">;</span><span class="token comment">//最大值区间加减标记 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_d_1_<span class="token punctuation">;</span><span class="token comment">//最大值历史区间最大加减标记 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_d_2<span class="token punctuation">;</span><span class="token comment">//非最大值区间加减标记 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_d_2_<span class="token punctuation">;</span><span class="token comment">//非最大值区间最大加减标记 </span>  <span class="token punctuation">}</span>t_r<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//线段树区间节点 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原序列 </span><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左子树 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右子树 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点信息 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//更新区间和 </span>    <span class="token comment">//更新区间历史最大值 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">==</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左右儿子最大值相同 </span>      <span class="token comment">//更新节点最大值</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">;</span>         <span class="token comment">//更新节点次大值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更新最大值数量 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token operator">+</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">&gt;</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左儿子最大值更大 </span>      <span class="token comment">//更新节点最大值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">;</span>        <span class="token comment">//更新节点次大值  </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更新最大值数量</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//右儿子最大值更大 </span>      <span class="token comment">//更新节点最大值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">;</span>        <span class="token comment">//更新节点次大值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更新节点最大值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token operator">=</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//更新区间和标记 </span><span class="token comment">//k 当前节点坐标，k_1 最大值区间加减标记，k_1_ 最大值历史区间最大加减标记 </span><span class="token comment">//k_2 非最大值区间加减标记，k_2_ 非最大值区间最大加减标记 </span><span class="token keyword">void</span> <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> k_1<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> k_1_<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> k_2<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> k_2_<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//更新区间和 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>k_1<span class="token operator">*</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token operator">+</span>k_2<span class="token operator">*</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">-</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//更新区间历史最大值 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">+</span>k_1_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//更新区间历史最大加减标记 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1_<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1<span class="token operator">+</span>k_1_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//更新区间最大值 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">+=</span>k_1<span class="token punctuation">;</span>    <span class="token comment">//更新区间最大加减标记 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1<span class="token operator">+=</span>k_1<span class="token punctuation">;</span>    <span class="token comment">//更新非最大值区间加减标记</span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token operator">+</span>k_2_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当前节点有次大值，更新次大值 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">!=</span><span class="token operator">-</span>m_a<span class="token punctuation">)</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">+=</span>k_2<span class="token punctuation">;</span>    <span class="token comment">//更新非最大值区间最大加减标记</span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token operator">+=</span>k_2<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//下传懒标记 </span>    <span class="token comment">//记录儿子中的最大值 </span>  <span class="token keyword">int</span> m_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//左儿子最大值大，以最大值身份更新区间 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">==</span>m_s<span class="token punctuation">)</span>    <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//左儿子最大值小，以次大值身份更新区间 </span>  <span class="token keyword">else</span> <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//右儿子最大值大，以最大值身份更新区间 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">==</span>m_s<span class="token punctuation">)</span>    <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//右儿子最大值小，以次大值身份更新区间 </span>  <span class="token keyword">else</span> <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token punctuation">,</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//清除标记 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1_<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>r<span class="token punctuation">;</span><span class="token comment">//初始化左右区间 </span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_1_<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a_d_2_<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化区间加减标记 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是节点存储信息 </span>      t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储节点初始信息</span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token operator">=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token operator">=</span>a_a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//最大值和历史最大值初始化 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token operator">=</span><span class="token operator">-</span>m_a<span class="token punctuation">;</span><span class="token comment">//初始化区间严格次大值 </span>    t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化区间最大值个数 </span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>m_d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加减修改 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&gt;</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//区间不在询问范围内 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间被询问范围包含 </span>      <span class="token function">u_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>v<span class="token punctuation">,</span>v<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点值 </span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下传懒标记 </span>    <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">m_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间最小值修改 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&gt;</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l<span class="token operator">||</span>v<span class="token operator">&gt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//区间不在询问范围内</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span>v<span class="token operator">&gt;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_i_x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间被询问范围包含</span>       <span class="token comment">//更新最大区间加减标记和历史最大标记，保证更新后不会超过更新最小值</span>    <span class="token comment">//若区间规定最小值比原值小，区间修改值变为负数，多了多少，就减多少 </span>    <span class="token function">u_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token operator">-</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">,</span>v<span class="token operator">-</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下传懒标记 </span>    <span class="token function">m_i</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树 </span>  <span class="token function">m_i</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树 </span>    <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点信息 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">s_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//求区间和 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&gt;</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//不在范围内，不更新答案 </span>    <span class="token comment">//被范围包含，直接返回提前处理好的区间和 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span>    <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标记下传 </span>    a_s<span class="token operator">=</span><span class="token function">s_m</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">s_m</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//统计答案 </span>    <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回统计结果 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">a_x</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//求区间最大值 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&gt;</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span>m_a<span class="token punctuation">;</span><span class="token comment">//不在范围内，返回不更新答案的值 </span>    <span class="token comment">//被范围包含，直接返回提前处理好的区间和 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x<span class="token punctuation">;</span>    <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标记下传 </span>    a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">a_x</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">a_x</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最大值 </span>    <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回统计结果 </span>  <span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">b_x</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//求区间历史最大值 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&gt;</span>r<span class="token operator">||</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>l<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span>m_a<span class="token punctuation">;</span><span class="token comment">//不在范围内，返回不更新答案的值 </span>    <span class="token comment">//被范围包含，直接返回提前处理好的区间和 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> t_r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>m_x_<span class="token punctuation">;</span>    <span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标记下传 </span>    a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">b_x</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">b_x</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最大值 </span>    <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回统计结果 </span>  <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入序列 </span>    <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建图 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间加 </span>          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">m_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间最小值 </span>          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">s_m</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间和 </span>          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">a_x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间最大值 </span>          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">b_x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间历史最大值 </span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数位dp+状态压缩dp+数据结构优化的dp</title>
      <link href="/2021/09/14/shu-wei-dp-zhuang-tai-ya-suo-dp-shu-ju-jie-gou-you-hua-de-dp/"/>
      <url>/2021/09/14/shu-wei-dp-zhuang-tai-ya-suo-dp-shu-ju-jie-gou-you-hua-de-dp/</url>
      
        <content type="html"><![CDATA[<h2 id="数位DP"><a href="#数位DP" class="headerlink" title="数位DP"></a>数位DP</h2><h3 id="P4124-CQOI2016-手机号码"><a href="#P4124-CQOI2016-手机号码" class="headerlink" title="P4124 CQOI2016 手机号码"></a>P4124 CQOI2016 手机号码</h3><p><a href="https://www.luogu.com.cn/problem/P4124">P4124 CQOI2016 手机号码</a></p><p>从后向前每一位进行遍历，注意判断的结束，题目约束。这里用记忆化，代码短，跑得快。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>d_p<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s_t<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//k 当前位置，a 上位数，b 上上位数，b_b 是否出现三个连续数字，n_8 是否出现 8，n_4 是否出现 4，l_t 当前位置的数是否达到上限 </span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">bool</span> b_b<span class="token punctuation">,</span><span class="token keyword">bool</span> n_8<span class="token punctuation">,</span><span class="token keyword">bool</span> n_4<span class="token punctuation">,</span><span class="token keyword">bool</span> l_t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n_8<span class="token operator">&amp;&amp;</span>n_4<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//8 和 4 不能同时出现 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> b_b<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l_t<span class="token operator">&amp;&amp;</span>d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>b_b<span class="token punctuation">]</span><span class="token punctuation">[</span>n_8<span class="token punctuation">]</span><span class="token punctuation">[</span>n_4<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//不是最后一位并且比遍历过 </span>    <span class="token keyword">return</span> d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>b_b<span class="token punctuation">]</span><span class="token punctuation">[</span>n_8<span class="token punctuation">]</span><span class="token punctuation">[</span>n_4<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//直接返回记忆存的值 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化统计答案 </span>  <span class="token keyword">int</span> m_x<span class="token operator">=</span>l_t<span class="token operator">?</span>s_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token comment">//如果不最后一位，返回 9，否则返回原字符串中当前位置的值 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//范围内的数字都可取 </span>    a_s<span class="token operator">+=</span><span class="token function">d_f</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b_b<span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">==</span>a<span class="token operator">&amp;&amp;</span>i<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>n_8<span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n_4<span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l_t<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">==</span>m_x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向前为遍历，统计 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l_t<span class="token punctuation">)</span>d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>b_b<span class="token punctuation">]</span><span class="token punctuation">[</span>n_8<span class="token punctuation">]</span><span class="token punctuation">[</span>n_4<span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">;</span><span class="token comment">//不是最后一位，更新 </span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//返回统计值 </span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> l_n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//差分数 </span>    s_t<span class="token punctuation">[</span><span class="token operator">++</span>l_n<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>    x<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l_n<span class="token operator">!=</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//说明号码 11 为不是 11 位，直接返回 </span>  <span class="token function">memset</span><span class="token punctuation">(</span>d_p<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s_t<span class="token punctuation">[</span>l_n<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举最后一位 </span>    a_s<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token function">d_f</span><span class="token punctuation">(</span>l_n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">,</span>i<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">,</span>i<span class="token operator">==</span>s_t<span class="token punctuation">[</span>l_n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入区间 </span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">f_i</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">f_i</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到从头到右区间的所有情况减去左区间 -1 到头的所有情况 </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="花神的数论题"><a href="#花神的数论题" class="headerlink" title="花神的数论题"></a>花神的数论题</h3><p><a href="https://www.luogu.com.cn/problem/P4317">P4317 花神的数论题</a></p><p>遍历每一位，通过枚举 $sum$ 等于的数（在范围内），最后直接快速幂处理值统计即可。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>d_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>d_p<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>d_p<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">51</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>a_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">k_m</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快速幂 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_a<span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_a<span class="token punctuation">;</span>    b<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//k 当前第几位，u_p 是否为上界，t_p 天了几个 1，d 总共 1 的个数 </span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> u_p<span class="token punctuation">,</span><span class="token keyword">int</span> t_p<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span><span class="token keyword">return</span> t_p<span class="token operator">==</span>d<span class="token punctuation">;</span><span class="token comment">//所有位都遍历过了 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>u_p<span class="token punctuation">]</span><span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//已经遍历过了 </span>    <span class="token keyword">return</span> d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>u_p<span class="token punctuation">]</span><span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> l_m<span class="token operator">=</span>u_p<span class="token operator">?</span>x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//是否为结束位，不是结束位，可以直接赋值为 1 （一定限制小） </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>l_m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    a_s<span class="token operator">+=</span><span class="token function">f_i</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>u_p<span class="token operator">&amp;&amp;</span>i<span class="token operator">==</span>l_m<span class="token punctuation">,</span>t_p<span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历下一位 </span>  d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>u_p<span class="token punctuation">]</span><span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">;</span>  <span class="token keyword">return</span> d_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>u_p<span class="token punctuation">]</span><span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//原数改为二进制数 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>x<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> x<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    n<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>d_p<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>    a_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">f_i</span><span class="token punctuation">(</span>x_p<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找 sum(n)=i 的有几个 </span>  <span class="token punctuation">}</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//累计答案 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    a_s<span class="token operator">=</span>a_s<span class="token operator">*</span><span class="token function">k_m</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>a_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_a<span class="token punctuation">;</span><span class="token comment">//sum(n)=1 的有 a_n[i] 个，直接相乘可以用快随幂处理 </span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">g_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="P5308-Quiz（斜率优化）"><a href="#P5308-Quiz（斜率优化）" class="headerlink" title="P5308 Quiz（斜率优化）"></a>P5308 Quiz（斜率优化）</h3><p><a href="https://www.luogu.com.cn/problem/P5308">P5308 COCI2019 Quiz</a></p><p>首先不考虑 $k$，设 $f_i$ 表示从后往前数某一轮还剩 $i$ 个人的最大奖金。<br>枚举这一轮的下一轮还剩多少人，中间少的就是淘汰的。</p><p>$f_i=max_{0\le j &lt; i}(f_j+\frac{i-j}{i})$</p><p>假设对于决策 $0 \le k &lt; j &lt; i$，有 $j$ 优于 $k$.</p><p>$f_j+\frac{i-j}{i}&gt;f_k+\frac{i-k}{i}$</p><p>$f_j-f_k&gt;\frac{j-k}{i}$</p><p>$\frac{f_j-f_k}{j-k}&gt;\frac{1}{i}$</p><p>然后既然有了 $k$ 的限制，显然 $WQS$ 二分直接上。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>d_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>d_p<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>d_p<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">double</span> i_p<span class="token operator">=</span><span class="token number">1e-12</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>g<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>h_d<span class="token punctuation">,</span>t_l<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">double</span> f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>m_i<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">double</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//获得奖金 </span>    <span class="token keyword">return</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">g_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  h_d<span class="token operator">=</span>t_l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>    q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>h_d<span class="token operator">&lt;</span>t_l<span class="token operator">&amp;&amp;</span><span class="token function">g_f</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>h_d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>i_p<span class="token punctuation">)</span>h_d<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//能在忍受在范围内，决策更优 </span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">-</span>q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>i<span class="token operator">-</span>m_i<span class="token punctuation">;</span><span class="token comment">//更新答案 </span>    g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//需要的轮数 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>h_d<span class="token operator">&lt;</span>t_l<span class="token operator">&amp;&amp;</span><span class="token function">g_f</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>t_l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">g_f</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.0</span><span class="token operator">-</span>i_p<span class="token punctuation">)</span><span class="token operator">--</span>t_l<span class="token punctuation">;</span><span class="token comment">//回缩一位在可以忍受惹误差范围内，就回缩 </span>        q<span class="token punctuation">[</span><span class="token operator">++</span>t_l<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//加入当前位 </span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> g<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&gt;=</span>k<span class="token punctuation">;</span><span class="token comment">//是否在预定内</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1e6</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">g_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>l<span class="token operator">=</span>m_i<span class="token punctuation">;</span><span class="token comment">//不在预定范围内，缩短“战线” </span>        <span class="token keyword">else</span> r<span class="token operator">=</span>m_i<span class="token punctuation">;</span><span class="token comment">//仍然在，缩短确定范围 </span>    <span class="token punctuation">}</span>    m_i<span class="token operator">=</span>l<span class="token punctuation">;</span>  <span class="token function">g_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.9Lf\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">*</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="状压DP"><a href="#状压DP" class="headerlink" title="状压DP"></a>状压DP</h2><p>经常用二进制位存状态。</p><h3 id="吃奶酪"><a href="#吃奶酪" class="headerlink" title="吃奶酪"></a>吃奶酪</h3><p><a href="https://www.luogu.com.cn/problem/P1433">P1433 吃奶酪</a></p><p>注意二进制表示是否到过这个奶酪的状态。</p><p>例如：现在有 $7$ 个奶酪。</p><p>$(1000000)_2 $ 表示已经走过了第一个奶酪，$(1001100)_2$ 表示已经走过了 $1,4,5$ 这些城市。他只是快捷的记录了一种状态</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>d_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>d_p<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>d_p<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">double</span> x<span class="token punctuation">;</span>  <span class="token keyword">double</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> x<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">g_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//两点距离公式 </span>  <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>p_p<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>p_p<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">-</span>p_p<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">-</span>p_p<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入奶酪的坐标 </span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>s<span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>s<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举路径 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举当前到了哪个点 </span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//如果当前点，不再以经过的路径中，直接返回（不合法） </span>          <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前点是出发点 </span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举走过的地点，找最优解 </span>              <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>s<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//没走过这个点，不能自己判自己 </span>              f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">g_l</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果找到最小值比当前情况优，及时更新 </span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token keyword">double</span> a_s<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> s<span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">g_l</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//已经走过所有路径当前点到最后一个点的距离并统计从出发点到这个点的距离 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a_s<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>a_s<span class="token operator">&gt;</span>s<span class="token punctuation">)</span> a_s<span class="token operator">=</span>s<span class="token punctuation">;</span><span class="token comment">//找最小值 </span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="互不侵犯"><a href="#互不侵犯" class="headerlink" title="互不侵犯"></a>互不侵犯</h3><p><a href="https://www.luogu.com.cn/problem/P1896">P1896 SCOI2005 互不侵犯</a></p><p>枚举一行可能出现的所有状况，枚举两行之间所有可能出现的状况拼接，转移并记录。</p><p><strong>一定要尝试自己写过。</strong></p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">2001</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>x_p<span class="token punctuation">;</span><span class="token keyword">int</span> s_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>f_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> d_p<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> z_t<span class="token punctuation">,</span><span class="token keyword">int</span> s_m<span class="token punctuation">,</span><span class="token keyword">int</span> n_n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当前格子状态，放的国王数，当前第几个格子</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n_n<span class="token operator">&gt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//记录当前情况的状态 </span>    s_t<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token operator">=</span>z_t<span class="token punctuation">;</span><span class="token comment">//记录当前行的国王放置状态 </span>    f_s<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token operator">=</span>s_m<span class="token punctuation">;</span><span class="token comment">//记录放的国王数 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">d_f</span><span class="token punctuation">(</span>z_t<span class="token punctuation">,</span>s_m<span class="token punctuation">,</span>n_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不用当前格子 </span>  <span class="token function">d_f</span><span class="token punctuation">(</span>z_t<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n_n<span class="token punctuation">)</span><span class="token punctuation">,</span>s_m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n_n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用当前格子，更新状态，更新数量，为了合法性，直接跳过下一个格子的讨论（只能不放） </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先处理一行的所有可能情况</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>d_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>f_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//将第一行的情况记录 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举本行所有的情况 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举上一行的所有情况 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举行之间不同的交错转态 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s_t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;</span>s_t<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//上下有重复的国王 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s_t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s_t<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//第一个状态所有国王位置左移，如果与第二个状态有位置相同的，说明不合法（第二个转态的右下角有一状态的国王） </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s_t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>s_t<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//第二个状态所有国王位置左移，如果与第一个状态有位置相同的，说明不合法（第二个转态的左下角有一状态的国王） </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token operator">=</span>k<span class="token punctuation">;</span>s<span class="token operator">&gt;=</span>f_s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//有继承当前状态的空间 </span>          d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+=</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token operator">-</span>f_s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">+=</span>d_p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//统计所有需要情况（第 n 行，所有可能的国王放置情况，发一共放了 k 的情况数） </span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据结构优化的dp"><a href="#数据结构优化的dp" class="headerlink" title="数据结构优化的dp"></a>数据结构优化的dp</h2><h3 id="二进制优化"><a href="#二进制优化" class="headerlink" title="二进制优化"></a>二进制优化</h3><p>在多重背包问题中中尤为凸显。将完全背包转化为 $01$ 背包，大大提升效率，</p><p>在 <a href="https://wdsa001.github.io/2021/09/09/jian-dan-ji-chu-dong-tai-gui-hua-di-tui-ge-chong-bei-bao/#toc-heading-23">这里</a> 的《宝物筛选》一题中用到了二进制优化。</p><h3 id="单调队列优化"><a href="#单调队列优化" class="headerlink" title="单调队列优化"></a>单调队列优化</h3><h4 id="选择数字"><a href="#选择数字" class="headerlink" title="选择数字"></a>选择数字</h4><p><a href="https://www.luogu.com.cn/problem/P2034">P2034 选择数字</a></p><p>通过一个手写队列，维护区间最小值，找到最优解，统计即可。</p><h5 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token punctuation">,</span>x_x<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存下标，判断是否进入下一个区间 </span><span class="token keyword">long</span> <span class="token keyword">long</span> h_d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>t_l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//队列的首，尾 </span><span class="token keyword">long</span> <span class="token keyword">long</span> q<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//队列，存 </span><span class="token keyword">long</span> <span class="token keyword">long</span> f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前 i 个数被删除的数的最小和 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">;</span><span class="token comment">//答案输出 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有 n 个整数 </span>      x_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前值 </span>      s_m<span class="token operator">+=</span>x_x<span class="token punctuation">;</span><span class="token comment">//求所有数的和 </span>      f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1ll</span><span class="token operator">*</span>x_x<span class="token punctuation">;</span><span class="token comment">//上个最优的（删的值最小的）加上现在的值（假如删掉现在的值），更新 </span>      <span class="token keyword">while</span><span class="token punctuation">(</span>h_d<span class="token operator">&lt;=</span>t_l<span class="token operator">&amp;&amp;</span>q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token operator">&gt;=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>t_l<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//现在的方法更优，将不优的更新掉 </span>      q<span class="token punctuation">[</span><span class="token operator">++</span>t_l<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将新的产值存入队列 </span>      p<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//存入当前编号 </span>      <span class="token keyword">while</span><span class="token punctuation">(</span>h_d<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>p<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token operator">&lt;</span>i<span class="token operator">-</span>k<span class="token punctuation">)</span>h_d<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//超过这个区间，更新，进入下一个区间（范围 k） </span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span><span class="token number">1ll</span><span class="token operator">*</span>s_m<span class="token operator">-</span><span class="token number">1ll</span><span class="token operator">*</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用所有数的和，遍历最后一个区间，找最优值 </span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Power收集"><a href="#Power收集" class="headerlink" title="Power收集"></a>Power收集</h3><p><a href="https://www.luogu.com.cn/problem/P3800">P3800 Power收集</a></p><p>在区间内维护队列，更新最优值，及时判断是否出区间。注意队列存坐标与值两个信息。</p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">4e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">,</span>t<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入初始信息 </span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//第一维存比那里到哪一行，第二维记录列 </span><span class="token keyword">int</span> q_q<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//队列 1 存下标，0 存值 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//读入有价值得点的信息 </span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举每一行 </span>        <span class="token keyword">int</span> h_d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>t_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化队列头尾 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token function">min</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//每句移动位置，注意最多移动 T 格 </span>            <span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>h_d<span class="token operator">&lt;=</span>t_l<span class="token punctuation">)</span><span class="token operator">--</span>t_l<span class="token punctuation">;</span><span class="token comment">//有更优方案（值更大），更新 </span>            q_q<span class="token punctuation">[</span><span class="token operator">++</span>t_l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存入当前值 </span>            q_q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment">//保留坐标信息 </span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举列（进行移动的结果） </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">+</span>t<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//不越界</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>t<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>h_d<span class="token operator">&lt;=</span>t_l<span class="token punctuation">)</span><span class="token operator">--</span>t_l<span class="token punctuation">;</span><span class="token comment">//有更优方案（值更大），更新 </span>                q_q<span class="token punctuation">[</span><span class="token operator">++</span>t_l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//村入职 </span>                q_q<span class="token punctuation">[</span>t_l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token operator">+</span>t<span class="token punctuation">;</span><span class="token comment">//保留坐标信息 </span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>j<span class="token operator">-</span>t<span class="token punctuation">)</span><span class="token operator">++</span>h_d<span class="token punctuation">;</span><span class="token comment">//判断是否进入到下一个区间 </span>            d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>q_q<span class="token punctuation">[</span>h_d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新当前值，最大值加上这个点本身的值 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment">//最后一行，以每个点结尾的最大值 </span>        a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出最大值 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单基础动态规划（LIS+LCS+区间DP+树形DP）</title>
      <link href="/2021/09/12/jian-dan-ji-chu-dong-tai-gui-hua-lis-lcs-qu-jian-dp-shu-xing-dp/"/>
      <url>/2021/09/12/jian-dan-ji-chu-dong-tai-gui-hua-lis-lcs-qu-jian-dp-shu-xing-dp/</url>
      
        <content type="html"><![CDATA[<h2 id="LIS：最长上升子序列"><a href="#LIS：最长上升子序列" class="headerlink" title="LIS：最长上升子序列"></a>LIS：最长上升子序列</h2><h3 id="Prince-and-Princess"><a href="#Prince-and-Princess" class="headerlink" title="Prince and Princess"></a>Prince and Princess</h3><p><a href="https://www.luogu.com.cn/problem/UVA10635">UVA10635 Prince and Princess</a></p><p>本题可以将 $LCS$ （最长公共子序列）问题转换成 $LIS$ 问题。</p><p>我们可以根据第一个字符串进行新的编号，由先后顺序更新第二个字符串的编号，保证了单调的性，所以直接在第二个字符串中找最长不下降子序列即可。</p><h4 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h4><p>再找最长上升子序列时，只用找到比我们存的数小的，就更新。可能不符合真正的最长上升序列，甚至不合法。但是它合理的原因是，他为的是保存最长上升的长度，如果有更长的子序列合法，那么就可以更新它的长度。</p><p>要想更新它的长度就要比现有的数都大，那么这个数一定会出现在合理的最长上升子序列中，所以这么存的长度合法。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_m<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">,</span>s_m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">memset</span><span class="token punctuation">(</span>n_m<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>n_m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  x_p<span class="token operator">=</span>s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>n_m<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//第一个数列编新编号 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//第二个序列更新所有编号 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n_m<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span><span class="token operator">++</span>s_m<span class="token punctuation">]</span><span class="token operator">=</span>n_m<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存到新数组中 </span><span class="token punctuation">}</span><span class="token keyword">int</span> a_s<span class="token punctuation">,</span>z_k<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  a_s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化答案（序列第一位相同） </span>  z_k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//最长上升子序列第一位初始化 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s_m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>z_k<span class="token punctuation">[</span>a_s<span class="token punctuation">]</span><span class="token punctuation">)</span>z_k<span class="token punctuation">[</span><span class="token operator">++</span>a_s<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//可以保持上升，存入 </span>    <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//不能保持上升 </span>      <span class="token keyword">int</span> p_s<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>z_k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>z_k<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>a_s<span class="token punctuation">,</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>z_k<span class="token punctuation">;</span><span class="token comment">//找到第一个比他小的 </span>      z_k<span class="token punctuation">[</span>p_s<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新数组 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">++</span><span class="token punctuation">,</span>q<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入第一个数组 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入第二个数组 </span>    <span class="token function">n_w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋新编号 </span>    <span class="token function">g_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找结果 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %d\n"</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LCS：最长公共子序列"><a href="#LCS：最长公共子序列" class="headerlink" title="LCS：最长公共子序列"></a>LCS：最长公共子序列</h2><h3 id="History-Grading"><a href="#History-Grading" class="headerlink" title="History Grading"></a>History Grading</h3><p><a href="https://www.luogu.com.cn/problem/UVA111">UVA111 History Grading</a></p><p>枚举匹配位置，记录匹配结果，继承状态。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>t<span class="token punctuation">,</span>d_p<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n_m<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t_p<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n_m<span class="token punctuation">[</span>x_x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//按顺序标号正确答案 </span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_p<span class="token punctuation">[</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//按顺序标号学生答案 </span>      <span class="token keyword">int</span> x_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t_p<span class="token punctuation">[</span>x_x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>d_p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> d_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举学生答案位置 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举答案位置 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n_m<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>t_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>d_p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//匹配成功，答案更新 </span>        <span class="token keyword">else</span> d_p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//那个匹配成功的多继承那个状态 </span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出所有答案与所有学生答案位置都匹配过的答案 </span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><h3 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h3><p><a href="https://www.luogu.com.cn/problem/P1880">P1880 NOI1995 石子合并</a></p><p>先枚举块长（从短到长），再枚举所有区块，枚举断点，计算每个区块的断点左半部分和右半部分，记上每次合并后的价值。所有元素都可能作为开头，所以都要找一遍，记录答案。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> a_x<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>m_a<span class="token punctuation">,</span>f_1<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>f_2<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>n_m<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        n_m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原序列 </span>        n_m<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token operator">=</span>n_m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//双倍长度方便计算以每个元素开头的情况 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>n_m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//计算前缀和 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>p<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举区块长 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span>i<span class="token operator">+</span>p<span class="token punctuation">;</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">=</span>i<span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在序列中枚举区块 </span>            f_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a_x<span class="token punctuation">;</span><span class="token comment">//初始赋最大值，找最小值 </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举断点，从左右两部分找最优解继承 </span>                f_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f_1<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最大值，通过前缀和快速计算区间和（合并石子得到的价值）  </span>                f_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f_2<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最小值 </span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      m_i<span class="token operator">=</span>a_x<span class="token punctuation">;</span><span class="token comment">//初始赋最大值，找最小值 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历每个元素开头的情况，找到真正的最优解 </span>        m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>f_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_i<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>m_i<span class="token punctuation">,</span>f_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n%d"</span><span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="能量项链"><a href="#能量项链" class="headerlink" title="能量项链"></a>能量项链</h3><p><a href="https://www.luogu.com.cn/problem/P1063">P1063 NOIP2006 提高组 能量项链</a></p><p>分开看，每个珠子就是一颗珠子，而不去考虑前后问题，再遍历区间的时候处理即可。</p><p>只要枚举区间，枚举断点，根据题目描述更新最大值即可。题目计算能量的方法，正好是枚举左端点（前一个珠子的头标记），断点 $+1$ （前一个珠子的尾标记，后一个珠子的头标记），右端点 $+1$ （后一个珠子的尾标记）的能量积。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存两边，方便枚举每个开头的情况 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举结尾 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">-</span>j<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>j<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在长度范围内，枚举左区间 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举断点 </span>        <span class="token comment">//左边最大值 + 右边最大值 + 加持能量（题目中描述） 更新最大值 </span>        d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>d_p<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>a_a<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>a_a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>m_a<span class="token punctuation">)</span>m_a<span class="token operator">=</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新答案 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>m_a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Coloring-Brackets"><a href="#Coloring-Brackets" class="headerlink" title="Coloring Brackets"></a>Coloring Brackets</h3><p><a href="https://www.luogu.com.cn/problem/CF149D">CF149D Coloring Brackets</a></p><p>初始化所有新遍历到的括号，从大区间向小遍历，最后回溯时，等新答案，做后统计答案输出即可。</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>g_y<span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存配对括号互存下标 </span><span class="token keyword">long</span> <span class="token keyword">long</span> d_p<span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存情况 </span><span class="token keyword">char</span> s<span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入括号序列 </span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s_t<span class="token punctuation">;</span><span class="token comment">//用于匹配括号 </span><span class="token keyword">void</span> <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token comment">//是相邻的一对括号，初始化 </span>    d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>g_y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//现在左右是一对括号 </span>    <span class="token function">d_f</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新左右端点 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举状态可能，更新答案 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//现在右括号和匹配左括号不同色，统计答案 </span>          d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>d_p<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//现在右括号和匹配左括号不同侧，统计答案 </span>          d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>d_p<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//现在左括号和匹配右括号不同色，统计答案 </span>          d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>d_p<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//现在左括号和匹配右括号不同色，统计答案 </span>          d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>d_p<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">d_f</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>g_y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新左括号匹配的范围 </span>    <span class="token function">d_f</span><span class="token punctuation">(</span>g_y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配左括号匹配的右括号外的下标，继续匹配。 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举第一对括号的左括号 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举第一对括号的右括号 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举第二对括号的左括号 </span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>q<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>q<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举第二对括号的右括号 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//匹配相邻同色跳过 </span>            d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token operator">+</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>g_y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>d_p<span class="token punctuation">[</span>g_y<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token operator">%</span>m_d<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//合法更新答案 </span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  n<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取原串 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//匹配括号，互存另一半括号下标 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span>s_t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> g_y<span class="token punctuation">[</span>s_t<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span>g_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s_t<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s_t<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从边界开始查询方案数 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//由于括号染两种颜色的没有存，所以是 0，不影响统计结果 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举左括号染色情况 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举右括号染色情况 </span>      a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span>d_p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//统计所有情况 </span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><a href="https://www.luogu.com.cn/problem/P2470">P2470 SCOI2007 压缩</a></p><p>区间枚举块长，左端点，找到压缩后的最短长度更新。难点在于区间内有 $M$ 的压缩，要考虑新压缩后的长度与原压缩的那个短，不断取最优。</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">char</span> s_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//长度是奇数，不可能压缩 </span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//找到查抄串的一半处 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m_i<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//前后匹配 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>s_s<span class="token punctuation">[</span>i<span class="token operator">+</span>m_i<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//前后不同，不能压缩 </span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//压缩成功 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s_s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取字符串 </span>  n<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s_s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取字符串长度 </span>  <span class="token function">memset</span><span class="token punctuation">(</span>d_p<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化区间长度 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l_n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>l_n<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>l_n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举长度 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">+</span>l_n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举左端点</span>      <span class="token keyword">int</span> r<span class="token operator">=</span>l<span class="token operator">+</span>l_n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//右端点 </span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f_i</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找成功，更新比对压缩户后的长度 </span>      <span class="token comment">//枚举断点，更新答案 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>l<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//区间内没有 M（压缩开头） </span>        d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>##r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>r<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找区间内压缩后的最小值 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>l<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//区间内有 M（压缩开头） </span>        <span class="token comment">//更新端点左边有 M 和没有 M 的最小值，和右边有 M 和没有 M 的最小值的总的最小值（抽象：选择 M 的放置地点） </span>        d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">min</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h2><h3 id="“访问”美术馆"><a href="#“访问”美术馆" class="headerlink" title="“访问”美术馆"></a>“访问”美术馆</h3><p><a href="https://www.luogu.com.cn/problem/P1270">P1270 “访问”美术馆</a></p><p>枚举将时间分给两个儿子（向左，向右走），暴力统计最大值即可。</p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l_n<span class="token punctuation">,</span>v<span class="token punctuation">;</span><span class="token comment">//道路花费时间，画的数量 </span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">yv</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//一去一回，两倍 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//若为零说明是走廊（见题目） </span>        <span class="token function">yv</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左儿子 </span>    <span class="token function">yv</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右儿子 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">d_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> s_m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">||</span><span class="token operator">!</span>s_m<span class="token punctuation">)</span><span class="token keyword">return</span> d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//已经遍历过或时间已经耗尽返回 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//是展室 </span>      d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span><span class="token punctuation">(</span>s_m<span class="token operator">-</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//剩下的时间是全拿，还是来这里之后拿能拿部分（来这里要花费时间） </span>      <span class="token keyword">return</span> d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>s_m<span class="token operator">-</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举剩下时间，分给两儿子 </span>        d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">d_f</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">d_f</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>s_m<span class="token operator">-</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l_n<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取最大能拿到的画 </span>    <span class="token keyword">return</span> d_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    s_m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//要在警察到来前跑走（-1） </span>    <span class="token function">yv</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token function">d_f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>s_m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从第一条走廊开始找 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Book-of-Evil"><a href="#Book-of-Evil" class="headerlink" title="Book of Evil"></a>Book of Evil</h3><p><a href="https://www.luogu.com.cn/problem/CF337D">CF337D Book of Evil</a></p><p>先找到里根节点最远的点，在以这个点为跟，重新跑一遍，更新新深度。再找最深的节点，以这个节点为根节点，在新数组中重新跑一遍深度。这样，可以知道每个点距离两个最远互相怪物的点的距离，若最远的点符合要求，那么就合法。</p><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v<span class="token punctuation">,</span>n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>d<span class="token punctuation">,</span>s_m<span class="token punctuation">,</span>t_p<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span><span class="token keyword">int</span> v_l<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p_1<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p_2<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>s_m<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>s_m<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>s_m<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> f_a<span class="token punctuation">,</span><span class="token keyword">int</span> d_p<span class="token punctuation">)</span><span class="token punctuation">{</span>  d_p_1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">;</span><span class="token comment">//存深度 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//下一个点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">!=</span>f_a<span class="token punctuation">)</span><span class="token function">d_1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">,</span>d_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不返回走过的点 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> f_a<span class="token punctuation">,</span><span class="token keyword">int</span> d_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找深度 </span>  d_p_2<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>d_p<span class="token punctuation">;</span><span class="token comment">//存深度 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//下一个点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">!=</span>f_a<span class="token punctuation">)</span><span class="token function">d_2</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">,</span>d_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不返回走过的点 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>v_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存初始怪物生成地点 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//连边 </span>    <span class="token keyword">int</span> u<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从一节点开始找 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//找到怪物中深度最大的点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d_p_1<span class="token punctuation">[</span>v_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>d_p_1<span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">)</span>t_p<span class="token operator">=</span>v_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">d_1</span><span class="token punctuation">(</span>t_p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从怪物最大深度的点开始找，重新赋值深度 </span>  t_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清零 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//找到怪物中深度最大的点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d_p_1<span class="token punctuation">[</span>v_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>d_p_1<span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">)</span>t_p<span class="token operator">=</span>v_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">d_2</span><span class="token punctuation">(</span>t_p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续找点离这个点的深度 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//从第一个点开始找，若距离都符合，计数 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d_p_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>d<span class="token operator">&amp;&amp;</span>d_p_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>d<span class="token punctuation">)</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> LIS </tag>
            
            <tag> LCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021.9.11模拟赛</title>
      <link href="/2021/09/11/2021.9.11-mo-ni-sai/"/>
      <url>/2021/09/11/2021.9.11-mo-ni-sai/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="96a9ca59788cc98d3616d4c12cdc64cf4edddbce53642a2d1f78b04ed75e7a7e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟赛 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 笛卡尔树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021.9.10模拟赛</title>
      <link href="/2021/09/10/2021.9.10-mo-ni-sai/"/>
      <url>/2021/09/10/2021.9.10-mo-ni-sai/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2840602a181432d1d1d65fa600b6a9dc49dc2bc0ca6b5f087f291f9b4e5dad0e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟赛 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 暴力 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单基础动态规划（递推+各种背包）</title>
      <link href="/2021/09/09/jian-dan-ji-chu-dong-tai-gui-hua-di-tui-ge-chong-bei-bao/"/>
      <url>/2021/09/09/jian-dan-ji-chu-dong-tai-gui-hua-di-tui-ge-chong-bei-bao/</url>
      
        <content type="html"><![CDATA[<p>动态规划考题灵活，但是只要找到状态转移方程，就可以解决这道题。首先要有找到枚举状态的能力。</p><h2 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h2><h3 id="例1：数塔"><a href="#例1：数塔" class="headerlink" title="例1：数塔"></a>例1：数塔</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">            9           / <span class="token function selector">\</span>          /   <span class="token function selector">\</span>        12     15        / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>       /   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>     10     6     8     / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>    /   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>   2    18     9     5  / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\</span> /   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>19    7    10     4     16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有如下所示的数塔，要求从顶层走到底层，若每一步只能走到相邻的结点，则经过的结点的数字之和最大是多少？</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入数据首先包括一个整数 $C$,表示测试实例的个数，每个测试实例的第一行是一个整数 $N$，表示数塔的高度，接下来用N行数字表示数塔，其中第 $i$ 行有个 $i$ 个整数。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个测试实例，输出可能得到的最大和，每个实例的输出占一行。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">15 912 1510  6  8 2 18  9  519  7 10  4 16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">59<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1$ $&lt;=$ $N$ $&lt;=$ $100$，所有的整数均在区间 $[0,99]$ 内。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>从底层开始，不断向上遍历，每个节点保留从下面传上来的最大值加上它的本身价值，传到根节点即可（递推的过程）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">            9           / <span class="token function selector">\</span>          /   <span class="token function selector">\</span>        12     15        / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>       /   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>     10     6     8     / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>    /   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>   2    18     9     5  / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\</span> /   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>19    7    10     4     16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从底层向上遍历，更新节点价值。例如：$19$ （左下角）更新 $2$ 的权值，$2$ 变成 $21$。$7$ 也可能要更新  $2$ 的权值，但由于没有 $19$ 更新过后的数值大，所以更新失败。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">          9         / <span class="token function selector">\</span>        /   <span class="token function selector">\</span>      12     15      / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>     /   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>   10     6     8   / <span class="token function selector">\ </span>  / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>  /   <span class="token function selector">\ </span>/   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>21    28     19    21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一次更新后的结果。然后递推处理，最后输出根节点的值即可。（下面是每一步的更新过程）</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       9      / <span class="token function selector">\</span>     /   <span class="token function selector">\</span>   12     15   / <span class="token function selector">\ </span>  / <span class="token function selector">\</span>  /   <span class="token function selector">\ </span>/   <span class="token function selector">\</span>38    34    29<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    9   / <span class="token function selector">\</span>  /   <span class="token function selector">\</span>50     49<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">59<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="例2：兔子数列（斐波那契）"><a href="#例2：兔子数列（斐波那契）" class="headerlink" title="例2：兔子数列（斐波那契）"></a>例2：兔子数列（斐波那契）</h3><p>直接看 <a href="https://wdsa001.github.io/2021/08/09/fei-bo-na-qi/">斐波那契</a> 吧，太经典了。</p><p>斐波那契数列的的形成就是通过前两项递推的，本身也是动态转移的思想。</p><h3 id="例3：Working-out"><a href="#例3：Working-out" class="headerlink" title="例3：Working out"></a>例3：Working out</h3><p><a href="https://www.luogu.com.cn/problem/CF429B">CF429B Working out</a></p><p>根据题目，我们不难发现两人一人要从左下角到右上角，一人从左上角，到右下角，且中间会有一次相遇。</p><p>关键在于那一次相遇的地点选择，并且从相遇点到终点和终点跑到相遇点的性质其实相同。所以我们可以考虑，四个人从四个角跑到一个点，左上角的人只能向右或向下；左下角的人只能向右或向上；右上角的人只能向左后向下；右下角的人只能向左或向上。四人跑到这个点路径的权值和最大。</p><p>由于我们不知道相遇的地方在哪，所以我们可以通过枚举相遇的点来比对找到最终的最大值。</p><p>那么如何使起点到这个点路径的权值和最大呢？</p><p>通过递推，找出起点到全图上所有点的权值都最大。已左上角举例。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//左上角递推 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    z_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>z_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>z_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是，我们可以发现每个角到一点回合时，进入点的方向也可能不同。分为两种情况（由于方向约束）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">      左上角左下角 汇合 右上角      右下角      右上角左上角 汇合 右下角      左下角<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在计算结果的时候要判一下两种结果最大值。</li><li>我们的讨论的点上下左右四个都可以达到，所以这个相遇的点不在边线上。</li><li>“另外，他们的健身速度不同，所以可以走过的路线长度也不同。”所以，我们不用特判他 们的速度是否合法。</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> o_o<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> z_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//左上角</span><span class="token keyword">long</span> <span class="token keyword">long</span> y_x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//右下角</span><span class="token keyword">long</span> <span class="token keyword">long</span> z_x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//左下角</span><span class="token keyword">long</span> <span class="token keyword">long</span> y_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//右上角</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//读入 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//左上角递推 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        z_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>z_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>z_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//右下角递推 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>y<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        y_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>y_x<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>y_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//左下角递推 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        z_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>z_x<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>z_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//右上角递推 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>y<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        y_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>y_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>y_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> m_a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//找最大值 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>z_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>y_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>z_x<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>y_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>z_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>y_x<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>z_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>y_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>m_a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><p><del>接下来的 $3$ 道题，非常经典！</del></p><h3 id="例4：采药"><a href="#例4：采药" class="headerlink" title="例4：采药"></a>例4：采药</h3><p><a href="https://www.luogu.com.cn/problem/P1048">P1048 NOIP2005 普及组 采药</a></p><p>一句话题意：限时间，价值最大化，药有限。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m_t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//总时间，药个数 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//每次有新药，更新一次 </span><span class="token keyword">int</span> t_i<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v_i<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个药花费的时间，价值 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m_t<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举剩下的时间 </span>            d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继承上一个状态 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>t_i<span class="token punctuation">)</span>d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>t_i<span class="token punctuation">]</span><span class="token operator">+</span>v_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果时间够用，更新状态 </span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>n_x<span class="token punctuation">]</span><span class="token punctuation">[</span>m_t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最新状态，在时间内的答案 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例5：装箱"><a href="#例5：装箱" class="headerlink" title="例5：装箱"></a>例5：装箱</h3><p><a href="https://www.luogu.com.cn/problem/P1049">P1049 NOIP2001 普及组 装箱问题</a></p><p>一句话题意：限空间，占用空间最大化，物品有限。</p><p><strong>这道题用一维数组写（滚动数组）</strong>（时间换空间）</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">2e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> v_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//物品体积 </span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> m_v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//箱子大小，物品数量 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>v_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存入物品体积 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每个物品来的时候更新状态 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m_v<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//有这个物品的空间 </span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>v_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//占的地方尽量大 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>m_v<span class="token operator">-</span>d_p<span class="token punctuation">[</span>m_v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出浪费的最小空间 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>动态规划：现在决定未来，未来与过去无关。</strong></p><p>所以采药为例，每回返回上一个状态后，上一个状态就没用了，极大浪费空间。可以改进为如下代码。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token comment">//使用时间 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//获得价值 </span><span class="token punctuation">}</span>x_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> m_t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入基础信息 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每个药都要更新结果 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m_t<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//有时间采这个药 </span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新结果 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>m_t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例6：烹调方案"><a href="#例6：烹调方案" class="headerlink" title="例6：烹调方案"></a>例6：烹调方案</h3><p><a href="https://www.luogu.com.cn/problem/P1417">P1417 烹调方案</a></p><p>假如相邻的两个物品 $x$，$y$ 。假设现在已经耗费 $t$ 的时间，那么分别列出先做 $x$，$y$ 的代价：</p><ul><li><p>$1$ 式：$a[x]-(t+c[x])\times b[x]+a[y]-(t+c[x]+c[y])\times b[y] $</p></li><li><p>$2$ 式：$a[y]-(t+c[y])\times b[y]+a[x]-(t+c[y]+c[x])\times b[x] $</p></li></ul><p>不难看出时间（做菜顺序）对结果是有影响的，所以要将价值最大化，就要按一定顺序排好后，再跑 $01$ 背包，所以我们要将 $1$ 式和 $2$ 式做出比对以确定顺序。</p><p>当 $c[x]\times b[y]<c[y]\times b[x]$="" 时，$1$="" 式="" $="">$ $2$ 式。我们就可以根据这个性质来排序。</c[y]\times></p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">100001</span><span class="token punctuation">;</span> <span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span>x_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> d_p<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//最优排序 </span><span class="token keyword">return</span> a<span class="token punctuation">.</span>c<span class="token operator">*</span>b<span class="token punctuation">.</span>b<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>b<span class="token operator">*</span>b<span class="token punctuation">.</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m_t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最大时间，菜的个数 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>x_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x_i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>x_n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最优排序 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举每道菜 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m_t<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//有时间做 </span>    d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">-</span>j<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据题意算最大值</span><span class="token comment">//注意，这里的 j 就是题目中的 t 时刻 </span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m_t<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最大值，有可能菜会更新出负数的美味值，影响最终结果 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><h3 id="例7：疯狂的采药"><a href="#例7：疯狂的采药" class="headerlink" title="例7：疯狂的采药"></a>例7：疯狂的采药</h3><p><a href="https://www.luogu.com.cn/problem/P1616">P1616 疯狂的采药</a></p><p>一句话题意：限时间，价值最大化，药无限。</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span>m_a<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token comment">//这种药的时间 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//这种药的价值 </span><span class="token punctuation">}</span>x_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> d_p<span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> m_t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入时限，药的种类 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每个种类的药的时间和价值 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每选一种药更新 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m_t<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//有时间采这个药 </span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>m_t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出这个时间最多获得的价值 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>在药有限时：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m_t<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在药无限时：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m_t<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>t<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不难发现，只是循环顺序有变，但是性质完全不同。但是很好理解，因为我们现在将二维数组压缩成一位数组了。</p><p>我们倒着遍历的原因是什么（采药）？</p><p>为的是这个结果不会干扰别的状态。所以从后向前遍历，这样每回后面的状态根据前面的变化，但是前面的值在遍历前不会改变，所以后面的状态要重复借助前面的状态时不会受到影响。</p><p>那影响会发生什么（即从前往后遍历）？</p><p>就是药无限的情况。因为在前面的时候假如已经选了一次这个药，后面的遍历的时候状态都是建立在已经选了一次这个药的基础上，所以可能再选这个药很多次。</p><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><h3 id="英雄联盟"><a href="#英雄联盟" class="headerlink" title="英雄联盟"></a>英雄联盟</h3><p><a href="https://www.luogu.com.cn/problem/P5365">P5365 SNOI2017 英雄联盟</a></p><p>与 $01$ 背包不同的是此类题的物品不再只是 $1$ 个，所以可直观的理解为多了一层枚举每个物品选几个的循环。</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1000001</span><span class="token punctuation">;</span> <span class="token keyword">long</span> <span class="token keyword">long</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//下标是用的钱数，值为多少种策略 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token comment">//皮肤数量 </span><span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token comment">//皮肤价格 </span><span class="token punctuation">}</span>x_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">long</span> <span class="token keyword">long</span> s_m<span class="token punctuation">;</span><span class="token comment">//需要钱的总数 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入皮肤数量 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//皮肤价格 </span>s_m<span class="token operator">+=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>k<span class="token punctuation">;</span><span class="token comment">//所有皮肤买下需要的钱 </span><span class="token punctuation">}</span>d_p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//后面的处理涉及到乘法，所以要初始化 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每个新的英雄出现都要更新 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>s_m<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//有钱买皮肤 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">&lt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>k<span class="token operator">&amp;&amp;</span>p<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//不能超过现有（枚举）的钱，枚举的次数不能超过皮肤总数 </span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>p<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新答案 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a_s<span class="token operator">&lt;=</span>s_m<span class="token operator">&amp;&amp;</span>d_p<span class="token punctuation">[</span>a_s<span class="token punctuation">]</span><span class="token operator">&lt;</span>m<span class="token punctuation">)</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//找到满足要求的就退出，而枚举的钱是从小到大，所以最优 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="宝物筛选（二进制优化）"><a href="#宝物筛选（二进制优化）" class="headerlink" title="宝物筛选（二进制优化）"></a>宝物筛选（二进制优化）</h3><p><a href="https://www.luogu.com.cn/problem/P1776">P1776 宝物筛选</a></p><p>因为二进制可以覆盖所有的数，所以讲一个数也可以分成二进制而不破坏其完整性。</p><p>例如： $11=1+2+4+4$</p><p>而这 $4$ 个分出来的数可以表示 $[1,11]$ 之间的所有书。所以可以将物品的数量分解成几个部分，但不影响取的数量的可能性。</p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a_s<span class="token punctuation">,</span>x_p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> d_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//下标存分的部分，值存价值 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> w<span class="token punctuation">;</span><span class="token comment">//重量 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//价值 </span><span class="token punctuation">}</span>x_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n_x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m_w<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//宝物有几种，最大载重 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> v_i<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>w_i<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入每种宝物的基本信息 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m_i<span class="token punctuation">;</span>j<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//将数量分开存 </span>        x_p<span class="token operator">++</span><span class="token punctuation">;</span>            x_i<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>j<span class="token operator">*</span>v_i<span class="token punctuation">;</span><span class="token comment">//分成这部分的总价值 </span>x_i<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">=</span>j<span class="token operator">*</span>w_i<span class="token punctuation">;</span><span class="token comment">//分成这部分的中重量 </span>            m_i<span class="token operator">-=</span>j<span class="token punctuation">;</span><span class="token comment">//分出去的减去 </span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_i<span class="token punctuation">)</span>x_p<span class="token operator">++</span><span class="token punctuation">,</span>x_i<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v_i<span class="token operator">*</span>m_i<span class="token punctuation">,</span>x_i<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">=</span>w_i<span class="token operator">*</span>m_i<span class="token punctuation">;</span><span class="token comment">//还剩下的不够整分，单独存 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举存的单位 </span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m_w<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//还能承重 </span>      d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>d_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新结果 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>d_p<span class="token punctuation">[</span>m_w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多重背包-完全背包"><a href="#多重背包-完全背包" class="headerlink" title="多重背包+完全背包"></a>多重背包+完全背包</h2><h3 id="The-Fewest-Coins-G"><a href="#The-Fewest-Coins-G" class="headerlink" title="The Fewest Coins G"></a>The Fewest Coins G</h3><p><a href="https://www.luogu.com.cn/problem/P2851">P2851  USACO06DEC The Fewest Coins G</a></p><p>不难得出，我们要找到买物品花的硬币数加找钱的硬币数的总和最小。我们可以枚举真正花的钱（大于目标价），买家跑多重背包（钱币有限），卖家跑完全背包（钱币无限）加和取最小。</p><p>枚举的最大范围是最大钱币的平方加目标价的和，因为如果能拿最大钱币的最大钱币的面值个那么一定不是最优。</p><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//钱币价值 </span><span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token comment">//钱币个数 </span><span class="token punctuation">}</span>x_i<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>m_x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s_m<span class="token operator">+=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token comment">//计算买家所有钱的和 </span>        m_x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m_x<span class="token punctuation">,</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找钱最大范围 </span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s_m<span class="token operator">&lt;</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//买的人所有钱加起来都买不起 </span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//卖家完全背包 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每种钱币更新 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m_x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//还有“挥霍”空间 </span>            g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>j<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前面对后面有影响，能少张数就少 </span>    <span class="token comment">//买家多重背包 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//每种钱币更新 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>j<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//二分优化多重背包，变为 01 背包 </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>t<span class="token operator">+</span>m_x<span class="token punctuation">;</span>k<span class="token operator">&gt;=</span>j<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//还有“挥霍”空间 </span>                f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>k<span class="token operator">-</span>j<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//能少给张数就少给 </span>            x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">-=</span>j<span class="token punctuation">;</span><span class="token comment">//分出去的钱减去 </span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token comment">//有剩余张数 </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>t<span class="token operator">+</span>m_x<span class="token punctuation">;</span>k<span class="token operator">&gt;=</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//剩下的单独分成一块 </span>                f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>k<span class="token operator">-</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token operator">*</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token operator">+</span>x_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接比较 </span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>t<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>t<span class="token operator">+</span>m_x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>i<span class="token operator">-</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到用的最少的张数 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a_s<span class="token operator">==</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没找到 </span><span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="有依赖的背包"><a href="#有依赖的背包" class="headerlink" title="有依赖的背包"></a>有依赖的背包</h2><h3 id="金明的预算方案"><a href="#金明的预算方案" class="headerlink" title="金明的预算方案"></a>金明的预算方案</h3><p><a href="https://www.luogu.com.cn/problem/P1064">P1064 NOIP2006 提高组 金明的预算方案</a></p><p>找好主附件之间的联系后跑 $01$ 背包即可。由于配件数量过少，情况特判即可。</p><h4 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">;</span><span class="token keyword">int</span> z_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>z_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> f_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//一个主件最多两个附件 </span><span class="token keyword">int</span> f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        v<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>            z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//主件价格 </span>            z_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//价格*重要度（结果要使这个最大） </span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            f_w<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//它属于的主件的附件数量增加（下标） </span>            f_w<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span>f_w<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//存入价格 </span>            f_c<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span>f_w<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//价格*重要度 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//有 m 种物品，每多一种，更新一次 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token punctuation">;</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&gt;=</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//只用枚举主件即可（附件很少暴力即可） </span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>z_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是否比买了它的主件更优 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//是否比买了它的第一个附件更优 </span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>z_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//是否比买了它的第二个附件更优 </span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>z_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//是否比两个附件都买更优 </span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>z_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>f_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>z_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f_c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//最多有 2 种附件，所以只用枚举 4 种情况，若没有附件不会影响结果（+0 不会更新结果） </span>    <span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 斐波那契 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021.9.8模拟赛</title>
      <link href="/2021/09/08/2021.9.8-mo-ni-sai/"/>
      <url>/2021/09/08/2021.9.8-mo-ni-sai/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="67c83b5629c3ea088adb527243461ace6c647e73056b3d3333ec8e944c3ccbb4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟赛 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 最近公共祖先 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 拓扑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速降次</title>
      <link href="/2021/09/08/kuai-su-jiang-ci/"/>
      <url>/2021/09/08/kuai-su-jiang-ci/</url>
      
        <content type="html"><![CDATA[<h3 id="快速降次"><a href="#快速降次" class="headerlink" title="快速降次"></a>快速降次</h3><p>我们以快速幂为例子，模拟一下这个过程。</p><p>假如我们现在要计算 $2^{13}$。我们可以用 <code>&lt;cmath&gt;</code> 头文件的 <code>pow(2,13)</code> 但是它的效率并不高。我们现在要手写快速幂，让 $2$ 直接乘 $13$ 次是很朴素的方法，快速幂比他快的多。</p><p>首先，我们直到如下结论 $x^a\times x^b = x^{a+b}$</p><p>所以，$x\times x=x^2$，$x^2\times x^2 = x^4$，$(x^2)^2 = x^4$。</p><p>我们知道任何一个数都可以写成二进制数，我们也可以将 $13$，直接写成二进制数表示形式 $13 = 2^3+2^2+2^0 = 8+4+1$（二进制：$1101$）</p><p>那么，我们就可以将原式变形 $(((2)^2\times 2)^2)^2\times 2$ 整理一下 $(((2)^2)^2)^2\times ((2)^2)^2\times 2 = 2^8\times 2^4\times 2$。</p><p>这样我们就可以边降次，边让辅助乘数快速生长。</p><p>辅助乘数（笔者为了方便描述自定义变量）：辅助累计答案的变量，比如上面的例子，辅助乘数初始值 $2$，接着会变换成 $4$（$2^2$），然后是 $8$（$2^3$），而当累计需要时，可以直接取到。（后面代码中的辅助加数，意义相同）</p><p><strong>不一定每回都是以 $2$ 次的频率向上升，也可以 $3$，$4$……或更多，根据情况而定即可。不要被模板扼杀了无限的想法！</strong></p><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">k_m</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//辅助乘数，乘的次数 </span><span class="token keyword">long</span> <span class="token keyword">long</span> r_s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//结果统计 </span><span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>r_s<span class="token operator">=</span><span class="token punctuation">(</span>r_s<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//可以理解成二进制时，如果当前位为 1，就需要辅助乘数更新结果。 </span>a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//辅助乘数 </span>b<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//快速降次 </span><span class="token punctuation">}</span><span class="token keyword">return</span> r_s<span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入a，n次乘 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token function">k_m</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到结果 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h3><p>与快速幂道理相似。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">k_c</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//辅助加数，乘的次数 </span><span class="token keyword">long</span> <span class="token keyword">long</span> r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果统计 </span><span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>r_s<span class="token operator">=</span><span class="token punctuation">(</span>r_s<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//更新答案 </span>a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//辅助加数 </span>b<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//快速降次 </span><span class="token punctuation">}</span><span class="token keyword">return</span> r_s<span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入a，加n次 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token operator">=</span><span class="token function">k_c</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到结果 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>但是，快速乘并非比普通的乘法快</strong>，它的主要作用是：有些时候我们会发现直接相乘会都是信息，找到之间的过程，保留这些信息。举个简单的例子，两个马上越界（极大的）的 <code>long long</code> 相乘一定会丢很多东西。</p><p>这时候就可以用快速乘，一步一取模。虽然会很慢，但是保留了程序和结果的正确性。（很多时候为了保留信息也不得不用，依据题目而言）</p><h3 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h3><p><a href="https://www.luogu.com.cn/problem/P3390">P3390 【模板】矩阵快速幂</a></p><h4 id="矩阵加"><a href="#矩阵加" class="headerlink" title="矩阵加"></a>矩阵加</h4><script type="math/tex; mode=display">\left[\begin{matrix}1 & 3 \\2 & 2 \\\end{matrix}\right]+\left[\begin{matrix}2 & 4  \\3 & 2  \\\end{matrix}\right]=\left[\begin{matrix}1+2 & 3+4  \\2+3 & 2+2  \\\end{matrix}\right]=\left[\begin{matrix}3 & 7  \\5 & 4  \\\end{matrix}\right]</script><h4 id="矩阵减"><a href="#矩阵减" class="headerlink" title="矩阵减"></a>矩阵减</h4><script type="math/tex; mode=display">\left[\begin{matrix}1 & 3 \\2 & 2 \\\end{matrix}\right]-\left[\begin{matrix}2 & 4  \\3 & 2  \\\end{matrix}\right]=\left[\begin{matrix}1-2 & 3-4  \\2-3 & 2-2  \\\end{matrix}\right]=\left[\begin{matrix}-1 & -1  \\-1 & 0  \\\end{matrix}\right]</script><h4 id="矩阵乘"><a href="#矩阵乘" class="headerlink" title="矩阵乘"></a>矩阵乘</h4><script type="math/tex; mode=display">\left[\begin{matrix}1 & 3 \\2 & 2 \\\end{matrix}\right]\times\left[\begin{matrix}2 & 4 & 3 \\3 & 2 & 1 \\\end{matrix}\right]=\left[\begin{matrix}11 & 10 & 6 \\10 & 12 & 8 \\\end{matrix}\right]</script><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">形状上：2*2 和 2*3 的矩阵乘积后,结果是 2*3 的矩阵。即 a*b 矩阵 和 c*d 的矩阵乘积结果是 a*d 的矩阵。其中 b 和 c 必须相等。原因看下面。运算法则：对于结果矩阵的第 i 行第 j 列的位置的结果是由前一个矩阵的对应的行。和后一个矩阵对应的列。对应位置乘积和获得的。    比如第 1 行第 1 列的 11.是由前矩阵的第一行 (1,3) 和后矩阵的第一列 (2,3) 对应位置乘积和。    1*2 + 3*3 = 11 获得的。    如果上述 b 和 c 如果不相等。那么会有地方"失配"没有数值可以进行计算。不符合矩阵乘法定义。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（矩阵还有很多有趣的运算与用途，感兴趣可以自己了解一下，矩阵相乘的的数学意义）。</p><h4 id="代码（矩阵快速幂）"><a href="#代码（矩阵快速幂）" class="headerlink" title="代码（矩阵快速幂）"></a>代码（矩阵快速幂）</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">po</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//初始化数组 </span><span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>po <span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> po <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span><span class="token comment">//重载乘号（封装矩阵相乘格式） </span>po z<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//第一个矩阵的列，第二个矩阵的行 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//结果矩阵的行，第一个矩阵的行 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//结果矩阵的列，第二个矩阵的列 </span>z<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>x<span class="token punctuation">.</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>m_d<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token keyword">return</span> z<span class="token punctuation">;</span><span class="token comment">//返回结果矩阵 </span><span class="token punctuation">}</span><span class="token punctuation">}</span>a<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">k_j</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//可以直接写成快速幂形式，因为已经将矩阵的乘法格式封装好了 </span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span>a_s<span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token comment">//累计答案 </span>a<span class="token operator">=</span>a<span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token comment">//辅助矩阵增次 </span>b<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>、 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入初始矩阵 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_s<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化答案矩阵 </span><span class="token function">k_j</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//矩阵快速幂 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//输出结果矩阵 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a_s<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 矩阵 </tag>
            
            <tag> 快速幂 </tag>
            
            <tag> 快速乘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AC自动机（二次加强）</title>
      <link href="/2021/09/07/ac-zi-dong-ji-er-ci-jia-qiang/"/>
      <url>/2021/09/07/ac-zi-dong-ji-er-ci-jia-qiang/</url>
      
        <content type="html"><![CDATA[<p>看此文章前建议先看 <a href="https://wdsa001.github.io/2021/09/04/zi-dian-shu-ac-zi-dong-ji/">字典树&amp;AC自动机</a> 理解相关知识。</p><h3 id="AC自动机（二次加强）（拓扑优化）"><a href="#AC自动机（二次加强）（拓扑优化）" class="headerlink" title="AC自动机（二次加强）（拓扑优化）"></a>AC自动机（二次加强）（拓扑优化）</h3><p><a href="https://www.luogu.com.cn/problem/P5357">P5357 【模板】AC自动机（二次加强版）</a></p><p>现在我们用 $abc$，$bc$，$b$ 来建一棵字典树，效果如下。（括号中的数为编号）</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">     根    (0)    /|<span class="token function selector">\</span>   / | <span class="token function selector">\</span>  /  |  <span class="token function selector">\</span> a   b   c(1) (4) (6) |   |    <span class="token function selector">\</span> |   |     <span class="token function selector">\</span> b   c      *(2) (5) |   | c   *(3) |    * <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们建立完失配指针后，有编号 $3$ 指向 $5$，又有编号 $5$ 指向编号 $6$，在原来的AC自动机中，我们通过暴力跳失配指针来统计字符串出现的次数。不难发现遍历到编号 $3$ 时，要更新编号 $5$，$6$ 节点。遍历到编号 $5$ 时，又要更新编号 $6$ 。所以编号 $6$ 被更新了两遍。</p><p>当节点更多时，复杂度明显上升。所以我们可以用拓扑排序来解决。这时，遍历顺序为编号 $3$ 更新编号 $5$,编号 $5$ 更新编号 $6$。所有编号只会被遍历一次。</p><h4 id="建立拓扑图"><a href="#建立拓扑图" class="headerlink" title="建立拓扑图"></a>建立拓扑图</h4><p>因为要有每个处理点的基本信息，即信息下传（这也是不用暴力查找的原因），所以字典树节点要多存一个出现次数的标记。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">4e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//字典树节点 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数 </span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可将失配指针看作有向连边，那么失配指针处理完后就是一个有向无环图。所以直接在遍历失配指针时，被指向的节点入度直接加一记录即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录入度 </span><span class="token keyword">void</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理失配指针 </span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//遍历根节点的儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有儿子 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//失配后回根节点 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录 </span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的儿子的失配指针 指向 这个节点的失配指针指向的节点的儿子</span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//被指向的点入度 +1 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//压入队列 </span><span class="token punctuation">}</span><span class="token keyword">else</span> a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的失配指针指向的节点的儿子 是 这个节点的儿子</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="处理拓扑图"><a href="#处理拓扑图" class="headerlink" title="处理拓扑图"></a>处理拓扑图</h4><p>每回将入度为 $0$，的点遍历，因为遍历他们不会对结果产生影响（或者说没有节点再去改变它们的值）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//字典树节点 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数 </span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录入度 </span><span class="token keyword">int</span> x_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//字符串出现的次数 </span><span class="token keyword">void</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理失配指针 </span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//遍历根节点的儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有儿子 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//失配后回根节点 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录 </span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的儿子的失配指针 指向 这个节点的失配指针指向的节点的儿子</span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//被指向的点入度 +1 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//压入队列 </span><span class="token punctuation">}</span><span class="token keyword">else</span> a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的失配指针指向的节点的儿子 是 这个节点的儿子</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="特殊处理"><a href="#特殊处理" class="headerlink" title="特殊处理"></a>特殊处理</h4><p>因为本题有重复字符串，所以可已将重复字符串编号指向同一个节点，这样既不影响节点状况，遍历的时候也有去重效果。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">4e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//字典树节点 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数 </span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token comment">//字符串 </span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//字典树节点编号 </span><span class="token keyword">int</span> m_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//处理重串 </span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建立字典树 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//标号 0 为根节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//点没出现过，赋予新编号 </span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">)</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//没出现过，标记 </span>m_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">;</span><span class="token comment">//处理重串，重串本质上一样，只记录个“坐标”即可 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AC自动机（二次加强）代码"><a href="#AC自动机（二次加强）代码" class="headerlink" title="AC自动机（二次加强）代码"></a>AC自动机（二次加强）代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">4e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//字典树节点 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数 </span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token comment">//字符串 </span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//字典树节点编号 </span><span class="token keyword">int</span> m_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//处理重串 </span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建立字典树 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//标号 0 为根节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//点没出现过，赋予新编号 </span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">)</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//没出现过，标记 </span>m_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">;</span><span class="token comment">//处理重串，重串本质上一样，只记录个“坐标”即可 </span><span class="token punctuation">}</span><span class="token keyword">int</span> i_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录入度 </span><span class="token keyword">void</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理失配指针 </span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//遍历根节点的儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有儿子 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//失配后回根节点 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录 </span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的儿子的失配指针 指向 这个节点的失配指针指向的节点的儿子</span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//被指向的点入度 +1 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//压入队列 </span><span class="token punctuation">}</span><span class="token keyword">else</span> a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的失配指针指向的节点的儿子 是 这个节点的儿子</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">g_a_c</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理原串 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顺着往下走 </span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//以这个节点结尾的字符串出现次数 +1 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> x_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//字符串出现的次数 </span><span class="token keyword">void</span> <span class="token function">t_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入度为 0 的点入队</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//保存这个字符串出现的次数 </span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//这个节点指向的节点入度 -1 （这个点要被删去了） </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数赋给被指向的对象（它包含了被指向对象的次数） </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果被指向的点没有别的点指它，就可以处理它了 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入长度</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span><span class="token comment">//读入字符串 </span><span class="token function">b_t</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串建到字典树上</span><span class="token punctuation">}</span><span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理失配指针 </span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span><span class="token comment">//读入查找串</span><span class="token function">g_a_c</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在字典树上处理原串</span><span class="token function">t_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拓扑排序统计答案 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x_n<span class="token punctuation">[</span>m_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>同样可以回刷一下 <a href="https://www.luogu.com.cn/problem/P3796">P3796 【模板】AC自动机（加强版）</a><br> 只要稍微改一下就可以实现，可以用来复习巩固。</p><h3 id="AC自动机（加强）代码"><a href="#AC自动机（加强）代码" class="headerlink" title="AC自动机（加强）代码"></a>AC自动机（加强）代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//字典树节点 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数 </span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span>string s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//字符串 </span><span class="token keyword">int</span> x_p<span class="token punctuation">;</span><span class="token comment">//字典树节点编号 </span><span class="token keyword">void</span> <span class="token function">yv</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a_c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">)</span><span class="token punctuation">;</span>a_c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a_c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建立字典树 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//标号 0 为根节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//点没出现过，赋予新编号 </span><span class="token function">yv</span><span class="token punctuation">(</span>x_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> i_n<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录入度 </span><span class="token keyword">void</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理失配指针 </span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//遍历根节点的儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有儿子 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//失配后回根节点 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录 </span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的儿子的失配指针 指向 这个节点的失配指针指向的节点的儿子</span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//被指向的点入度 +1 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//压入队列 </span><span class="token punctuation">}</span><span class="token keyword">else</span> a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的失配指针指向的节点的儿子 是 这个节点的儿子</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">g_a_c</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理原串 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顺着往下走 </span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//以这个节点结尾的字符串出现次数 +1 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token keyword">int</span> n_m<span class="token punctuation">;</span> <span class="token punctuation">}</span>a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//字符串出现的次数 </span><span class="token keyword">void</span> <span class="token function">t_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_p<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入度为 0 的点入队 </span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a_s<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">=</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//保存这个字符串出现的次数 </span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//这个节点指向的节点入度 -1 （这个点要被删去了） </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+=</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//出现的次数赋给被指向的对象（它包含了被指向对象的次数） </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i_n<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果被指向的点没有别的点指它，就可以处理它了 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>pp a<span class="token punctuation">,</span>pp b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//按题目要求排序 </span><span class="token keyword">return</span> a<span class="token punctuation">.</span>n_m<span class="token operator">==</span>b<span class="token punctuation">.</span>n_m<span class="token operator">?</span>a<span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>i_d<span class="token operator">:</span>a<span class="token punctuation">.</span>n_m<span class="token operator">&gt;</span>b<span class="token punctuation">.</span>n_m<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入长度 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token function">yv</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入字符串 </span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span>i<span class="token punctuation">;</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">b_t</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串建到字典树上 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理失配指针 </span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入查找串 </span><span class="token function">g_a_c</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在字典树上处理原串 </span><span class="token function">t_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拓扑排序统计答案 </span><span class="token function">sort</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a_s<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//答案排序 </span>cout<span class="token operator">&lt;&lt;</span>a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出 </span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">==</span>a_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字典树 </tag>
            
            <tag> AC自动机 </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典树&amp;AC自动机</title>
      <link href="/2021/09/06/zi-dian-shu-ac-zi-dong-ji/"/>
      <url>/2021/09/06/zi-dian-shu-ac-zi-dong-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h3><p>类似一个找字符串相同前缀存不同的操作。就是利用已经出现过的字符或建立新节点存字符串。</p><p>举个例子：我们现在用 $app$，$add$，$bug$，$bus$，$good$，$go$ 六个单词来建一个字典树，效果如下（“$*$”表示字符串结束标志）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       根      /|<span class="token function selector">\</span>     / | <span class="token function selector">\</span>    /  |  <span class="token function selector">\</span>   a   b   g  /|   |    <span class="token function selector">\</span> / |   |     <span class="token function selector">\</span>p  d   u      o|  |   |<span class="token function selector">\ </span>    |<span class="token function selector">\</span>p  d   s g    o *|  |   | |    |*  *   * *    d              |              *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来解释一下步骤。</p><hr><h4 id="第一步，插入-app-。"><a href="#第一步，插入-app-。" class="headerlink" title="第一步，插入 $app$。"></a>第一步，插入 $app$。</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">根<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先查找根节点，发现根节点没有 $a$ 节点的儿子，那么建立 $a$ 节点的儿子。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    根   /  /  / a <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样没有 $app$ 字符串后面的节点，依次建立。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       根      /     /     /    a   / / p |p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$app$ 字符串建立完了，这是要在结尾补上一个标志，表示有一个字符串在这里结束。也可以建立一个结构体，定义一个节点存在这里结束的字符串是第几个（前提是字符串各不相同，否则可以用链式前向星或其他方法来特殊处理了）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       根      /     /     /    a   / / p |p|*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="第二步：插入-add-。"><a href="#第二步：插入-add-。" class="headerlink" title="第二步：插入 $add$。"></a>第二步：插入 $add$。</h4><p>首先查找根节点，发现根节点有 $a$ 节点的儿子，那么直接进入到这个节点。</p><p>接着发现 $a$ 节点没有 $p$ 儿子的节点，依次建立节字符串后面的字符节点（当匹配一个字符串是，如果一个节点的儿子不能满足当前的字符，那么后面的字符就可以直接建节点了，因为建的新节点不会有子节点，所以会又建新节点，循环往复）。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       根      /     /     /    a   /| / |p  d|  |p  d|  |*  *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="同理，插入-bug-，-bus-，-good-三个字符串后，我们来模拟一下插入-go-。"><a href="#同理，插入-bug-，-bus-，-good-三个字符串后，我们来模拟一下插入-go-。" class="headerlink" title="同理，插入 $bug$，$bus$，$good$ 三个字符串后，我们来模拟一下插入 $go$。"></a>同理，插入 $bug$，$bus$，$good$ 三个字符串后，我们来模拟一下插入 $go$。</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       根      /|<span class="token function selector">\</span>     / | <span class="token function selector">\</span>    /  |  <span class="token function selector">\</span>   a   b   g  /|   |    <span class="token function selector">\</span> / |   |     <span class="token function selector">\</span>p  d   u      o|  |   |<span class="token function selector">\ </span>    |p  d   s g    o|  |   | |    |*  *   * *    d              |              *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先查找根节点，发现根节点有 $g$ 节点的儿子，那么直接进入到这个节点。</p><p>接着发现 $g$ 节点有了 $o$ 儿子节点，那么直接进入到这个节点。</p><p>$go$ 遍历完了，接着在这个节点上打一个结束标记即可。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">       根      /|<span class="token function selector">\</span>     / | <span class="token function selector">\</span>    /  |  <span class="token function selector">\</span>   a   b   g  /|   |    <span class="token function selector">\</span> / |   |     <span class="token function selector">\</span>p  d   u      o|  |   |<span class="token function selector">\ </span>    |<span class="token function selector">\</span>p  d   s g    o *|  |   | |    |*  *   * *    d              |              *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果带上标号：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">        根       /|<span class="token function selector">\</span>      / | <span class="token function selector">\</span>     /  |  <span class="token function selector">\</span>    a   b   g   /|   |    <span class="token function selector">\</span>  / |   |     <span class="token function selector">\</span> p  d   u      o |  |   |<span class="token function selector">\ </span>    |<span class="token function selector">\</span> p  d   s g    o(6) |  |  /   <span class="token function selector">\ </span>  | (1)(2)(4) (3)  d               |              (5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组大小 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//字典树节点 </span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点（26个字母） </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//要建的字符串长度 </span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历每一位 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果没有这个节点 </span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//建立这个节点 </span><span class="token function">yv</span><span class="token punctuation">(</span>x_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化这个节点（多测清空） </span><span class="token punctuation">}</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顺次往下找 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//结束标记是哪个字符串 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入字符串 </span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//存坐标（第几个答案）</span><span class="token function">b_t</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串建到字典树上 </span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h3><p>AC自动机是一种比较高级的处理字符串的方法。</p><p><a href="https://www.luogu.com.cn/problem/P3796">P3796 【模板】AC自动机（加强版）</a></p><p>这道题目，首先要建出字典树，然后处理失配指针（和 <a href="https://wdsa001.github.io/2021/09/03/kmp-suan-fa/">KMP</a> 的失配指针(这篇博文中，我用 <code>kmp</code> 数组存的失配指针)原理相似），接着统计每个字符串出现的字数，输出即可。</p><p><del>建字典树不再赘述。</del></p><h4 id="处理失配指针"><a href="#处理失配指针" class="headerlink" title="处理失配指针"></a>处理失配指针</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存字符串 </span><span class="token keyword">int</span> x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//为字典树开辟的新节点赋予下标 </span><span class="token keyword">void</span> <span class="token function">yv</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//清空字典树的某个节点 </span><span class="token function">memset</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">)</span><span class="token punctuation">;</span>a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token comment">//存要找失配指针的节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历根节点每个儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//这个儿子存在 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//失配后回根节点 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入到队列中 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断节点是否找完 </span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取队头元素 </span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹掉队头 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找当前节点所有儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//这个节点确实有儿子 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的儿子的失配指针 指向 这个节点的失配指针指向的节点的儿子</span><span class="token comment">//类似于 KMP 的失配指针存法 </span><span class="token comment">//换个想法：在原串找的时候是顺着一条子串走的，但是有可能有其他字串有相同的部分，失配指针就是用来串道的 </span><span class="token comment">//这样保证了原串只用跑一遍 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新节点收入队列 </span><span class="token punctuation">}</span><span class="token keyword">else</span> a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的失配指针指向的节点的儿子 是 这个节点的儿子 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>失配指针主要作用还是“串道”和“KMP失配指针”。</p><p>能匹配到这一步，就已经有了匹配到这里的资格。</p><h4 id="统计字符串在原串中出现的次数"><a href="#统计字符串在原串中出现的次数" class="headerlink" title="统计字符串在原串中出现的次数"></a>统计字符串在原串中出现的次数</h4><p>注意判断字符串结束统计，及时换道。</p><p>失配指针也可以理解成邻接表相似的作用。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">f_a_c</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//统计字符串在原串中出现的次数 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原串长度 </span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化遍历节点下标 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//每个字符都从字典树根找一遍</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顺次往下找 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span>n_w<span class="token punctuation">;</span>t<span class="token punctuation">;</span>t<span class="token operator">=</span>a_c<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">)</span><span class="token comment">//直接跳到失配指针，类似于 KMP 的失配指针</span>a_s<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//如果是结束标记，因为已经标记了是哪个串的（见建字典树部分）所以直接统计 +1 即可。 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token keyword">int</span> f_l<span class="token punctuation">;</span><span class="token comment">//失配指针 </span><span class="token keyword">int</span> s_n<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//子节点（26个字母） </span><span class="token keyword">int</span> e_d<span class="token punctuation">;</span><span class="token comment">//结束指针 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span><span class="token keyword">int</span> n_m<span class="token punctuation">;</span><span class="token comment">//存字符串在 </span><span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//原串的下标 </span><span class="token punctuation">}</span>a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>pp a<span class="token punctuation">,</span>pp b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>n_m<span class="token operator">==</span>b<span class="token punctuation">.</span>n_m<span class="token operator">?</span>a<span class="token punctuation">.</span>i_d<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>i_d<span class="token operator">:</span>a<span class="token punctuation">.</span>n_m<span class="token operator">&gt;</span>b<span class="token punctuation">.</span>n_m<span class="token punctuation">;</span><span class="token comment">//多的靠前，一样多的按下标，小的靠前 </span><span class="token punctuation">}</span>string s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存字符串 </span><span class="token keyword">int</span> x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//为字典树开辟的新节点赋予下标 </span><span class="token keyword">void</span> <span class="token function">yv</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//清空字典树的某个节点 </span><span class="token function">memset</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">)</span><span class="token punctuation">;</span>a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a_c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//要建的字符串长度 </span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历每一位 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果没有这个节点 </span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_p<span class="token punctuation">;</span><span class="token comment">//建立这个节点 </span><span class="token function">yv</span><span class="token punctuation">(</span>x_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化这个节点（多测清空） </span><span class="token punctuation">}</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顺次往下找 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//结束标记是哪个字符串 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token comment">//存要找适配指针的节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历根节点每个儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//这个儿子存在 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//失配后回根节点 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入到队列中 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断节点是否找完 </span><span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取队头元素 </span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹掉队头 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找当前节点所有儿子 </span><span class="token keyword">if</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//这个节点确实有儿子 </span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的儿子的失配指针 指向 这个节点的失配指针指向的节点的儿子</span><span class="token comment">//类似于 KMP 的失配指针存法 </span><span class="token comment">//换个想法：在原串找的时候是顺着一条子串走的，但是有可能有其他字串有相同的部分，失配指针就是用来串道的 </span><span class="token comment">//这样保证了原串只用跑一遍 </span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新节点收入队列 </span><span class="token punctuation">}</span><span class="token keyword">else</span> a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_c<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这个节点的失配指针指向的节点的儿子 是 这个节点的儿子 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_a_c</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//统计字符串在原串中出现的次数 </span><span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原串长度 </span><span class="token keyword">int</span> n_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化遍历节点下标 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//每个字符都从字典树根找一遍</span>n_w<span class="token operator">=</span>a_c<span class="token punctuation">[</span>n_w<span class="token punctuation">]</span><span class="token punctuation">.</span>s_n<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顺次往下找 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span>n_w<span class="token punctuation">;</span>t<span class="token punctuation">;</span>t<span class="token operator">=</span>a_c<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token punctuation">)</span><span class="token comment">//直接跳到失配指针，类似于 KMP 的失配指针</span><span class="token comment">//同样一句话：既然匹配到这，就有匹配到这的资格 </span>a_s<span class="token punctuation">[</span>a_c<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>e_d<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//如果是结束标记，因为已经标记了是哪个串的（见建字典树部分）所以直接统计 +1 即可。 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//多测 </span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//子串的个数 </span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//多测终止条件 </span>x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span><span class="token function">yv</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空字典树根节点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入字符串 </span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//存坐标（第几个答案）</span><span class="token function">b_t</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串建到字典树上 </span><span class="token punctuation">}</span>a_c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>f_l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化跟节点适配指针 </span><span class="token function">g_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历失配指针 </span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入要查询的串 </span><span class="token function">f_a_c</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到每个子串在原串的出现次数 </span><span class="token function">sort</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a_s<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出现次数排序（按题目要求） </span>cout<span class="token operator">&lt;&lt;</span>a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出出现最多的字符串出现了几次 </span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//按顺序输出 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token operator">==</span>a_s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>n_m<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//从大到小排的序。若不同，不符合条件 </span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字典树 </tag>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分块&amp;莫队</title>
      <link href="/2021/09/04/fen-kuai-mo-dui/"/>
      <url>/2021/09/04/fen-kuai-mo-dui/</url>
      
        <content type="html"><![CDATA[<h3 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h3><p>首先介绍一下分块。</p><p>分块的思想很暴力，但是是有技巧的暴力。分块有时候还要靠运气和玄学。也有线段树的思想。</p><p>分块的用法：</p><p>数组：$1,2,3,3,2,1,2,3,6,2$</p><p>下标：$1,2,3,4,5,6,7,8,9,10$</p><p>现在要将区间 $[2,7]$ 求和，我们可以用<a href="https://wdsa001.github.io/2021/08/09/xian-duan-shu/">线段树</a>求区间,也可以用前缀和直接算。但这里我们用分块来做一下。</p><p>首先我们定一下每个块的长度（不一定整分总区间），例如我们定块长为 $3$，首先预处理出每个块的基础信息。<br>按题目要求处理。在这里，我们处理出每个区间的长度。</p><p>数组：$1,2,3,3,2,1,2,3,6,2$</p><p>下标：$1,2,3,4,5,6,7,8,9,10$（方便表示下标从 $1$ 开始）</p><p>分块：$6[1,3],6[4,6],11[7,9],2[10,12]$（所以开始时数组定义尽量要大一些）</p><p>然后我们可以知道，询问边界两个数分别属于 $1,3$ 区间，$2\in[1,3]$，$7\in[7,9]$。这时，我们可以先加上两者之间的块，就是第 $2$ 个块。接着，从询问左区间 $2$ 暴力枚举到当前块的结尾也就是原数组中下标为 $3$ 的数暴力加和（$[2,3]$）；再从询问右区间的块初枚举到询问的地方加和即可（$[7,7]$）。</p><p>和线段树的区间维护非常像，但是它没有线段树写的那么复杂，而且它比线段树的用法多一些，方便。缺点就是块长很死板。</p><h3 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h3><p>在区间暴力优化中，经常用到分块和莫队。</p><p>莫队的优化在于对询问进行排序，然后下次询问在上次询问的基础上略作删减搞出结果，而非重新开始。什么意思呢，举个例子。</p><p>数组：$1,2,3,3,2,1,2,3,6,2$</p><p>下标：$1,2,3,4,5,6,7,8,9,10$（我们还用上边的例子）</p><p>询问区间：$[1,5],[2,6],[3,6]$ 的和。</p><p>我们可以发现在查询 $[1,5]$ 了之后，我们可以不重新开始查询 $[2,6]$，我们可以先将上一个询问存的数组处理成 $[2,5]$，在加上最后一位，就可以直接找出结果了。第三个区间同理。这里不再赘述运行原理，感兴趣的可以看看<a href="https://wdsa001.github.io/2021/08/09/p1494/">这里</a>。</p><p>莫队很好被卡掉，比如下面的几组询问：$[1,3],[4,6],[7,10]$。它们没有交集，所以时间复杂度反而上升，但是在随机数据面前还是很好用的。</p><h3 id="莫队-分块"><a href="#莫队-分块" class="headerlink" title="莫队+分块"></a>莫队+分块</h3><p>没错，既然两者都是对区间优化，那么用得好就可以相辅相成。先来看道题。</p><p><a href="https://www.luogu.com.cn/problem/P4137">P4137 Rmq Problem / mex</a></p><p>要找的是区间没有出现过的最小<strong>自然数</strong>，要从 $0$ 开始找。</p><h4 id="分块询问区间"><a href="#分块询问区间" class="headerlink" title="分块询问区间"></a>分块询问区间</h4><p>先看一下变量与常量的定义与意义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span><span class="token comment">//数组的大小 </span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">501</span><span class="token punctuation">;</span><span class="token comment">//块长 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token comment">//数的个数，询问次数 </span><span class="token keyword">int</span> k_k<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//询问分块初始化，原数组 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//存询问 </span>  <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>id<span class="token punctuation">;</span><span class="token comment">//询问的走右边界和编号 </span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_m<span class="token punctuation">[</span><span class="token number">501</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//每个块中不同数字的个数，结果 </span><span class="token keyword">int</span> b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录数出现的次数 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来看块的预处理。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> l_n<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//预定块长 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原数组</span>    <span class="token comment">//一定比n+1小，否则一定不会被考虑到 </span>    k_k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>l_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化分块询问 </span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//查询信息存储 </span><span class="token function">sort</span><span class="token punctuation">(</span>p_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p_p<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么要处理块的询问呢？</p><p>在题目中，我们可以知道可能有 $2\times10^5$ 的询问次数，而对它们全部按照普通的莫队区间排序，时间复杂度会很高，所以可以让它们先大致排序一下再处理即可。按左边界所在的块前后排序。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k_k<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">==</span>k_k<span class="token punctuation">[</span>b<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//小优化 数太多，完全排好时间过大，所以按块排，草草排个大概就可以 </span>      <span class="token keyword">if</span><span class="token punctuation">(</span>k_k<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//奇数从小到大 </span>      <span class="token keyword">else</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&gt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//偶数从大到小 </span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> k_k<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>k_k<span class="token punctuation">[</span>b<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//从小到大</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中用了一个小优化。（为了方便理解，我们用正常的莫队排序演示。）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>l<span class="token operator">==</span>b<span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>l<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&gt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>l<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们用下面几组询问：$[1,2],[1,3],[1,4],[2,3],[2,4],[2,1],[3,4],[3,6]$</p><p>根据我们刚刚所说的先按左边询问排序（已排好序），但是右边我们一直没有介绍应该怎么排序。大部分都会跟左边一样从小到大这样有顺序右边界不会来回伸缩。但是，要想跟快的话，应该是分奇偶排序，比如下面这样。</p><p>$[1,2],[1,3],[1,4],[2,4],[2,3],[2,1],[3,4],[3,6]$</p><p>不难看出“奇升偶降”的规律，搜寻时进一步减少了伸缩次数。但是也可以被卡，比如左询问全奇，但是和右边也从小到大的排序效果是一样的。</p><h4 id="莫队查询，分块统计"><a href="#莫队查询，分块统计" class="headerlink" title="莫队查询，分块统计"></a>莫队查询，分块统计</h4><p>莫队基础操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//初始化莫队</span>  <span class="token keyword">int</span> l<span class="token operator">=</span>p_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>r<span class="token operator">=</span>p_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//初始化走右边界 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最小没出现的自然数 </span>  <span class="token comment">//初始化完毕 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//莫队操作 </span>      <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token function">d_l</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左边回缩 </span>      <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">--</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左边延长 </span>      <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右边延长 </span>      <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&gt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token function">d_l</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右边回缩 </span>      <span class="token function">f_i</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最小没出现的自然数 </span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要介绍增加，减少和查询的操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//增加操作 </span>  <span class="token keyword">int</span> k_x<span class="token operator">=</span>x<span class="token operator">/</span>m_a<span class="token punctuation">;</span><span class="token comment">//分块记录 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>n_m<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//这个块中不同的数增加 </span>    b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//记录数出现的次数 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删除操作 </span>  <span class="token keyword">int</span> k_x<span class="token operator">=</span>x<span class="token operator">/</span>m_a<span class="token punctuation">;</span><span class="token comment">//分块记录 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>n_m<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//这个块中不同的数减少 </span>    b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//记录数出现的次数 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//查询 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举第几个块 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n_m<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>m_a<span class="token punctuation">)</span><span class="token comment">//若n_m[i-1]==m_a说明这部分块中所有的数都已经出现过了 </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>m_a<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token operator">*</span>m_a<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//块长间查找 </span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找到结果 </span>                    a_s<span class="token punctuation">[</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment">//保存结果 </span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们统计每个块中不同的数的个数，如果数量和块长一样，那么这个块中一定没有未出现过的数，所以统计每个块中未出现过的数即可。</p><p>查询的时候，如果一个区间内不同数的数量小于块长，那么一定有未出现的数字，直接用块的两端为查找区间，暴力搜即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">501</span><span class="token punctuation">;</span><span class="token comment">//块长 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token comment">//数的个数，询问次数 </span><span class="token keyword">int</span> k_k<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//询问分块初始化，原数组 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//存询问 </span>  <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>id<span class="token punctuation">;</span><span class="token comment">//询问的走右边界和编号 </span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k_k<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">==</span>k_k<span class="token punctuation">[</span>b<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//小优化 数太多，完全排好时间过大，所以按块排，草草排个大概就可以 </span>      <span class="token keyword">if</span><span class="token punctuation">(</span>k_k<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//奇数从小到大 </span>      <span class="token keyword">else</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&gt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//偶数从大到小 </span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> k_k<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>k_k<span class="token punctuation">[</span>b<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n_m<span class="token punctuation">[</span><span class="token number">501</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录数出现的次数 </span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//增加操作 </span>  <span class="token keyword">int</span> k_x<span class="token operator">=</span>x<span class="token operator">/</span>m_a<span class="token punctuation">;</span><span class="token comment">//分块记录 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>n_m<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//这个块中不同的数增加 </span>    b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//记录数出现的次数 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删除操作 </span>  <span class="token keyword">int</span> k_x<span class="token operator">=</span>x<span class="token operator">/</span>m_a<span class="token punctuation">;</span><span class="token comment">//分块记录 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>n_m<span class="token punctuation">[</span>k_x<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//这个块中不同的数减少 </span>    b_b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//记录数出现的次数 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举第几个块 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n_m<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>m_a<span class="token punctuation">)</span><span class="token comment">//若n_m[i-1]==m_a说明这部分块中所有的数都已经出现过了 </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>m_a<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token operator">*</span>m_a<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//块长间查找 </span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找到结果 </span>                    a_s<span class="token punctuation">[</span>p_p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment">//保存结果 </span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l_n<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//预定块长 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入原数组</span>    <span class="token comment">//一定比n+1小，否则一定不会被考虑到 </span>        k_k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>l_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化分块询问 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//查询信息存储 </span>    <span class="token function">sort</span><span class="token punctuation">(</span>p_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p_p<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序 </span>  <span class="token comment">//初始化莫队</span>    <span class="token keyword">int</span> l<span class="token operator">=</span>p_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>r<span class="token operator">=</span>p_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">//初始化走右边界 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最小没出现的自然数 </span>    <span class="token comment">//初始化完毕 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//莫队操作 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token function">d_l</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左边回缩 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">--</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左边延长 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右边延长 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&gt;</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token function">d_l</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右边回缩 </span>        <span class="token function">f_i</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最小没出现的自然数 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按询问顺序输出 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 莫队 </tag>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>manacher 算法</title>
      <link href="/2021/09/03/manacher-suan-fa/"/>
      <url>/2021/09/03/manacher-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="manacher算法"><a href="#manacher算法" class="headerlink" title="manacher算法"></a>manacher算法</h3><p><a href="https://www.luogu.com.cn/problem/P3805">P3805 【模板】manacher 算法</a></p><p>计算回文长度时，一般用 <code>manacher</code> 算法，回文串长度可以是奇数也可以是偶数，<code>mamacher</code> 算法在存的时候克服了这个问题。</p><p>字符串：<code>abba</code>，<code>ababa</code></p><p>不难看出两个字符串都是回文串，第二个回文串直接找到回文中心就可以了判了，但是第一个就有点棘手。</p><p><code>manacher</code> 算法将所有相邻的字符之间补上一个字符，直接找对称中心就行了。</p><p>如果一个回文串长度为 $n$。</p><ul><li>假如 $n$ 是奇数，那么有 $n-1$ 个间隔，增加了偶数个字符。</li><li>假如 $n$ 是偶数，同样有 $n-1$ 个间隔，增加了奇数个字符。</li></ul><p>显然，偶数加奇数是奇数，所以一定有对称中心。</p><h3 id="对称"><a href="#对称" class="headerlink" title="对称"></a>对称</h3><p>保证有了对称中心，就可以通过枚举对称中心两边比对来找回文串即可。</p><p>但是 <code>manacher</code> 的精髓不仅于此。</p><p>我们将对称中心的回文长度存到 <code>h_w[i]</code> 中，原字符串是 <code>a_a</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token operator">+</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>a_a<span class="token punctuation">[</span>i<span class="token operator">-</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//两边辐射 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们通过枚举两边可以知道回文串的长度，但是在记录的过程中我们也可以用到它对称的特性，</p><p>举个例子：<code>qwertrewqwertrewq</code></p><p>这个回文串有两个回文子串：<code>qwertrewq</code>，如果我们单纯的考暴力枚举的话，找到所有的回文串要将所有的字枚举为回文中心，并枚举回文长度，来计算。</p><p>但是当我们枚举回文中心时，枚举完第一个回文串（<code>qwertrewq</code>）和第二个回文串时（<code>qwertrewqwertrewq</code>）。根据对称这一特性，我们其实已经可以断言第三个回文串（<code>qwertrewq</code>）的存在了。</p><p>所以当我们枚举到第三个回文串的对称中心时可以直接从第一个回文串那里获得基本信息，再向两边遍历查找（有可能在大回文串外的字符和串里的字符仍然回文）。</p><p>例子：<code>qwerewqwerewqwe</code></p><p>我们可以发现，我们可以从第一个 <code>qwerewq</code> 和 <code>qwerewqwerewq</code> 断言第二个 <code>qwerewq</code> 的存在，并在第一个串中获得基本信息：回文长度，但是并没有结束，因为它的极限是 <code>ewqwerewqwe</code>，所以还要继续判断。</p><h3 id="manacher的优化程度"><a href="#manacher的优化程度" class="headerlink" title="manacher的优化程度"></a>manacher的优化程度</h3><p>在上面的例子中我们发现 <code>manacher</code> 的优化就是一个获得信息。</p><p>对于大数据用这种优化和暴力相比复杂度应该不大吧？还不如暴力记得方便？</p><p>我们上面举的例子都是“相对友好的”，看看那下面的两个例子。</p><p>例子：<code>qwqwqwqwqwq</code> 和 <code>qqqqqq</code></p><p>我们把它们延长几万倍，暴力和 <code>manacher</code> 的差距就对比出来了。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>h_w<span class="token punctuation">[</span>m_i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对称找最大回文 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为信息要传大回文串里的所以要注意不能超过大回文串的回文中心。</p><p>例子：<code>ewqwerewqwerewq</code></p><p>所以第二个 <code>qwerewq</code> 只能保留第一个 <code>qwerewq</code>的信息，而非 <code>ewqwerewqwe</code> 的，所以这里用一个 <code>min</code>，来规范边界。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">3e7</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>string a<span class="token punctuation">;</span><span class="token keyword">char</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> l_a<span class="token punctuation">,</span>m_a<span class="token punctuation">;</span><span class="token keyword">int</span> h_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a_a<span class="token punctuation">[</span>l_a<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'@'</span><span class="token punctuation">;</span>a_a<span class="token punctuation">[</span>l_a<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token string">'a'</span><span class="token operator">||</span>c<span class="token operator">&gt;</span><span class="token string">'z'</span><span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&gt;=</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a_a<span class="token punctuation">[</span>l_a<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span>    a_a<span class="token punctuation">[</span>l_a<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>l_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>h_w<span class="token punctuation">[</span>m_i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对称找最大回文 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token operator">+</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>a_a<span class="token punctuation">[</span>i<span class="token operator">-</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//两边辐射 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token operator">&gt;</span>r<span class="token punctuation">)</span>r<span class="token operator">=</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>m_i<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//快速跳边界 </span>    m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>h_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录最长</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>m_a<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 模板 </tag>
            
            <tag> manacher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP 算法</title>
      <link href="/2021/09/03/kmp-suan-fa/"/>
      <url>/2021/09/03/kmp-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><p>用于快速找子串在原串中的位置和次数。</p><p><a href="https://www.luogu.com.cn/problem/P3375">P3375 【模板】KMP字符串匹配</a></p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>先处理原串，初始化 <code>kmp</code> 数组。从头开始匹配，如果匹配成功下标存匹配成功的下标后一个，否则再向回找。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">举个例子：子串 ABCABCDKMP  0001230<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不难发现，初始化 <code>kmp</code> 时第二个 $A$ 的下表是 $1$,第二个 $B$ 的下标是 $2$，这么存的原因是如果前面几位都匹配成功，下一位突然匹配失败，会从下标的地方继续而不是重新开始，这也是 <code>KMP</code> 的算法的核心思想。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">举个有代表性的例子：原串 ABCEFDABCEFDABCD子串 ABCEFDABCDKMP  0000001230<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>前几位都可以和原串匹配成功，但是在第 $10$ 位（$1$ 为第一位）失配了。</p><ul><li>如果是原来的暴力算法，那么会从第二位从新一点点匹配，第二位不行，第三位不行……第七位成功了，输出。</li><li>但是现在可以直接从失配位置的下标继续匹配，第一次失败后会直接从 $3$ 的 <code>kmp</code> 下标开始继续匹配，但原数组的匹配位置不变。</li></ul><p>到匹配完成时 ，<code>kmp</code> 的方法使原串每位只比对了一次，效率大大提升。</p><h3 id="为什么失配直接回到下标继续匹配？"><a href="#为什么失配直接回到下标继续匹配？" class="headerlink" title="为什么失配直接回到下标继续匹配？"></a>为什么失配直接回到下标继续匹配？</h3><p>这和 <code>kmp</code> 的初始化有关，在初始化的时候，我们就比对了失配位置。比对时就是用当前下标从头开始比对的。</p><p>通俗一点：能匹配到这一步，就已经有了匹配到这里的资格。</p><p>再看上边的例子。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">例子：子串 ABCABCDKMP  0001230<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>能匹配到第 $5$ 位（$B$），假设下一位未匹配失败了，但是还是有回到第 $3$ 位的资格，因为前面已经匹配成功。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">char</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//原串，子串 </span><span class="token keyword">int</span> l_a<span class="token punctuation">,</span>l_b<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> kmp<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>a_a<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span>b_b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  l_a<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>a_a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原串长度 </span>  l_b<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>b_b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//子串长度 </span>  k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>l_b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理子串 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&amp;&amp;</span>b_b<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>b_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>k<span class="token operator">=</span>kmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//失配，回到失配指向的下标 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>b_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//匹配成功，继续匹配 </span>    kmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//标记失配下标 </span>  <span class="token punctuation">}</span>  k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>l_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理原串 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&amp;&amp;</span>b_b<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>k<span class="token operator">=</span>kmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//失配，回到失配指向的下标 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//匹配成功，继续匹配 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l_b<span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//匹配完成 </span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">-</span>l_b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出 </span>      k<span class="token operator">=</span>kmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//回到失配下标 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>l_b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>kmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 KMP 失配下标 </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*ABCEFDABCEFDABCDABCEFDABCD*/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 模板 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态仙人掌</title>
      <link href="/2021/09/01/jing-tai-xian-ren-zhang/"/>
      <url>/2021/09/01/jing-tai-xian-ren-zhang/</url>
      
        <content type="html"><![CDATA[<h3 id="静态仙人掌"><a href="#静态仙人掌" class="headerlink" title="静态仙人掌"></a>静态仙人掌</h3><p><a href="https://www.luogu.com.cn/problem/P5236">静态仙人掌（模板）</a></p><p>仙人掌定义：对一个无向连通图，任意一条边属于至多一个简单环。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>每个询问是两点之间的最短路，我们求最短路一般都是在树型结构上，而仙人掌图会存在环，但是每条边最多在一个环中，所以环不会互相影响，我们要对这些环做一些处理。</p><p>我们把每个环重新建为方点，而原来图上的点叫做原点。（圆方树的思想）。这样就可以直接做最短路了。</p><h3 id="找环，建方点"><a href="#找环，建方点" class="headerlink" title="找环，建方点"></a>找环，建方点</h3><p><strong>一点个人理解：环变成的方点并不是真的变成了一个点，而是将整个环封装成一个点。每回访问的时候，只访问其中两个点的最短距离，所以可以预处理出来整个环的长度，和环上每个点到某个点的长度。最短距离就可以直接求出来（后面会有说明）。</strong></p><p>找环，缩点。可以用 <code>tarjan</code> 实现。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">t_j</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//缩点，连边 </span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_x<span class="token punctuation">;</span><span class="token comment">//时间戳 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>k<span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token function">t_j</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">!=</span>f<span class="token punctuation">)</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&gt;</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理环外的点的连边 </span><span class="token function">a_dd</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_dd</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理环上的点的连边 </span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">==</span>k<span class="token operator">||</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&lt;=</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">a_t</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//“封装”的方点 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缩点的时候同时将原来的边在新图上连出来。注意环上的点之间的连边特殊处理（就是建方点）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理环，连方节点到环的每个点 </span>n_p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">int</span> l_l<span class="token operator">=</span>l<span class="token punctuation">,</span>i<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存整个环的大小 </span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>l_l<span class="token punctuation">;</span><span class="token comment">//到先遍历的点的距离 </span>l_l<span class="token operator">+=</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>i<span class="token operator">=</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//因为是个环，所以找父节点找到最后就是最开始的那个点 </span><span class="token punctuation">}</span>q_q<span class="token punctuation">[</span>n_p<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//赋方节点初值 </span>i<span class="token operator">=</span>v<span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_x<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>n_x<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>n_p<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">-</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//环两边走法，那个近存那个 </span><span class="token function">a_dd</span><span class="token punctuation">(</span>n_p<span class="token operator">+</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>n_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方节点和其它点连边 </span><span class="token function">a_dd</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n_p<span class="token operator">+</span>n<span class="token punctuation">,</span>n_x<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">=</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="公共祖先LCA"><a href="#公共祖先LCA" class="headerlink" title="公共祖先LCA"></a>公共祖先LCA</h3><p>这里可以用倍增和树链剖分两种算法，倍增会更快，但是树链剖分处理更方便。所以这里使用树链剖分解法。（建图虽然有些麻烦，但是处理会非常方便，也更加灵活）</p><p><a href="https://wdsa001.github.io/2021/08/31/shu-lian-pou-fen/">树链剖分</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span><span class="token comment">//存点 </span><span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token comment">//父节点 </span><span class="token keyword">int</span> t_p<span class="token punctuation">;</span><span class="token comment">//链顶 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//边转点的价值 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//在环中和最先遍历的点的距离（时间戳最小的点） </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//子树和它的重量 </span><span class="token keyword">int</span> d_p<span class="token punctuation">;</span><span class="token comment">//深度 </span><span class="token keyword">int</span> b_s<span class="token punctuation">;</span><span class="token comment">//重儿子 </span><span class="token keyword">int</span> l_g<span class="token punctuation">;</span><span class="token comment">//到根节点的距离 </span><span class="token punctuation">}</span>q_q<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意要多存一个每个节点到根节点的距离。方便算最短路的距离。</p><h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><p>先找两个点的公共祖先。</p><p>如果在原点上直接输出两个点分别到根节点的距离减去两倍的公共祖先到根节点的距离即可。</p><p>否则，找到两个点分别到“封装”的方点最近的点（就是两个点最短进入环的那两个点）。将两个点的路长度先记上，再加上“封装”好的环中直接计算得到的最短长度。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">g_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> g_f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>g_f<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">+</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>q_q<span class="token punctuation">[</span>g_f<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若公共祖先在圆点上，直接用两点到跟的距离减公共祖先到根的距离的两倍即可 </span><span class="token keyword">int</span> h_a<span class="token operator">=</span><span class="token function">f_h</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>g_f<span class="token punctuation">)</span><span class="token punctuation">,</span>h_b<span class="token operator">=</span><span class="token function">f_h</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>g_f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//找到入环的点 </span><span class="token keyword">int</span> a_s<span class="token operator">=</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">+</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token punctuation">;</span><span class="token comment">//先记上两点到环的距离 </span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>h_a<span class="token punctuation">,</span>h_b<span class="token punctuation">)</span><span class="token punctuation">;</span>a_s<span class="token operator">+=</span><span class="token function">min</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>g_f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//环上两条路，两点最小距离 </span><span class="token keyword">return</span> a_s<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“封装”的方点本身其实是一个已经处理好的环，但是在图上可以看做点来遍历。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//存边 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">;</span><span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>p_pp<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>h_dd<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">,</span>x_pp<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>q<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//原图边 </span>p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> l_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>d_f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_x<span class="token punctuation">;</span><span class="token comment">//tarjan的时间戳和最小能到达时间的戳标记 </span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span><span class="token comment">//存点 </span><span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token comment">//父节点 </span><span class="token keyword">int</span> t_p<span class="token punctuation">;</span><span class="token comment">//链顶 </span><span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token comment">//边转点的价值 </span><span class="token keyword">int</span> s_m<span class="token punctuation">;</span><span class="token comment">//在环中和最先遍历的点的距离（时间戳最小的点） </span><span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//子树和它的重量 </span><span class="token keyword">int</span> d_p<span class="token punctuation">;</span><span class="token comment">//深度 </span><span class="token keyword">int</span> b_s<span class="token punctuation">;</span><span class="token comment">//重儿子 </span><span class="token keyword">int</span> l_g<span class="token punctuation">;</span><span class="token comment">//到根节点的距离 </span><span class="token punctuation">}</span>q_q<span class="token punctuation">[</span>o_o<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_p<span class="token punctuation">;</span><span class="token comment">//方节点编号 </span><span class="token keyword">void</span> <span class="token function">a_dd</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//新图边 </span>p_pp<span class="token punctuation">[</span><span class="token operator">++</span>x_pp<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>p_pp<span class="token punctuation">[</span>x_pp<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>l<span class="token punctuation">;</span>p_pp<span class="token punctuation">[</span>x_pp<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_dd<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>h_dd<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_pp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理环，连方节点到环的每个点 </span>n_p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">int</span> l_l<span class="token operator">=</span>l<span class="token punctuation">,</span>i<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存整个环的大小 </span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>l_l<span class="token punctuation">;</span><span class="token comment">//到先遍历的点的距离 </span>l_l<span class="token operator">+=</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>i<span class="token operator">=</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span>q_q<span class="token punctuation">[</span>n_p<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">;</span><span class="token comment">//赋方节点初值 </span>i<span class="token operator">=</span>v<span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_x<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>n_x<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>n_p<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">-</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//环两边走法，那个近存那个 </span><span class="token function">a_dd</span><span class="token punctuation">(</span>n_p<span class="token operator">+</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>n_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方节点和其它点连边 </span><span class="token function">a_dd</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n_p<span class="token operator">+</span>n<span class="token punctuation">,</span>n_x<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">=</span>q_q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">t_j</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span> l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_x<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>k<span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token function">t_j</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">!=</span>f<span class="token punctuation">)</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&gt;</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理环外的点 </span><span class="token function">a_dd</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_dd</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//处理环上的点 </span><span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">==</span>k<span class="token operator">||</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&lt;=</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">a_t</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">,</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span> q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>f<span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_dd<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token operator">=</span>p_pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">=</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">=</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">+</span>p_pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token function">d_1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+=</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">&gt;</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> t_p<span class="token punctuation">)</span><span class="token punctuation">{</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">=</span>t_p<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">)</span><span class="token function">d_2</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">,</span>t_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_dd<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token operator">=</span>p_pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">||</span>v<span class="token operator">==</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">d_2</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">g_f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找公共祖先 </span><span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&gt;</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_h</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a_s<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//点进入公共祖先的链 </span>a_s<span class="token operator">=</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">;</span>a<span class="token operator">=</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token comment">//如果这条链的链顶的父亲是公共祖先链的链顶，那返回这个点 </span><span class="token keyword">else</span> <span class="token keyword">return</span> q_q<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">;</span><span class="token comment">//否则返回共公祖先的重儿子节点 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">g_m</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> g_f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>g_f<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">+</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>q_q<span class="token punctuation">[</span>g_f<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若公共祖先在圆点上，直接用两点到跟的距离减公共祖先到根的距离的两倍即可 </span><span class="token keyword">int</span> h_a<span class="token operator">=</span><span class="token function">f_h</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>g_f<span class="token punctuation">)</span><span class="token punctuation">,</span>h_b<span class="token operator">=</span><span class="token function">f_h</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>g_f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//找到入环的点 </span><span class="token keyword">int</span> a_s<span class="token operator">=</span>q_q<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">+</span>q_q<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>l_g<span class="token punctuation">;</span><span class="token comment">//先记上两点到环的距离 </span><span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>h_a<span class="token punctuation">,</span>h_b<span class="token punctuation">)</span><span class="token punctuation">;</span>a_s<span class="token operator">+=</span><span class="token function">min</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>g_f<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">-</span>q_q<span class="token punctuation">[</span>h_a<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token operator">+</span>q_q<span class="token punctuation">[</span>h_b<span class="token punctuation">]</span><span class="token punctuation">.</span>s_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//环上两条路，两点最小距离 </span><span class="token keyword">return</span> a_s<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">t_j</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理环，建新图 </span><span class="token comment">//树链剖分 </span><span class="token function">d_1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">d_2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a_b<span class="token operator">=</span><span class="token function">g_f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">g_m</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>a_b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 强联通分量 </tag>
            
            <tag> 最近公共祖先 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 仙人掌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树链剖分</title>
      <link href="/2021/08/31/shu-lian-pou-fen/"/>
      <url>/2021/08/31/shu-lian-pou-fen/</url>
      
        <content type="html"><![CDATA[<h3 id="树链剖分介绍"><a href="#树链剖分介绍" class="headerlink" title="树链剖分介绍"></a>树链剖分介绍</h3><p><a href="https://www.luogu.com.cn/problem/P3384">轻重链剖分/树链剖分(模板)</a></p><p>常见题目，已知一棵包含 $N$ 个结点的树（连通且无环），每个节点上包含一个数值，需要支持以下操作：</p><ul><li>$1$ $x$ $y$ $z$，表示将树从 $x$ 到 $y$ 结点最短路径上所有节点的值都加上 $z$。</li><li>$2$ $x$ $y$，表示求树从 $x$ 到 $y$ 结点最短路径上所有节点的值之和。</li><li>$3$ $x$ $z$，表示将以 $x$ 为根节点的子树内所有节点值都加上 $z$。</li><li>$4$ $x$ 表示求以 $x$ 为根节点的子树内所有节点值之和</li></ul><h3 id="操作分析"><a href="#操作分析" class="headerlink" title="操作分析"></a>操作分析</h3><p>操作 $1$，$2$非常像线段树的区间和，区间查询操作。而操作 $3$，$4$用线段树也可以实现，但是肯定要给他们一种特殊的存储和特殊的查询。</p><p><a href="https://wdsa001.github.io/2021/08/09/xian-duan-shu/">线段树(先复习一下线段树)</a></p><h3 id="特殊的存储——剖分"><a href="#特殊的存储——剖分" class="headerlink" title="特殊的存储——剖分"></a>特殊的存储——剖分</h3><p>首先介绍几个名词：重儿子，重边，轻儿子，轻链，轻边，重链。</p><ul><li>重儿子：每个节点所有子节点中，儿子最多的节点。</li><li>重边：节点和重儿子连的边。</li><li>轻儿子：除了重儿子，其他子节点。</li><li>轻边：节点和轻儿子连的边。</li><li>重链：连续的重边连成的链。</li><li>轻链：连续的轻边连成的链。</li></ul><h4 id="存储节点状态"><a href="#存储节点状态" class="headerlink" title="存储节点状态"></a>存储节点状态</h4><p>关于节点，我们要存：父节点，节点大小（重量），重儿子，深度，链头，新编号。</p><ul><li>链头：重链中，最靠近根节点的节点。</li><li>新编号：我们要用线段树维护，所以要根据重链重新个所有节点附一个新的编号，将重链上的节点都变成连续的编号，可以方便区间操作。</li></ul><p>我们可以跑两遍深搜，来处理所有存储信息。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">,</span><span class="token keyword">int</span> d_p<span class="token punctuation">)</span><span class="token punctuation">{</span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">=</span>d_p<span class="token punctuation">;</span><span class="token comment">//节点深度 </span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>f<span class="token punctuation">;</span><span class="token comment">//存父节点 </span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//节点大小（重量）初值 </span>  <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//找重儿子 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>     <span class="token function">d_1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">,</span>d_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历儿子 </span>    q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+=</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">;</span><span class="token comment">//更新当前节点重量 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_a<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span>m_a<span class="token operator">=</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//更新重儿子 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>节点深度：方便后面找操作 $1$，$2$ 最近公共祖先。</li></ul><p>要先找到所有的重儿子，才能找到重链。<br></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">d_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> t_p<span class="token punctuation">)</span><span class="token punctuation">{</span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">=</span>t_p<span class="token punctuation">;</span><span class="token comment">//链头 </span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span><span class="token operator">++</span>x_n<span class="token punctuation">;</span><span class="token comment">//赋新节点编号 </span>  n_w<span class="token punctuation">[</span>x_n<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用新节点存储当前节点的价值 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//没有种儿子，说明没有儿子 </span>  <span class="token function">d_2</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">,</span>t_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先遍历重儿子，形成重链 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">||</span>v<span class="token operator">==</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//重儿子已经遍历过 </span>    <span class="token function">d_2</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//轻儿子是新重链的链头 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><h4 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h4><p>点的基础信息存完后就可以开始根据新节点编号建树。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>n_w<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用新编号存储节点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&gt;</span>p<span class="token punctuation">)</span>t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>n_w<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">%</span>o_o<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经典的线段树建树操作。</p><h3 id="处理操作"><a href="#处理操作" class="headerlink" title="处理操作"></a>处理操作</h3><p><del>操作中的的线段树经典操作太长就不放了。</del></p><h4 id="操作一"><a href="#操作一" class="headerlink" title="操作一"></a>操作一</h4><p>两点的路径上的加处理，我们可以根据提前存的链来处理。因为每个重链的节点编号是连续的，所以可以不断遍历这些重链，再用线段数的区间加操作就行。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>  v<span class="token operator">%=</span>p<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//链头不相等（不在同一个链上） </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//深度更深的链先处理区间加 </span>    <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理范围：链头编号到当前节点编号 </span>    l<span class="token operator">=</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//更新范围，变成链头的父亲，进入新链 </span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&gt;</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同一个链上直接处理编号就行 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作二"><a href="#操作二" class="headerlink" title="操作二"></a>操作二</h4><p>两点上的历经求和处理，和加处理相似，通过重链遍历，直接套线段树的区间求和就行。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">s_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间和 </span>  <span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果初始化 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//链头不相等（不在同一个链上） </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//深度更深的链先处理区间和 </span>    r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果赋初值 </span>    <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理范围：链头编号到当前节点编号 </span>    a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span>r_s<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//累加重链结果 </span>    l<span class="token operator">=</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//更新范围，变成链头的父亲，进入新链 </span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&gt;</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>  <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同一个链上直接处理编号</span>  a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span>r_s<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新 </span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作三"><a href="#操作三" class="headerlink" title="操作三"></a>操作三</h4><p>子树全体增值，先放代码再解释。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">a_z</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//由于按重儿子遍历，且先遍历重链，所以编号是先跟着重链遍历到树底，在回溯的顺序赋予轻节点编号。</span>  <span class="token comment">//所以每个节点的子树的编号是连续的，可以用它的编号到它的编号加它的大小减一的区间进行操作。 </span>  <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">+</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举个例子：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">    1   / <span class="token function selector">\</span>  /   <span class="token function selector">\</span> /     <span class="token function selector">\</span>2       3       / <span class="token function selector">\</span>      /   <span class="token function selector">\</span>     4     5    /     / <span class="token function selector">\</span>   6     7   8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们给它剖一下。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">             1新编号：     1            / <span class="token function selector">\</span>           /   <span class="token function selector">\</span>          /     <span class="token function selector">\</span>         2       3新编号： 8        2                / <span class="token function selector">\</span>               /   <span class="token function selector">\</span>              4     5新编号：      6      3             /     / <span class="token function selector">\</span>            6     7   8新编号：    7     4    5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们不难发现没个子数的所有编号都是连续的。<br>比如：节点 $3$ 的子树编号 $[3,5]$，节点 $2$ 的子树编号 $[2,7]$。</p><p>原因在于存点的编号是按重链优先的，所以编号一定是先跑到树底，才从树底慢慢往回跑赋的值，所以树的节点都是连续的。</p><h4 id="操作四"><a href="#操作四" class="headerlink" title="操作四"></a>操作四</h4><p>和操作三非常相似，从区间加变成了区间求和。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">s_z</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果赋初值 </span>  <span class="token comment">//和子树加同理 </span>  <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">+</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> r_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">int</span> f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>r<span class="token punctuation">,</span>p<span class="token punctuation">;</span><span class="token comment">//题目描述：节点数量，操作次数，根节点，取模 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//节点初值 </span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span><span class="token comment">//链式前向星存边 </span>  <span class="token keyword">int</span> v<span class="token punctuation">;</span>  <span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//链式前向星存边 </span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> s_z<span class="token punctuation">;</span><span class="token comment">//节点价值（重量） </span>  <span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token comment">//父节点 </span>  <span class="token keyword">int</span> d_p<span class="token punctuation">;</span><span class="token comment">//深度 </span>  <span class="token keyword">int</span> b_s<span class="token punctuation">;</span><span class="token comment">//重儿子 </span>  <span class="token keyword">int</span> t_p<span class="token punctuation">;</span><span class="token comment">//链头 </span>  <span class="token keyword">int</span> i_d<span class="token punctuation">;</span><span class="token comment">//新编号 </span><span class="token punctuation">}</span>q_q<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_n<span class="token punctuation">;</span><span class="token comment">//存贮新编号节点，赋新编号 </span><span class="token keyword">int</span> t_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>l_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//树，懒标记，区间查询结果 </span><span class="token keyword">void</span> <span class="token function">d_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">,</span><span class="token keyword">int</span> d_p<span class="token punctuation">)</span><span class="token punctuation">{</span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">=</span>d_p<span class="token punctuation">;</span><span class="token comment">//节点深度 </span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>f<span class="token punctuation">;</span><span class="token comment">//存父节点 </span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//节点大小（重量）初值 </span>  <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//找重儿子 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>     <span class="token function">d_1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">,</span>d_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历儿子 </span>    q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">+=</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">;</span><span class="token comment">//更新当前节点重量 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_a<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">)</span>m_a<span class="token operator">=</span>q_q<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token comment">//更新重儿子 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">d_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> t_p<span class="token punctuation">)</span><span class="token punctuation">{</span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">=</span>t_p<span class="token punctuation">;</span><span class="token comment">//链头 </span>  q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">=</span><span class="token operator">++</span>x_n<span class="token punctuation">;</span><span class="token comment">//赋新节点编号 </span>  n_w<span class="token punctuation">[</span>x_n<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用新节点存储当前节点的价值 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//没有种儿子，说明没有儿子 </span>  <span class="token function">d_2</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">,</span>t_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先遍历重儿子，形成重链 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">||</span>v<span class="token operator">==</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b_s<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//重儿子已经遍历过 </span>    <span class="token function">d_2</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//轻儿子是新重链的链头 </span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">l_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右儿子 </span>  <span class="token keyword">return</span> k<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新节点 </span>  t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>t_t<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>t_t<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">p_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l_n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//下传懒标记，更新值 </span>  l_a<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  l_a<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  t_t<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>l_n<span class="token operator">-</span><span class="token punctuation">(</span>l_n<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t_t<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>l_n<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t_t<span class="token punctuation">[</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>  t_t<span class="token punctuation">[</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>  l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token comment">//懒标记 </span>    t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理当前节点 </span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理懒标记 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>m_i<span class="token punctuation">)</span><span class="token function">u_d</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理左边 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&gt;</span>m_i<span class="token punctuation">)</span><span class="token function">u_d</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理右边 </span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间查询 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    r_s<span class="token operator">+=</span>t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    r_s<span class="token operator">%=</span>p<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l_a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">p_d</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将懒标记释放 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>m_i<span class="token punctuation">)</span><span class="token function">f_i</span><span class="token punctuation">(</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理左边</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&gt;</span>m_i<span class="token punctuation">)</span><span class="token function">f_i</span><span class="token punctuation">(</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理右边 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//建树 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>n_w<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用新编号存储节点 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&gt;</span>p<span class="token punctuation">)</span>t_t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>n_w<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">%</span>o_o<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> m_i<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m_i<span class="token punctuation">,</span><span class="token function">l_l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">b_t</span><span class="token punctuation">(</span>m_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">r_r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_p</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新节点 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间加 </span>  v<span class="token operator">%=</span>p<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//链头不相等（不在同一个链上） </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//深度更深的链先处理区间加 </span>    <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理范围：链头编号到当前节点编号 </span>    l<span class="token operator">=</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//更新范围，变成链头的父亲，进入新链 </span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&gt;</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同一个链上直接处理编号就行 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">s_p</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//区间和 </span>  <span class="token keyword">int</span> a_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果初始化 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token operator">!=</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//链头不相等（不在同一个链上） </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token operator">&lt;</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>d_p<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//深度更深的链先处理区间和 </span>    r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果赋初值 </span>    <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理范围：链头编号到当前节点编号 </span>    a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span>r_s<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//累加重链结果 </span>    l<span class="token operator">=</span>q_q<span class="token punctuation">[</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>t_p<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token comment">//更新范围，变成链头的父亲，进入新链 </span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">&gt;</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>  <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同一个链上直接处理编号</span>  a_s<span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span>r_s<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token comment">//更新 </span>  <span class="token keyword">return</span> a_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">a_z</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//由于按重儿子遍历，且先遍历重链，所以编号是先跟着重链遍历到树底，在回溯的顺序赋予轻节点编号。</span>  <span class="token comment">//所以每个节点的子树的编号是连续的，可以用它的编号到它的编号加它的大小减一的区间进行操作。 </span>  <span class="token function">u_d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">+</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">s_z</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  r_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果赋初值 </span>  <span class="token comment">//和子树加同理 </span>  <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token punctuation">,</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i_d<span class="token operator">+</span>q_q<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s_z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> r_s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存节点初值 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连边 </span>    <span class="token function">a_d</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连边 </span>  <span class="token punctuation">}</span>  <span class="token function">d_1</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从根节点开始处理点 </span>  <span class="token function">d_2</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从根节点开始处理点 </span>  <span class="token function">b_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建树 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//树上两点路径上加处理 </span>      <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">a_p</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//树上两点路径上求和处理 </span>      <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">s_p</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//节点子树加</span>      <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">a_z</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//节点子树求和 </span>      <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">s_z</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 最近公共祖先 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1538D Another Problem About Dividing Numbers</title>
      <link href="/2021/08/10/cf1538d/"/>
      <url>/2021/08/10/cf1538d/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1538D">传送门</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给 $a$，$b$，$k$ 三个数在 $k$ 次操作后 $a=b$，输出 <code>YES</code>，否则输出 <code>NO</code>，每次操作可以让 $a$ 或 $b$ 整除一个大于 $1$ 的整数。</p><hr><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们看这道题结合样例不难发现，我们可以求出一个范围，只要 $k\in[\min,\max]$ ，反之则不行。</p><p>那么我们先找范围 $\min$，首先我们知道两个不为 $1$ 的数， $k=2$ 是<strong>一定可以</strong>：可以让 $\frac{a}{a}=1$，再 $\frac{b}{b}=1$ 即可。</p><p>而如果 $a\mid b$ 或 $b\mid a$，$k_{\min}=1$，让大的数除到小的数即可 。</p><p>接着我们要找范围 $\max$，我们可以先将两个数的最大公约数求出，设 $f_i$ 为数的分解质因数后的质因数个数，这样我们可以求最大值了。</p><p>例子：</p><p>$4,4$</p><p>$k=2$ 时：$2,2$</p><p>$k=3$ 时：$1,1$</p><p>$k=3$ 时，因为每次可以除大于 $1$ 的整数，所以最大值可以是 $2\times f_i(\gcd(a,b))$（$a$ 贡献一次，$b$ 贡献一次）。</p><p>但这并不全面，因为我们让 $a$ 和 $b$ 直接除到他们的最大公因数，而在 $a$ 和 $b$ 除时，除的数也可以贡献最大值。</p><p>例子：</p><p>$36,48$</p><p>$a=12$ 和 $b=12$ 时，$\frac{a}{3}=12$，$\frac{b}{4}=12$，而 $4=2\times 2$，可以为最大值贡献 $2$。</p><p>所以 $\max={2\times f_i(\gcd(a,b))+f_i(\frac{a}{\gcd(a,b)})+f_i(\frac{b}{\gcd(a,b)})}$</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token comment">//t组数据</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>k<span class="token punctuation">;</span> <span class="token keyword">int</span> m_i<span class="token punctuation">,</span>m_a<span class="token punctuation">;</span><span class="token comment">//可以满足的最小值和最大值 </span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//最大公约数 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//分解质因子，求质因子的数量 </span>  <span class="token keyword">int</span> n_n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a_a<span class="token operator">=</span>a<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>a_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token operator">/=</span>i<span class="token punctuation">;</span>n_n<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span>n_n<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> n_n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方便求最大公约数 </span>    <span class="token keyword">int</span> g_c<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>g_c<span class="token operator">==</span>a<span class="token operator">||</span>g_c<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>a<span class="token operator">!=</span>b<span class="token punctuation">)</span>m_i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//特判 </span>    <span class="token keyword">else</span> m_i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    m_a<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token function">f_i</span><span class="token punctuation">(</span>g_c<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">f_i</span><span class="token punctuation">(</span>a<span class="token operator">/</span>g_c<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">f_i</span><span class="token punctuation">(</span>b<span class="token operator">/</span>g_c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求k最大可以是多少 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&gt;=</span>m_i<span class="token operator">&amp;&amp;</span>k<span class="token operator">&lt;=</span>m_a<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出 </span>    <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
            <tag> GCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT2830 辞書順で何番目？题解</title>
      <link href="/2021/08/10/at2830/"/>
      <url>/2021/08/10/at2830/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/AT2830">传送门</a></p><p><a href="https://www.luogu.com.cn/problem/P5367">康托展开【模板】</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>本题用了康托展开。</p><p>康托展开表达式：$ans=1+\sum\limits_{i=1}^n A\lbrack i\rbrack\times(n-i)!$</p><p>康托展开的主要思想是将所有的情况按顺序编一个号，并用简便的算法快速找出它的顺序。</p><p>举个例子：1 4 2 3</p><p>还没有出现过的数（从小到大）：1 2 3 4</p><p>序列第一位是 1，在还没用过的序列中排第一个所以 $ans=ans+0\times3!$</p><p>还没有用过的数（从小到大）：2 3 4</p><p>序列第一位是 4，在还没用过的序列中排第三个所以 $ans=ans+2\times2!$</p><p>还没有用过的数（从小到大）：2 3</p><p>序列第一位是 2，在还没用过的序列中排第一个所以 $ans=ans+0\times1!$</p><p>还没有用过的数（从小到大）：3</p><p>序列第一位是 2，在还没用过的序列中排第一个所以 $ans=ans+0\times0!$</p><p>此时 $ans=4$，根据公式再加一即是结果。</p><h4 id="康托展开的查找"><a href="#康托展开的查找" class="headerlink" title="康托展开的查找"></a>康托展开的查找</h4><p>根据上面的例子，可能会有疑惑，为什么会出现阶乘？</p><p>其实是因为全排列问题，例如还剩 3 个数，有 3 个空共有 $3\times2\times1=6$ 种情况。</p><p>这也是前面提过的，为了给每种情况一种编号，而我们是通过从小到大的顺序进行编号的，那么我们可以<br>通过每一位的判断将这个位数之前的所有情况都算出来，就能知道当前的排名，在最后一位求完时，再加一就是当前排列的排名了。</p><p>讲得通俗一点就是，例如在自然数中，你要找到 100 这个数的排名，你可以通过所有可能的排序情况，先求出 99 的排名，最后再加 1 就是 100 的排名了。</p><p>所以通过每一位确定的数，求比当前序列已经确定的数组成的序列小的序列排名，最后加一就是当前序列的排名，这就是康托展开的求排序方法。</p><h4 id="实现查找当前数位上的数在未用过数的序列中的排名"><a href="#实现查找当前数位上的数在未用过数的序列中的排名" class="headerlink" title="实现查找当前数位上的数在未用过数的序列中的排名"></a>实现查找当前数位上的数在未用过数的序列中的排名</h4><p>方法一：通过平衡树找当前数排名，注意及时删点（<code>update</code>）。</p><p>方法二：通过树状数组找到当前数的排名（本篇题解的代码就是这个思路）。</p><h4 id="细节优化"><a href="#细节优化" class="headerlink" title="细节优化"></a>细节优化</h4><ul><li><p>即时取模。</p></li><li><p>注意数列中数的下标从 0 开始。</p></li><li><p><a href="http://www.360doc.com/content/19/0707/10/5315_847201395.shtml">推荐一下洛谷日报的康托展开。</a></p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> tree<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//树状数组快速找"儿子" </span>  <span class="token keyword">return</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>y<span class="token punctuation">;</span>    x<span class="token operator">+=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//查询排名 </span>  <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>    sum<span class="token operator">+=</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    x<span class="token operator">-=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> o_o<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token comment">//取模 </span><span class="token keyword">long</span> <span class="token keyword">long</span> k_t<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//预处理阶乘 </span>    k_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>k_t<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">%</span>o_o<span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>k_t<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>o_o<span class="token punctuation">)</span><span class="token operator">%</span>o_o<span class="token punctuation">;</span><span class="token comment">//康托展开 </span>    <span class="token function">update</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新排名 </span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 康托展开 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF135C Zero-One</title>
      <link href="/2021/08/10/cf135c/"/>
      <url>/2021/08/10/cf135c/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF135C">传送门</a></p><p><del>码农题</del></p><p>本题的数据范围很大，暴力会<code>TLE</code>，所以是一道结论题，但是细节很多，考虑一定要周全。</p><h3 id="规律"><a href="#规律" class="headerlink" title="规律"></a>规律</h3><p>设 1 的数量 $x_1$，0的数量 $x_0$，问号的数量 $x_x$。</p><h4 id="最优取"><a href="#最优取" class="headerlink" title="最优取"></a>最优取</h4><p>通过题目不难发现，若保持结果尽量大，就会从左向右取 0；若保持结果尽量小，就会从左向右取 1。</p><p>例 1：1010</p><p>最后要剩两位数所以会取掉一个 0 和 1。若取右边的 1，那么最后一定是 10，但若取左边的 1，有可能会剩 01，所以从左向右会更优；若取右边的 0，会使结果变成 01，而取左边的 0，结果会是 10，所以从左向右取 0 更优。</p><p>我们会发现在 $x_1=x_0$ 时，结果由最后一位影响。</p><h4 id="最后一位的影响"><a href="#最后一位的影响" class="headerlink" title="最后一位的影响"></a>最后一位的影响</h4><p>在 $x_1=x_0$ 时，因为最优取是从左向右的，而结束时取得数量是相同的，且最后一位一定不会被取，所以 $x_1=x_0$ 时结果的第二位是原序列的最后一位，结果的第一位是原数列的最后一位的相反的值。</p><h4 id="先手优势"><a href="#先手优势" class="headerlink" title="先手优势"></a>先手优势</h4><p>因为先取 1，所以在判断的时候要特殊注意一下。</p><p>例 2：11100</p><p>例 3：1100</p><p>根据最优取我们发现例 2 例 3 的结果都是 10，这就体现出先手的优势了，所以在判断时要特判 $x_1=x_0+1$ 情况的出现。</p><h4 id="两种数的数量不同"><a href="#两种数的数量不同" class="headerlink" title="两种数的数量不同"></a>两种数的数量不同</h4><p>例 4：1000</p><p>例 5：1110</p><p>我们可以发现如下的结论：当 $x_1&gt;x_0+1$ 是结果必是 11，当 $x_1&lt;x_o$ 时结果必是 00。</p><h4 id="问号的情况"><a href="#问号的情况" class="headerlink" title="问号的情况"></a>问号的情况</h4><p>本题最大的困难就是对问号的处理。问号的存在使判断过程变得复杂，但既然是结论题，一定还是有规律的。</p><p>根据最优取，我们知道当 $x_1=x_0$ 时，结果由最后一位影响，而再根据先手情况，我们才有更全面的结论：当  $x_1=x_0$ 或 $x_1=x_0+1$ 时，结果由最后一位影响。</p><p>而问号的出现，可以用来判断是否有可能出现某种情况，所以我们只要判断是否会出现对应的情况即可。</p><p>不难发现，当 $x_0+x_x&gt;x_1$ 时结果会出现 00 的情况，当 $x_1+x_x-1&gt;x_0$ 时会出现 11 的情况。</p><p>而当 $x_x&gt;=x_0-x_1$ 且 $x_0&gt;=x_1$ 或 $x_x&gt;=x_1-x_0-1$ 且 $x_1&gt;=x_0+1$ 时，问号就可以使 $x_1=x_0$ 或 $x_1=x_0+1$ 的情况出现了。而这时就可以用最后后一位的结论代入即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> x_1<span class="token punctuation">,</span>x_0<span class="token punctuation">,</span>x_x<span class="token punctuation">;</span>string s_s<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string <span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span>mp<span class="token punctuation">;</span><span class="token comment">//用来判断结果是否有出现的可能</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>s_s<span class="token punctuation">;</span><span class="token comment">//读入序列 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s_s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//统计 x_1 x_0 x_x </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span>x_0<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span>x_1<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> x_x<span class="token operator">++</span><span class="token punctuation">;</span>  mp<span class="token punctuation">[</span><span class="token string">"11"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span><span class="token string">"01"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span><span class="token string">"00"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清空 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x_1<span class="token operator">+</span>x_x<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span>x_0<span class="token punctuation">)</span>mp<span class="token punctuation">[</span><span class="token string">"11"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x_0<span class="token operator">+</span>x_x<span class="token operator">&gt;</span>x_1<span class="token punctuation">)</span>mp<span class="token punctuation">[</span><span class="token string">"00"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x_x<span class="token operator">&gt;=</span>x_0<span class="token operator">-</span>x_1<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>x_0<span class="token operator">&gt;=</span>x_1<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>x_x<span class="token operator">&gt;=</span>x_1<span class="token operator">-</span>x_0<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>x_1<span class="token operator">&gt;=</span>x_0<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//问号使 x_1=x_0 和 x_1=x_0+1 的情况出现 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>s_s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span>mp<span class="token punctuation">[</span><span class="token string">"01"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//最后一位判断</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>s_s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span>mp<span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//最后一位判断</span>    <span class="token comment">//最后一位是问号的判断 </span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x_x<span class="token operator">&gt;</span><span class="token punctuation">(</span>x_1<span class="token operator">-</span>x_0<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>x_1<span class="token operator">&gt;=</span>x_0<span class="token operator">||</span>x_x<span class="token operator">&gt;</span><span class="token punctuation">(</span>x_0<span class="token operator">-</span>x_1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>x_0<span class="token operator">&gt;=</span>x_1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>x_x<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span>mp<span class="token punctuation">[</span><span class="token string">"01"</span><span class="token punctuation">]</span><span class="token operator">=</span>mp<span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//当问号为1或没有时，最多只会出现01和10的一种情况 </span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x_1<span class="token operator">&gt;</span>x_0<span class="token punctuation">)</span>mp<span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> mp<span class="token punctuation">[</span><span class="token string">"01"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">//输出 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span><span class="token string">"00"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"00"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span><span class="token string">"01"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"01"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"10"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span><span class="token string">"11"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"11"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1466B Last minute enhancements</title>
      <link href="/2021/08/10/cf1466b/"/>
      <url>/2021/08/10/cf1466b/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1466B">传送门</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给出序列 $x_i$ 单调递增。你可以执行若干次操作(可以不操作)，每次你可以选择一个位置 $1≤i≤n$，并将 $x_i$ 加 1。每个位置<strong>最多只能操作一次</strong>，你需要通过一些操作，使得最后的 $x$ 序列去重后剩余的元素最多</p><hr><h3 id="思路1：顺着遍历"><a href="#思路1：顺着遍历" class="headerlink" title="思路1：顺着遍历"></a>思路1：顺着遍历</h3><p>这道题给的序列很特殊，是一个<strong>单调递增序列</strong>，我们很容易想到维护一个数组，边存边计数，并判断是否出现过，如果出现过那就 +1，在判断是否出现过</p><hr><h3 id="思路2：逆着遍历"><a href="#思路2：逆着遍历" class="headerlink" title="思路2：逆着遍历"></a>思路2：逆着遍历</h3><p>我们也可以直接从后往前遍历，因为最大的数 +1 一定也是最优的</p><p>单调递增的序列倒着遍历就是单调递减序列，边存边计数也是可以过的</p><p><strong>注意</strong>: 1, 1, 2, 2 有连续重复的数的情况</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="思路1实现："><a href="#思路1实现：" class="headerlink" title="思路1实现："></a>思路1实现：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> a_a<span class="token punctuation">[</span><span class="token number">200001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n_n<span class="token punctuation">;</span><span class="token comment">//记录每个读入的数 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空！！！ </span>        <span class="token function">memset</span><span class="token punctuation">(</span>a_a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a_a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n_n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_a<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断原数是否存在 </span>                a_a<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_a<span class="token punctuation">[</span>n_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断原数+1是否存在 </span>                a_a<span class="token punctuation">[</span>n_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路2实现："><a href="#思路2实现：" class="headerlink" title="思路2实现："></a>思路2实现：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a_a<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">,</span>last<span class="token punctuation">;</span><span class="token comment">//last 上一个数的大小 </span><span class="token keyword">bool</span> b<span class="token punctuation">;</span><span class="token comment">//判断是否已经出现过相同的数字并算过 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>a_a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a_a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    last<span class="token operator">=</span><span class="token operator">++</span>a_a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//最大的数+1 </span>    ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//单调递减 </span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>last<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span>last<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断是否符合要求 </span>      <span class="token comment">// (a_a[i]+1)!=last : 处理3,3,4,4的情况 </span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//更新相同的数字是否可加入及时一个+1，一个原数 </span>        a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        last<span class="token operator">=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token operator">||</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>last<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断是否加过原数 </span>        b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>        last<span class="token operator">=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1521A Nastia and Nearly Good Numbers</title>
      <link href="/2021/08/10/cf1521a/"/>
      <url>/2021/08/10/cf1521a/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1521A">传送门</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题目中说有 $x+y=z$，其中有且仅有一个为好数，其他的为接近好数。</p><hr><p>假设 $X$ 或 $Y$ 为好数</p><p>设一个好数为 $Z$，两个个接近好数分别为 $X$ 和 $Y$</p><p>$\because$ 一个好数可以被 $A \times B$ 整除</p><p>$\therefore$ $Z$ 可以表示为 $A \times B \times k_z$</p><p>$\because$ 一个接近好数可以被 $A$ 整除</p><p>$\therefore$ $X$ 可以表示为 $A \times k_x$</p><p>$Y$可以表示为 $A \times k_y$</p><p>$\because$ $X+Y=Z$</p><p>$\therefore$ $A \times k_x+A \times k_y=A \times B \times k_z$</p><p>$\therefore$ $B \times k_x+k_y=k_z$或$k_x+B \times k_y=k_z$</p><p>（跟 $A$ 没关系！！！）</p><p>又$\because$ 相邻的两个整数互质</p><p>$\because$相邻的两个整数互质</p><p>$\therefore$（$B+1$）与 $B$ 互质</p><p>$\therefore$ $1+B=$（$B+1$） 符合题意</p><p><strong>注意：$B=1$时要返回NO！！！</strong></p><p>因为 $1$ 可以被任何数整除，那所有的数都为好数，显然不符合题意。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> t<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %lld\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token operator">*</span>b<span class="token punctuation">,</span>a<span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>记得开<strong>long long</strong>！！！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1538A Stone Game</title>
      <link href="/2021/08/10/cf1538a/"/>
      <url>/2021/08/10/cf1538a/</url>
      
        <content type="html"><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="https://www.luogu.com.cn/problem/CF1538A">传送门</a></p><p>给串有标号石头，摧毁其中的最大值和最小值，每次只能从最左和最优最右摧毁一个，问最少需要摧毁多少个石头。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题是一个模拟题，我们可以先找到最大值和最小值石头的编号，然后从两个石头中选出一个离序列两端最近的石头催毁，再找到另一个石头在新序列中离两端最小的距离进行统计，输出结果即可。</p><p><strong>注意：</strong></p><p>摧毁石头也要计一次数。</p><h3 id="细节优化1"><a href="#细节优化1" class="headerlink" title="细节优化1"></a>细节优化1</h3><p>因为我们不知道最大值和最小值石头的序列的先后顺序，可能要判断许多种情况，会相当麻烦。</p><p>但是，我们思考一下，为什么要找最大值和最小值？</p><p>是为了存他们的坐标，那存了之后，我们眼中就只剩坐标了！所以存坐标后，如果最小值坐标在最大值坐标之后，可以用 <code>swap</code> 将两者替换，这样可以省去许多无谓的判断。</p><h3 id="细节优化2"><a href="#细节优化2" class="headerlink" title="细节优化2"></a>细节优化2</h3><p>再找最大值与最小值时，我们可以不存序列，边读边存，因为我们要的只是坐标。</p><h3 id="细节优化3"><a href="#细节优化3" class="headerlink" title="细节优化3"></a>细节优化3</h3><p>我们可能会碰见如下情况：最大值与最小值离两端的最小距离相同。但这并不影响我们。</p><p>例子：</p><ul><li>$2,1,3,5,6,4$</li><li>$3,2,1,6,5,4$</li></ul><p>我们可以发现他们离两端的距离都为 $1$（第二个是 $2$），但是如果我们可以发现，不管我们先摧毁那个石头，另一个石头在新序列中离两端的最近距离不受影响。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment">//t组数据，n个石头 </span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token comment">//当前石头的数值 </span><span class="token keyword">int</span> m_i<span class="token punctuation">,</span>m_a<span class="token punctuation">;</span><span class="token comment">//最小值与最大值 </span><span class="token keyword">int</span> i_x<span class="token punctuation">,</span>a_x<span class="token punctuation">;</span><span class="token comment">//最小值与最大值坐标 </span><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token comment">//答案 </span><span class="token keyword">int</span> n_i<span class="token punctuation">,</span>n_a<span class="token punctuation">;</span><span class="token comment">//找到两个坐标分别离两端的最短距离 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    m_a<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>a_x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    m_i<span class="token operator">=</span><span class="token number">0xfffffff</span><span class="token punctuation">;</span>i_x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span>m_a<span class="token punctuation">)</span><span class="token punctuation">{</span>        m_a<span class="token operator">=</span>x<span class="token punctuation">;</span>        a_x<span class="token operator">=</span>i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>m_i<span class="token punctuation">)</span><span class="token punctuation">{</span>        m_i<span class="token operator">=</span>x<span class="token punctuation">;</span>        i_x<span class="token operator">=</span>i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i_x<span class="token operator">&gt;</span>a_x<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>i_x<span class="token punctuation">,</span>a_x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若最小值在最大值后面，交换坐标 </span>    n_i<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>i_x<span class="token punctuation">,</span>n<span class="token operator">-</span>i_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_i<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>a_x<span class="token punctuation">,</span>n<span class="token operator">-</span>a_x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到两个坐标分别离两端的最短距离</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n_i<span class="token operator">&lt;</span>m_i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//摧毁离两端最近的石头 </span>      ans<span class="token operator">+=</span>n_i<span class="token punctuation">;</span>      ans<span class="token operator">+=</span><span class="token function">min</span><span class="token punctuation">(</span>a_x<span class="token operator">-</span>i_x<span class="token punctuation">,</span>m_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//摧毁新序列石头 </span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      ans<span class="token operator">+=</span>m_i<span class="token punctuation">;</span>      ans<span class="token operator">+=</span><span class="token function">min</span><span class="token punctuation">(</span>a_x<span class="token operator">-</span>i_x<span class="token punctuation">,</span>n_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//摧毁新序列石头 </span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出结果 </span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1538B Friends and Candies</title>
      <link href="/2021/08/10/cf1538b/"/>
      <url>/2021/08/10/cf1538b/</url>
      
        <content type="html"><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="https://www.luogu.com.cn/problem/CF1538B">传送门</a></p><p>给出一个序列，将它调整，使它最后元素相等，若做不到输出 $-1$，否则输出调整次数。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>因为要做到元素相同，所以将所有<strong>元素之和</strong>除去<strong>元素数量</strong>，就可以知道调整之后每个元素的大小，如果除不尽，就可以输出 $-1$ 了。</p><p>序列：$3,2,2,0,2,3$</p><p>不难发现我们需要调整两次即可完成目的，我们的目的是将糖果多的人的糖果分出去即可，所以我们直接计有多少人的糖果数多于平均糖果数即可。</p><p><strong>注意：</strong></p><p>对于下面的序列，答案为 $1$，因为只需要分配第一个糖果堆即可完成目的。</p><p>序列：$6,1,1,1,1$</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment">//t组数据 n个元素 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span><span class="token number">200001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储糖果堆 </span><span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token punctuation">;</span><span class="token comment">//所有元素的和 </span><span class="token keyword">int</span> n_n<span class="token punctuation">;</span><span class="token comment">//需调整的的糖果堆 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n_n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>a_a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a_a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sum<span class="token operator">+=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">%</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//不能平均分配 </span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sum<span class="token operator">/=</span>n<span class="token punctuation">;</span><span class="token comment">//sum变为元素的平均值 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>sum<span class="token punctuation">)</span>n_n<span class="token operator">++</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>n_n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1538C Number of Pairs</title>
      <link href="/2021/08/10/cf1538c/"/>
      <url>/2021/08/10/cf1538c/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1538C">传送门</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给一个数列和 $l$，$r$ 两个数，问在序列中的两个数的和有多少个在 $[l,r]$ 的区间中。</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先，我们要对这个序列从小到大排序。然后思考，我们从序列最小的数开始遍历，从最大的数开始逆着遍历，两者加和如果小于等于 $r$ 开始计数，这样我们的右边界就处理好了。</p><p>接着是左边界，我们刚刚计数记的是小于等于 $r$ 的数的个数，其中包括了小于 $l$ 的数量，所以我们可以再计一次，计小于 $l$ 的数量，这次计的数要减掉，因为他们不符合题意。</p><hr><h3 id="细节优化"><a href="#细节优化" class="headerlink" title="细节优化"></a>细节优化</h3><p>遍历的时候因为是两个数的加和，在考虑边界的时候要注意 $l&lt;r$，当加和时左右边界相遇时可以直接跳出循环。</p><p><strong>注意：</strong></p><p>在计右边边界时，要加上计的数。在计左边界时，要减去计的数。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment">//t组数据 n个元素 </span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span><span class="token number">200001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储元素 </span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//左右边界 </span><span class="token keyword">void</span> <span class="token function">get_ans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//右边界遍历 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>r<span class="token punctuation">)</span>j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//寻找加和小于r的右边界 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//跳出循环 </span>    ans<span class="token operator">+=</span>j<span class="token operator">-</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左边界遍历 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;=</span>l<span class="token punctuation">)</span>j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    ans<span class="token operator">-=</span>j<span class="token operator">-</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出结果 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a_a<span class="token punctuation">,</span>a_a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从小到大排序 </span>    <span class="token function">get_ans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF731E Funny Game</title>
      <link href="/2021/08/10/cf731e/"/>
      <url>/2021/08/10/cf731e/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF731E">传送门</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于双方的操作后，操作后都是将操作数的和在放回去，所以可以用前缀和先处理了一下数组。</p><p>双方都想自己的分值比对方尽量大，所以第一个人一定拿的是最优。否则，对方拿了剩下的最优，再剩下的就一定不是最优的了。那么，我们可以第一次就使得利益最大化。</p><p>我们可以逆着遍历，不断的求计算的数和前缀和差的最大值（尽量使自己比对方的分值大）最后输出即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">200001</span><span class="token punctuation">;</span><span class="token comment">//注意数据范围 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>n_i<span class="token punctuation">,</span>a_s<span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n_i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入数列 </span>    a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a_a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>n_i<span class="token punctuation">;</span><span class="token comment">//预处理，求前缀和 </span>    <span class="token punctuation">}</span>    a_s<span class="token operator">=</span>a_a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//赋初值，要逆着遍历保证最优情况 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_s<span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意：最少选两个数注意边界 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF762B USB vs. PS/2题解</title>
      <link href="/2021/08/10/cf762b/"/>
      <url>/2021/08/10/cf762b/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF762B">传送门</a></p><p>本题用贪心，注意开 <code>long long</code>。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目给了我们 $3$ 类电脑：用 USB 的，用 PS/2 的，和两种都可用的，现在我们要找出尽量多的鼠标满足电脑，并在其基础上尽量花钱少。</p><p>对于之能用一种接口的电脑，直接从小到大排序，在要求内尽量多的取最小值。</p><p>对于两种接口都能用的电脑，我们直接找剩下的鼠标中最便宜的就行。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>只能用一种接口的电脑，直接将对应的接口所有的鼠标从小到大排序，取即可。</p><p>两种接口都能用的鼠标，可以将剩下的数拿出来再排序，取够就行；或者直接将数组当队列，记住取到哪了，将两个队头不断更新，取最小即可（代码也是这种思路）。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token comment">//三种端口 </span>string t_p<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">;</span><span class="token comment">//临时变量价钱和端口 </span><span class="token keyword">long</span> <span class="token keyword">long</span> m<span class="token punctuation">;</span><span class="token comment">// 鼠标数量 </span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">,</span>a_s<span class="token punctuation">;</span><span class="token comment">//花的钱，买的鼠标的数量 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_a<span class="token punctuation">[</span><span class="token number">300001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b_b<span class="token punctuation">[</span><span class="token number">300001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存两种鼠标 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x_a<span class="token punctuation">,</span>x_b<span class="token punctuation">;</span><span class="token comment">//两种鼠标分别的数量 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token operator">&gt;&gt;</span>c<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//读入 </span>    cin<span class="token operator">&gt;&gt;</span>x<span class="token operator">&gt;&gt;</span>t_p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t_p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'P'</span><span class="token punctuation">)</span>b_b<span class="token punctuation">[</span>x_b<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token keyword">else</span> a_a<span class="token punctuation">[</span>x_a<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//排序从小到大 </span>  <span class="token function">sort</span><span class="token punctuation">(</span>a_a<span class="token punctuation">,</span>a_a<span class="token operator">+</span>x_a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sort</span><span class="token punctuation">(</span>b_b<span class="token punctuation">,</span>b_b<span class="token operator">+</span>x_b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//取第一种端口鼠标 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    ans<span class="token operator">+=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//取第二种端口鼠标</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    ans<span class="token operator">+=</span>b_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>c<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//取两种端口鼠标</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//鼠标用完了 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&lt;</span>b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">+=</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token operator">++</span><span class="token punctuation">,</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//两种都还有，取小的队头 </span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">+=</span>b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">++</span><span class="token punctuation">,</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//只剩第二种了 </span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">+=</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token operator">++</span><span class="token punctuation">,</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//只剩第一种了 </span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>a_s<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出结果 </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1277 拼字游戏题解</title>
      <link href="/2021/08/10/p1277/"/>
      <url>/2021/08/10/p1277/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://www.luogu.com.cn/problem/P1277">传送门</a></p><p>有一个未知的 $4\times4$ 的拼盘 $M$，它的每个元素都是正整数。给出 $4$ 行元素的总和 $4$ 列元素的总和以及两条对角线元素总和。另外还给出了拼盘中任意 $4$ 个位置的元素值，它们的位置在输入文件中给定</p><p>编写一个程序求出拼盘中另外 $12$ 个位置的正整数的值，要求这些元素的行之和，列之和以及对角线之和与输入文件中给定的值相一致</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先题目给了我们<strong>每列每排</strong>和<strong>对角线</strong>的数的和，以及 $4$ 个<strong>数的数值</strong>，而且任何行对角线或列<strong>之和不会超过 $300$</strong>，另外给定的输入文件<strong>总是存在解决方案</strong></p><p>假设题目给的数为 $sum_i$（从下标 $0$ 开始计数），下图一种颜色代表一个 $sum_i$ 的所管辖的数，也是约束情况合理的条件<br><img src="https://z3.ax1x.com/2021/09/15/4ZscPx.png" alt="手绘要求"><br>（样例）</p><p><strong>目标：我们要找到更多的约束条件</strong>（因为约束越多，尝试的情况越少）</p><p>设 $S = sum_0+sum_1+sum_2+sum_3$（即所有数值和）</p><p>$\because$</p><script type="math/tex; mode=display">\left\{\begin{aligned}(0,0)+(0,1)+(0,2)+(0,3) = sum_0 \\(0,0)+(0,1)+(0,2)+(0,3) = sum_3 \\(0,1)+(1,1)+(2,1)+(3,1) = sum_5 \\(0,2)+(1,2)+(2,2)+(3,2) = sum_6 \\(0,0)+(1,1)+(2,2)+(3,3) = sum_8 \\(0,3)+(1,2)+(2,1)+(3,0) = sum_9 \\\end{aligned}\right.</script><p>$\therefore$ $\frac{(sum_0+sum_3+sum_5+sum_6+sum_8+sum_9)}{2}=S-(1,0)-(2,0)-(1,3)-(2,3)$</p><p>$S_1=(1,0)+(2,0)+(1,3)+(2,3)$（下图中紫色所经过的点的和）</p><p>$S_2=(0,1)+(0,2)+(3,1)+(3,2)=S-(sum_8+sum_9)-S_1$（下图中橙色所经过的点的和）</p><p>$S_3=(0,0)+(0,3)+(3,0)+(3,3)=(sum_0+sum_3)-S_2$（即四个角的和）</p><p>$S_4=S-S_1-S_2-S_3=(1,1)+(1,2)+(2,1)+(2,2)$（即内部四数之和）</p><p><img src="https://z3.ax1x.com/2021/09/15/4ZsRxO.png" alt="点权"></p><hr><p>我们可以开始尝试一下了</p><p>我们先用样例的数据，为了方便我们用 * 表示已知数，? 表示未知，$1$ 至 $n$ 表示我们自己填的数</p><p><strong>初始：</strong></p><p>$?,*,?,?$</p><p>$?,?,?,*$</p><p>$?,?,*,?$</p><p>$*,?,?,?$</p><hr><p><strong>填入第一个数</strong></p><p>$1,*,?,?$</p><p>$?,?,?,*$</p><p>$?,?,*,?$</p><p>$*,?,?,?$</p><hr><p><strong>填入第二个数</strong></p><p>$1,<em>,2,</em>$</p><p>$?,?,?,*$</p><p>$?,?,*,?$</p><p>$*,?,?,?$</p><hr><p>$1,<em>,2,</em>$</p><p>$?,?,?,*$</p><p>$?,?,*,?$</p><p>$<em>,?,?,</em>$（我们有 $S_3$）</p><hr><p>$1,<em>,2,</em>$</p><p>$?,<em>,?,</em>$</p><p>$?,?,<em>,</em>$</p><p>$<em>,?,?,</em>$</p><hr><p><strong>填入第三个数</strong></p><p>$1,<em>,2,</em>$</p><p>$3,<em>,</em>,*$</p><p>$<em>,</em>,<em>,</em>$</p><p>$<em>,</em>,<em>,</em>$</p><hr><p>正是因为我们的约束条件找得多，所以我们需要填的数次数少，便利的次数就会减少（填的数只需要 $3$ 或 $4$ 个就可以得出答案！）</p><p><strong>而剩下的就可以移交给随机数来处理了</strong></p><p>通过 $sum_i$ 的范围限制，不断尝试即可。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2651 添加括号III</title>
      <link href="/2021/08/10/p2651/"/>
      <url>/2021/08/10/p2651/</url>
      
        <content type="html"><![CDATA[<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><a href="https://www.luogu.com.cn/problem/P2651">传送门</a></p><p>不难发现两个连续分数线就可以将奇数位的数乘在一起数，偶数位的数乘在一起，这是在没有括号的情况下。而有括号的话括号里的计数<strong>也从括号前计数</strong>，但括号后的计数<strong>不计括号里的数</strong></p><p>例子：$a_1\ /a_2\ /a_3\ /a_4$</p><p>加括号：$a_1/(a_2/a_3)\ /a_4$</p><p>变为：$a_1\times a_3\times a_4 \ /a_2$</p><p>我们可以发现括号里的计数<strong>也从括号前计数</strong>也就是说 $a_2$是第二位（偶数位），$a_3$是第三位（奇数位），所以 $a_3$要乘在上面。而括号后的计数<strong>不计括号里的数</strong>，就是说括号里的东西是第二位，$a_4$是第三位，所以 $a_4$也要乘在上面</p><h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><p>当我们的括号如下使用时表达式可以转换成 $\frac{a_1\times a_3\times …\times a_n}{a_2}$</p><p>$a_1\ /((((a_2\ /a_3)\ /a_4)\ /a_5)\ /…)\ /a_n$</p><p>接着我们发现数据很大，所以不用高精存储不了，但是我们只需要证明结果是<strong>整数</strong>即可，所以我们可以变读变求最大公约数 $gcd(a_i,a_2)$ 再 $\frac{a_2}{gcd(a_i,a_2)}$，最后如果 $a_2=1$ 那么就说明能约分（即整除）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> a_1<span class="token punctuation">,</span>a_2<span class="token punctuation">,</span>a_x<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//不断约分，将分子与分母约分 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方便gcd，大的数除小的数 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>a_1<span class="token punctuation">,</span><span class="token operator">&amp;</span>a_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> g_c<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>a_1<span class="token punctuation">,</span>a_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    a_2<span class="token operator">/=</span>g_c<span class="token punctuation">;</span>    n<span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//a_1,a_2,单独读处理，后面直接约分就行 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a_x<span class="token punctuation">)</span><span class="token punctuation">;</span>      g_c<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>a_x<span class="token punctuation">,</span>a_2<span class="token punctuation">)</span><span class="token punctuation">;</span>      a_2<span class="token operator">/=</span>g_c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a_2<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//可以整除 </span>    <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//不可以 </span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA147 Dollars</title>
      <link href="/2021/08/10/uva147/"/>
      <url>/2021/08/10/uva147/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/UVA147">传送门</a></p><p>这是一道背包题。</p><p>首先我们可以发现数据有小数但范围很小，所以我们可以将其直接乘为整数。又发现最小的钱的价值为 $5$，且其他的价值都是他的倍数，所以可以再整体除去这个数，同时缩小数据范围，避免不必要的空间浪费。</p><p>由于数据范围非常小，我们可以预处理出所有情况，输出即可。同时这道题细节也要注意。</p><h3 id="细节一"><a href="#细节一" class="headerlink" title="细节一"></a>细节一</h3><p>要将读入的小数先数出来并且保留两位小数，在宽度为 $6$ 的字段中右对齐。下一行是可能组成该组数据的方法数，在宽度为 $17$ 的字段中右对齐。所以可以用 <code>printf</code> 输出。</p><h3 id="细节二"><a href="#细节二" class="headerlink" title="细节二"></a>细节二</h3><p>注意给存结果的数组赋初值。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">double</span> a<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> a_a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//全部除5 </span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">[</span><span class="token number">6001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//最大值范围也除5，节省空间 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//赋初值 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//共11种金钱面额 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">6000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>ans<span class="token punctuation">[</span>j<span class="token operator">-</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//预处理出每种情况 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%6.2lf"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意输出格式 </span>    m<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//a*100/5=a*20</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%17lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意输出格式</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA119 Greedy Gift Givers</title>
      <link href="/2021/08/10/uva119/"/>
      <url>/2021/08/10/uva119/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/UVA119">传送门</a></p><p>这道题可以用模拟来做，不断更新每个人的钱从而求得最后每个人剩的钱，输出即可。</p><p><strong>值得注意的是，此题的输出格式判定比较严格。要多注意一些细节。</strong></p><hr><h3 id="细节1"><a href="#细节1" class="headerlink" title="细节1"></a>细节1</h3><p>每个给钱人都会将尽可能多的钱给出去，但只会给出整数，而剩下无法在平均分的钱会留在自己手中。</p><h3 id="细节2"><a href="#细节2" class="headerlink" title="细节2"></a>细节2</h3><p>有可能会出现有人想把钱分给零个人的情况，所以要特判一下，不能将零作为除数。</p><h3 id="细节3"><a href="#细节3" class="headerlink" title="细节3"></a>细节3</h3><p>每个组的输出应该用空行与其他组分开。这个说明在样例中没有体现，必须要注意一下，这道题的格式要求严格。</p><p>如果是在每组结束后再输出一个换行来满足说明，那最后结束的时候会有换两行，不符合格式会判错。代码中有这个问题的解决方法。这个问题的出现是因为，本该要再读入下一组数据，但此时已经没有数据了，所以程序终止，却保留了要读入的空行。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//n个人 </span>string n_n<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//n个名字 </span><span class="token keyword">long</span> <span class="token keyword">long</span> m_m<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//每个人有的钱 </span>string n_a<span class="token punctuation">;</span><span class="token comment">//花钱的那个人 </span><span class="token keyword">int</span> s_m<span class="token punctuation">,</span>s_n<span class="token punctuation">;</span><span class="token comment">//花钱的数值，分给几个人 </span><span class="token keyword">int</span> t_m<span class="token punctuation">;</span><span class="token comment">//每个人被分给钱的数值 </span>string g_n<span class="token punctuation">;</span><span class="token comment">//每次被分给钱的人的名字 </span>map<span class="token operator">&lt;</span>string <span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span>mp<span class="token punctuation">;</span><span class="token comment">//存人的钱</span><span class="token keyword">bool</span> b_b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>b_b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//格式问题，规范输出 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>n_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入人名，也同样是输出顺序 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cin<span class="token operator">&gt;&gt;</span>n_a<span class="token operator">&gt;&gt;</span>s_m<span class="token operator">&gt;&gt;</span>s_n<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s_n<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//不能除零 </span>      t_m<span class="token operator">=</span>s_m<span class="token operator">/</span>s_n<span class="token punctuation">;</span>      mp<span class="token punctuation">[</span>n_a<span class="token punctuation">]</span><span class="token operator">-=</span>t_m<span class="token operator">*</span>s_n<span class="token punctuation">;</span><span class="token comment">//减去分出钱的数量 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s_n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>g_n<span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>g_n<span class="token punctuation">]</span><span class="token operator">+=</span>t_m<span class="token punctuation">;</span><span class="token comment">//得到钱的人要加上 </span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>n_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>mp<span class="token punctuation">[</span>n_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      mp<span class="token punctuation">[</span>n_n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2021/08/10/pai-xu/"/>
      <url>/2021/08/10/pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>通过比较两个相邻元素大小，不断交换位置，最后使得整序列有序。效率较低，但可以优化。</p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>每个元素从前向后扫，到自己截止，若有元素比自己大，则插到其前面。</p><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>假设有一组｛$9, 1, 2, 5, 7, 4, 8, 6, 3, 5$｝无序序列。</p><p>第一趟排序： </p><p>$\frac{10}{2}=5$，即相隔距离为 $5$ 的元素组成一组，可以分为 $5$ 组。接下来，按照直接插入排序的方法对每个组进行排序。</p><p>第二趟排序：</p><p>将上次的长度缩小一半，即 $\frac{5}{2}$ (取整数)。这样每相隔距离为 $2$ 的元素组成一组，可以分为 $2$ 组。按照直接插入排序的方法对每个组进行排序。</p><p>第三趟排序：</p><p>再缩小一半，即 $\frac{2}{2}=1$。 这样相隔距离为 $1$ 的元素组成一组，即只有一组。按照直接插入排序的方法对每个组进行排序。</p><p>此时，排序已经结束。</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>每回选择最小的数换到当前位置。</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>从元素之中挑一个基准，所有比他小的排到左边，比他大的排到右边。</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>将整个序列拆成子序列，子序列排成有序后，合并子序列时，再将两个子序列排序，排序时有技巧。</p><p>例子：</p><p>子序列 $1$：$1,3,4$</p><p>子序列 $2$：$2,7,8$</p><p>第一步：比较第一位（$1,2$）比较</p><p>合并序列：$1$</p><p>第二步：大的数比较小的数的后一位（$2,3$）比较</p><p>合并序列：$1,2$</p><p>第三步：重复第二步，比较（$3,7$）</p><p>合并序列：$1,2,3$</p><p>第四步：重复第二步，比较（$4,7$）</p><p>合并序列：$1,2,3,4$</p><p>最后，一个序列已经比较完了，另一个序列剩下的直接补到序列尾。</p><p>合并序列：$1,2,3,4,7,8$</p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>本质是一颗二叉树。</p><p>先将所有的数建一棵二叉树。</p><p>每次将比对父节点和儿子的值，值大的向上传。</p><p>此时根节点至最大。</p><p>最大值入数组，与树的子节点交换后删除此节点。</p><p>不断出最大值，最后数组倒序。</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>将所有的数直接存入相应的下标，最后按下标从小到大输出。</p><p>存入时要计数，输出时，输出下标是记得数的个数。</p><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p>先将最大值除去数组长度 $-1$ 后，将所有的数值同样除去数组长度 $-1$ 后，按计数排序存入数组。</p><p>每一个数组的下标用链表存储数据，数据存入时，按链表顺序与值比对大小，使之有序。</p><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>将数字按位排序，例子：</p><p>$12,43,23,45,61,29,57,49,92$</p><p>第一步：将个位排序</p><p>$61,12,92,43,23,45,57,29,49$</p><p>第二步：将十位排序</p><p>$12,23,29,43,45,49,57,61,92$</p><p>若还有更高数位，依次排序即可。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新随机数生成器（c++11）-mt19937</title>
      <link href="/2021/08/10/xin-sui-ji-shu-sheng-cheng-qi/"/>
      <url>/2021/08/10/xin-sui-ji-shu-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="mt19937"><a href="#mt19937" class="headerlink" title="mt19937"></a>mt19937</h2><p>这是 <code>c++11</code> 的新的随机数生成器，是<code>rand（）</code>远远不能相比的</p><h3 id="rand（）"><a href="#rand（）" class="headerlink" title="rand（）"></a>rand（）</h3><p>这个随机数本身有一定限制，生成的随机数范围貌似在 （$0,32767$）（<code>dev-c++</code>）中，这有时根本不够用，有时还要手动 $\times 10000……$ 但这样也会有局限性，因为数据的随机性被破坏了</p><h3 id="所以聪明的人类发明了新的随机数生成器：："><a href="#所以聪明的人类发明了新的随机数生成器：：" class="headerlink" title="所以聪明的人类发明了新的随机数生成器：："></a>所以聪明的人类发明了新的随机数生成器：：</h3><h1 id="mt19937-1"><a href="#mt19937-1" class="headerlink" title="mt19937"></a>mt19937</h1><p><del>（密集恐惧症者自动跳过。。。）</del></p><p>Mersenne Twister 算法译为马特赛特旋转演算法，是伪随机数发生器之一，其主要作用是生成伪随机数。此算法是 Makoto Matsumoto （松本）和 Takuji Nishimura （西村）于 $1997$ 年开发的，基于有限二进制字段上的矩阵线性再生。可以快速产生高质量的伪随机数，修正了古老随机数产生算法的很多缺陷。Mersenne Twister 这个名字来自周期长度通常取 Mersenne 质数这样一个事实。常见的有两个变种 Mersenne Twister MT19937 和 Mersenne Twister <code>MT19937-64</code>。<br>Mersenne Twister 算法的原理：Mersenne Twister 算法是利用线性反馈移位寄存器 ( LFSR ) 产生随机数的，LFSR 的反馈函数是寄存器中某些位的简单异或，这些位也称之为抽头序列。一个 $n$ 位的 LFSR 能够在重复之前产生 $2^n-1$ 位长的伪随机序列。只有具有一定抽头序列的LFSR才能通过所有 $2^n-1$ 个内部状态，产生 $2^n - 1$ 位长的伪随机序列，这个输出的序列就称之为 $m$ 序列。为了使 LFSR 成为最大周期的 LFSR，由抽头序列加上常数 $1$ 形成的多项式必须是本原多项式。一个 $n$ 阶本原多项式是不可约多项式，它能整除 $x^{(2\times n-1)}+1$ 而不能整除 $x^d+1$，其中 $d$ 能整除$2^n-1$。例如 $(32,7,5,3,2,1,0)$ 是指本原多项式 $x^{32}+x^7+x^5+x^3+x^2+x+1$，把它转化为最大周期LFSR就是在LFSR的第 $32,7,5,2,1$ 位抽头。利用上述两种方法产生周期为 $m$ 的伪随机序列后，只需要将产生的伪随机序列除以序列的周期，就可以得到 $(0,1)$ 上均匀分布的伪随机序列了。<br>Mersenne Twister 有以下优点：随机性好，在计算机上容易实现，占用内存较少 ( <code>mt19937</code> 的 <code>C</code> 程式码执行仅需 $624$ 个字的工作区域 )，与其它已使用的伪随机数发生器相比，产生随机数的速度快、周期长，可达到 $2^{19937}-1$，且具有 $623$ 维均匀分布的性质，对于一般的应用来说，足够大了，序列关联比较小，能通过很多随机性测试。</p><p><strong>$2^{19937}-1$</strong></p><h2 id="实战检测"><a href="#实战检测" class="headerlink" title="实战检测"></a>实战检测</h2><h3 id="mt19937模板"><a href="#mt19937模板" class="headerlink" title="mt19937模板"></a>mt19937模板</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  mt19937 <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>//数据生成<br></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mo<span class="token operator">=</span><span class="token number">31331</span><span class="token punctuation">;</span><span class="token comment">//由于rand（）的区间过小但又要保证公平的数据范围所以模数较小</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"11.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mt19937 <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>mo<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>mo<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>//检验<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> u<span class="token operator">=</span><span class="token number">33332</span><span class="token punctuation">;</span><span class="token keyword">bool</span> a_a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>b_b<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> s_a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>s_b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//比对两种随机数生成中有多少次重复生成</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"11.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"22.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>s_a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>s_b<span class="token operator">++</span><span class="token punctuation">;</span>    a_a<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    b_b<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>s_a<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>s_b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>下面放几组实测数据<p></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">69950 7010069960 7003969989 7014969928 7010270010 70134<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到即使 <code>mt19937</code> 的大区间优势没了，生成的随机数重复次数也比 <code>rand（）</code> 少，由此可见<code>mt19937</code> 的强大性能</p><h4 id="值得一提的是如果数据生成很多例如10000000，他们的输出会相同或非常接近"><a href="#值得一提的是如果数据生成很多例如10000000，他们的输出会相同或非常接近" class="headerlink" title="值得一提的是如果数据生成很多例如10000000，他们的输出会相同或非常接近"></a>值得一提的是如果数据生成很多例如10000000，他们的输出会相同或非常接近</h4><p><code>mt19937</code> 在 <code>c++11</code> 后才能使用，他的种种性能还需尝试</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随机数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凸包</title>
      <link href="/2021/08/10/tu-bao/"/>
      <url>/2021/08/10/tu-bao/</url>
      
        <content type="html"><![CDATA[<h3 id="前置知识——叉积"><a href="#前置知识——叉积" class="headerlink" title="前置知识——叉积"></a>前置知识——叉积</h3><p>在平面中我们为了度量一条直线的倾斜状态，为引入倾斜角这个概念。而通过在直角坐标系中建立 $\tan a=k$，我们实现了将几何关系和代数关系的衔接，这其实也是用计算机解决几何问题的一个核心，计算机做的是数值运算，因此你需要做的就是把几何关系用代数关系表达出来。而在空间中，为了表示一个平面相对空间直角坐标系的倾斜程度，我们利用一个垂直该平面的法向量来度量(因为这转化成了描述直线倾斜程度的问题)。</p><h4 id="求解三角形（平行四边形）面积"><a href="#求解三角形（平行四边形）面积" class="headerlink" title="求解三角形（平行四边形）面积"></a>求解三角形（平行四边形）面积</h4><p>$\lvert \vec{a}\times \vec{b}\rvert  =\lvert \vec{a}\rvert\times \lvert\vec{b}\rvert\times\sin \Theta$</p><p>$S_{\Delta ABC}=\frac{1}{2}\vec{\lvert AB\rvert }\vec{\lvert AC\rvert }\sin A = \frac{1}{2}\lvert \vec{AB}\times \vec{AC}\rvert$</p><h4 id="判断-某一点在直线左右侧"><a href="#判断-某一点在直线左右侧" class="headerlink" title="判断 某一点在直线左右侧"></a>判断 某一点在直线左右侧</h4><ul><li>若$a\times b&gt;0$ , 则 $a$ 在 $b$ 的顺时针方向。</li><li>若$a\times b&lt;0$ , 则 $a$ 在 $b$ 的逆时针方向。 </li><li>若$a\times b=0$ , 则 $a$ 与 $b$ 共线，但可能同向也可能反向。 </li></ul><h3 id="凸包"><a href="#凸包" class="headerlink" title="凸包"></a>凸包</h3><h4 id="定义为："><a href="#定义为：" class="headerlink" title="定义为："></a>定义为：</h4><p>平面的一个子集 $S$ 被称为是“凸”的，当且仅当对于任意两点 $p$，$s ∈S$，线段 $ps$ 都完全属于 $S$。（平面凸包定义）<br><img src="https://img-blog.csdn.net/20180204141337435" alt="集合"></p><p><a href="https://www.luogu.com.cn/problem/P2742">P2742 USACO5.1 圈奶牛Fencing the Cows /【模板】二维凸包</a><br></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">5000001</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">double</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> cn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> fu<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">double</span> x<span class="token punctuation">;</span>  <span class="token keyword">double</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>dian<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">==</span>b<span class="token punctuation">.</span>x<span class="token operator">?</span>a<span class="token punctuation">.</span>y<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>y<span class="token operator">:</span>a<span class="token punctuation">.</span>x<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span>po <span class="token function">n_e</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span><span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token operator">-</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>y<span class="token operator">-</span>a<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">cha</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">*</span>b<span class="token punctuation">.</span>y<span class="token operator">-</span>a<span class="token punctuation">.</span>y<span class="token operator">*</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">sq</span><span class="token punctuation">(</span>po a<span class="token punctuation">,</span>po b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">get_tb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  fu<span class="token punctuation">[</span><span class="token operator">++</span>cn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>fu<span class="token punctuation">[</span><span class="token operator">++</span>cn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    po u<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    po v<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">cha</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>cn<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>      cn<span class="token operator">--</span><span class="token punctuation">;</span>      u<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fu<span class="token punctuation">[</span><span class="token operator">++</span>cn<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> end<span class="token operator">=</span>n<span class="token punctuation">;</span>  fu<span class="token punctuation">[</span><span class="token operator">++</span>cn<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>fu<span class="token punctuation">[</span><span class="token operator">++</span>cn<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    po u<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    po v<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">cha</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>cn<span class="token operator">==</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>      cn<span class="token operator">--</span><span class="token punctuation">;</span>      u<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v<span class="token operator">=</span><span class="token function">n_e</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>cn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fu<span class="token punctuation">[</span><span class="token operator">++</span>cn<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>dian<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>dian<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sort</span><span class="token punctuation">(</span>dian<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dian<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">get_tb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>ans<span class="token operator">+=</span><span class="token function">sq</span><span class="token punctuation">(</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dian<span class="token punctuation">[</span>fu<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 平面几何 </tag>
            
            <tag> 凸包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强联通分量</title>
      <link href="/2021/08/10/qiang-lian-tong-fen-liang/"/>
      <url>/2021/08/10/qiang-lian-tong-fen-liang/</url>
      
        <content type="html"><![CDATA[<h3 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h3><p>如果两个顶点可以相互通达，则称两个顶点强连通(strongly connected)。如果有向图G的每两个顶点都强连通，称 G 是一个强连通图。有向图的极大强连通子图，称为强连通分量(strongly connected components)。</p><p>常用于统计环的数量，割点割边。</p><p><a href="https://www.luogu.com.cn/problem/P3388">P3388 【模板】割点（割顶）</a></p><h3 id="割点（割顶）"><a href="#割点（割顶）" class="headerlink" title="割点（割顶）"></a>割点（割顶）</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&gt;=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v<span class="token punctuation">;</span>  <span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x_h<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存边</span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_h<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_h<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> d_f<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x_x<span class="token punctuation">;</span><span class="token comment">//d_f 时间戳 l_w 可以到达最小的时间戳（判环）</span><span class="token keyword">int</span> c_c<span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>top<span class="token punctuation">,</span>b_l<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_d<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r_r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">t_j</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_x<span class="token punctuation">;</span>  <span class="token keyword">int</span> s_t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">t_j</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&gt;=</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断割点</span>        s_t<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s_t<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token operator">||</span>r_r<span class="token operator">!=</span>k<span class="token punctuation">)</span>g_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> a_s<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">r_d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    u<span class="token operator">=</span><span class="token function">r_d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token function">r_d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">==</span>v<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a_d</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>r_r<span class="token operator">=</span>i<span class="token punctuation">,</span><span class="token function">t_j</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否遍历过</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>g_d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>a_s<span class="token operator">++</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>a_s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>g_d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://www.luogu.com.cn/problem/P1656">P1656 炸铁路</a></p><h3 id="割边"><a href="#割边" class="headerlink" title="割边"></a>割边</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v<span class="token punctuation">;</span>  <span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存边</span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> l_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>d_f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_x<span class="token punctuation">,</span>f_f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">pp</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span>a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_a<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>pp a<span class="token punctuation">,</span>pp b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>l<span class="token operator">==</span>b<span class="token punctuation">.</span>l<span class="token operator">?</span>a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token operator">:</span>a<span class="token punctuation">.</span>l<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">t_j</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_x<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>v<span class="token operator">!=</span>f_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若果是祖先，割边就没用了</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      f_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//建立祖先关系</span>      <span class="token function">t_j</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&gt;</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>a_s<span class="token punctuation">[</span><span class="token operator">++</span>x_a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>k<span class="token punctuation">,</span>v<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//割边判断条件</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">t_j</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每个店都要遍历到，有时间戳</span>  <span class="token function">sort</span><span class="token punctuation">(</span>a_s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a_s<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>x_a<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据题目要求排序</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x_a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://www.luogu.com.cn/problem/P3387">P3387 【模板】缩点</a></p><h3 id="缩点"><a href="#缩点" class="headerlink" title="缩点"></a>缩点</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> p_t<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">po</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v<span class="token punctuation">;</span>  <span class="token keyword">int</span> n_t<span class="token punctuation">;</span><span class="token punctuation">}</span>p_p<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h_d<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_p<span class="token punctuation">,</span>i_a<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>i_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>  p_p<span class="token punctuation">[</span><span class="token operator">++</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">;</span>  p_p<span class="token punctuation">[</span>x_p<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token operator">=</span>h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>  h_d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>x_p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> d_f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x_x<span class="token punctuation">,</span>c_c<span class="token punctuation">,</span>t_p<span class="token punctuation">,</span>s_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>b_b<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s_m<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>n_w<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">t_j</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>x_x<span class="token punctuation">;</span><span class="token comment">//初始化时间戳</span>  s_s<span class="token punctuation">[</span><span class="token operator">++</span>t_p<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//存环中的点</span>  b_b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//是否遍历过</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">t_j</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b_b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>l_w<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>l_w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>d_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">++</span>c_c<span class="token punctuation">;</span><span class="token comment">//新节点下标</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>s_s<span class="token punctuation">[</span>t_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断是否遍历完这个环</span>      n_w<span class="token punctuation">[</span>s_s<span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>c_c<span class="token punctuation">;</span><span class="token comment">//赋新下标</span>      s_m<span class="token punctuation">[</span>c_c<span class="token punctuation">]</span><span class="token operator">+=</span>p_t<span class="token punctuation">[</span>s_s<span class="token punctuation">[</span>t_p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存环节点的值的和（根据题目要求）</span>      b_b<span class="token punctuation">[</span>s_s<span class="token punctuation">[</span>t_p<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> f_f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f_i</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>  f_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>s_m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> m_a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h_d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>n_t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找最大值</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>p_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">f_i</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m_a<span class="token punctuation">,</span>f_f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新</span>  <span class="token punctuation">}</span>  f_f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>m_a<span class="token punctuation">;</span><span class="token comment">//累加答案</span><span class="token punctuation">}</span><span class="token keyword">int</span> a_s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>p_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存初始边</span>    i_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    i_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a_d</span><span class="token punctuation">(</span>i_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d_f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">t_j</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>p_p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> p_p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空从新存新边</span>  <span class="token function">memset</span><span class="token punctuation">(</span>h_d<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> h_d<span class="token punctuation">)</span><span class="token punctuation">;</span>  x_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//不属于同一个环的连边（新点相当于原来的一个环）</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n_w<span class="token punctuation">[</span>i_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>n_w<span class="token punctuation">[</span>i_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">a_d</span><span class="token punctuation">(</span>n_w<span class="token punctuation">[</span>i_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n_w<span class="token punctuation">[</span>i_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>c_c<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//便利每个新下标</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f_f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">f_i</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      a_s<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f_f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a_s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新更优解</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>a_s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 强联通分量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀数组</title>
      <link href="/2021/08/10/hou-zhui-shu-zu/"/>
      <url>/2021/08/10/hou-zhui-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h1><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">abaababc1:abaababc2:baababc3:aababc4:ababc5:babc6:abc7:bc8:csa<span class="token punctuation">[</span>i<span class="token punctuation">]</span>:1: 3:aababb2: 1:abaababc3: 4:ababc4: 6:abc5: 2:baababc6: 5:babc7: 7:bc8: 8:c由字典序排列rank:2 5 1 3 6 4 7 8第i个数排第几height:0 1 3 2 0 2 1 0第i和i-1个数的最长公共前缀<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.luogu.com.cn/problem/P3809#submit">P3809 【模板】后缀排序</a></p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1000001</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>sa<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>sa<span class="token punctuation">[</span><span class="token operator">--</span>c<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>y<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span>k<span class="token punctuation">)</span>y<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>k<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>sa<span class="token punctuation">[</span><span class="token operator">--</span>c<span class="token punctuation">[</span>x<span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token punctuation">[</span>sa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      x<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">&gt;</span>n<span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>y<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">&gt;</span>n<span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>y<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">&gt;</span>n<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    m<span class="token operator">=</span>p<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> rank<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">get_height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>rank<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>  <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>height<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>k<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span>sa<span class="token punctuation">[</span>rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">+</span>k<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>j<span class="token operator">+</span>k<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>k<span class="token operator">++</span><span class="token punctuation">;</span>    height<span class="token punctuation">[</span>rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  n<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">SA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">get_height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*sadgasjdggasdgjaasdhshkaishda29 16 2 24 11 17 5 28 3 8 13 19 10 4 9 14 27 22 20 25 15 7 23 1 12 18 26 21 624 3 9 14 7 29 22 10 15 13 5 25 11 16 21 2 6 26 12 19 28 18 23 4 20 27 17 8 10 1 1 1 1 3 2 0 1 2 2 1 0 3 1 1 0 1 1 0 0 1 0 0 1 2 1 2 1*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>lcp[i,j]=lcp[j,i]</code></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 后缀数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF33A What is for dinner?</title>
      <link href="/2021/08/09/cf33a/"/>
      <url>/2021/08/09/cf33a/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF33A">传送门</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>鲨鱼有 $n$ 颗牙齿，分别分布于 $m$ 行上，第 $i$ 颗牙齿有一个初始活力值 $c_i$。鲨鱼有 $k$ 个食物想要吃，但是，每吃掉一个食物就要消耗某一排牙齿的每一颗牙齿各 $1$ 点活力，而鲨鱼必须保证每个牙齿的剩余活力不能到负数。试求鲨鱼最多能吃到的食物个数。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>不难发现每排最小活力值的牙齿是整排牙齿能吃的食物的数量，用 <code>ans</code> 累加的最多吃的食物的量。</p><h3 id="求最小值"><a href="#求最小值" class="headerlink" title="求最小值"></a>求最小值</h3><p>将每排牙床赋尽量大的值，通过比较找到最小值</p><h3 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h3><p>我们只讨论了鲨鱼牙齿不好的情况，如果牙齿能吃的食物量大于总食物量，直接输出食物的量即可。</p><p>若存在空牙排，就要判断是否加上当前的最小活力，因为牙床排为空时，活力值为我们赋的的最大值。要舍去这种情况，所以定义一个 <code>bool</code>类型的数组，判断牙床是否存在牙。</p><h2 id="代码奉上"><a href="#代码奉上" class="headerlink" title="代码奉上"></a>代码奉上</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span><span class="token comment">//cin,cout输入输出 </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;limits&gt;</span><span class="token comment">//用于检测整型数据数据类型的值的范围</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span><span class="token comment">//包含min </span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token comment">//鲨鱼有n颗牙齿，分别分布于m行上，鲨鱼有k个食物想要吃。 </span><span class="token keyword">int</span> teeth<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//每排最小活力值 </span><span class="token keyword">bool</span> have<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//是否存在当前排的牙齿 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>  <span class="token comment">//要用比较来找到活力值最小的牙齿，让初始值尽量大 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    teeth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span><span class="token comment">//INT_MAX为int的最大值 在 limits 头文件中 </span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历牙 </span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token comment">//x，c分别表示这个牙齿所在的行数和初始活力值。</span>    cin<span class="token operator">&gt;&gt;</span>x<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span>    teeth<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>teeth<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找最小活力牙齿 </span>    have<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//当前排存在牙齿 </span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历排 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>have<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//不存在牙齿直接跳过 </span>    ans<span class="token operator">+=</span>teeth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//计算吃最多的食物的数量 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">&gt;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//超过食物上限，只能吃到最多的食物数 </span>      ans<span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment">//更新最多的食物量 </span>      <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//跳出 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span><span class="token comment">//输出答案 </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完结撒花</span>  <span class="token comment">//@^-^@</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1043 数字游戏</title>
      <link href="/2021/08/09/p1043/"/>
      <url>/2021/08/09/p1043/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1043">传送门</a></p><h3 id="一道dp"><a href="#一道dp" class="headerlink" title="一道dp"></a>一道dp</h3><p>首先分析发现，给出的是一个环，而要分割这个环是相当麻烦的事情，这里可以暴力枚举一下，枚举开头的情况，再将所有情况算出来的结果进行比对，最终找出最大值的最小值。</p><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p>这里可以使用前缀和，计算得更方便一些，大大提高了效率。</p><h3 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h3><p>可以将数组存两次，更方便查询与处理。</p><p>例： $1,2,3$ -&gt; $1,2,3,1,2,3$</p><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><p>枚举左右端点，惊进行择优</p><p>再将所有的最大值和最小值比对，找到最终结果即可</p><h3 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">o_o</span> <span class="token expression"><span class="token number">0xfffffff</span> </span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//区间[l,r]内分成i段的最大/小值 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a存放前缀和 </span><span class="token keyword">int</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//在复制一遍，直接接上 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前缀和 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//暴力枚举左右点~初始化 </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token operator">=</span>l<span class="token punctuation">;</span>r<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span>        b<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">mod</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化不分段的状态 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//暴力枚举左右点~开始寻找 </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token operator">=</span>l<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span>          c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>o_o<span class="token punctuation">;</span><span class="token comment">//求最小值时记得把数组初始化为极大值 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举分段数 </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举左端点 </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token operator">=</span>l<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举右端点 </span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>l<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//枚举区间断点 注意范围 </span>                c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token function">mod</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//dp 找最小值 </span>                b<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token function">mod</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//dp 找最大值 </span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">int</span> a_a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i_i<span class="token operator">=</span>o_o<span class="token punctuation">;</span><span class="token comment">//答案初始化 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历所有的答案 </span>        a_a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a_a<span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从前往后扫一遍 </span>        i_i<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>i_i<span class="token punctuation">,</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到真正的最大值与最小值 </span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>i_i<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>a_a<span class="token punctuation">;</span><span class="token comment">//输出 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1072 Hankson的趣味题</title>
      <link href="/2021/08/09/p1072/"/>
      <url>/2021/08/09/p1072/</url>
      
        <content type="html"><![CDATA[<h3 id="趣味题"><a href="#趣味题" class="headerlink" title="趣味题"></a>趣味题</h3><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>对于两个正整数 $a$，$b$ 设 $\gcd(a,b)=k$，则存在 $\gcd(\frac{ a }{ k },\frac{ b }{ k })=1$。</p><p>$\gcd(\frac{ x }{ a_1 },\frac{ a_0 }{ a_1 })=1$</p><p>$\gcd(\frac{ b_1 }{ b_0 },\frac{ b_1 }{ x })=1$</p><p>然后通过暴力枚举将因数试出，再带如另一因数，解出答案即可</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">*</span>x<span class="token operator">&lt;=</span>b1<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//暴力枚举 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>b1<span class="token operator">%</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>a1<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token operator">/</span>a1<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>b1<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//统计 </span>                <span class="token keyword">int</span> y<span class="token operator">=</span>b1<span class="token operator">/</span>x<span class="token punctuation">;</span><span class="token comment">//找到另一个因子</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//相同跳出 </span>                <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">%</span>a1<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>y<span class="token operator">/</span>a1<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>b1<span class="token operator">/</span>y<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//统计 </span>            <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以像上面代码一样，对便利范围缩小，进行时间大幅度的优化</p><p><del>这可比全搜一遍快得多</del></p><p>看这两个式子，发现 $x$ 是 $a1$ 的整数倍而且是 $b_1$ 的因子</p><h3 id="再看上面两个式子"><a href="#再看上面两个式子" class="headerlink" title="再看上面两个式子"></a>再看上面两个式子</h3><p>$\gcd(\frac{ x }{ a_1 },\frac{ a_0 }{ a_1 })=1$</p><p>$\gcd(\frac{ b_1 }{ b_0 },\frac{ b_1 }{ x })=1$</p><h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><p>$\sqrt b_1$ 枚举 $b_1$ 的因子，也就是 $x$，如果这个数是 $a_1$ 的整数倍并且满足那两个式子，则 <code>ans++</code></p><p><a href="https://www.luogu.com.cn/problem/solution/P1072">传送门</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//最大公约数 </span>  <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//a组数据 </span>        <span class="token keyword">int</span> a0<span class="token punctuation">,</span>a1<span class="token punctuation">,</span>b0<span class="token punctuation">,</span>b1<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>a0<span class="token operator">&gt;&gt;</span>a1<span class="token operator">&gt;&gt;</span>b0<span class="token operator">&gt;&gt;</span>b1<span class="token punctuation">;</span><span class="token comment">//两个式子的数 </span>        <span class="token keyword">int</span> p<span class="token operator">=</span>a0<span class="token operator">/</span>a1<span class="token punctuation">,</span>q<span class="token operator">=</span>b1<span class="token operator">/</span>b0<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">*</span>x<span class="token operator">&lt;=</span>b1<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//暴力枚举 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b1<span class="token operator">%</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>a1<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token operator">/</span>a1<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>b1<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//统计 </span>                <span class="token keyword">int</span> y<span class="token operator">=</span>b1<span class="token operator">/</span>x<span class="token punctuation">;</span><span class="token comment">//找到另一个因子</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//相同跳出 </span>                <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">%</span>a1<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>y<span class="token operator">/</span>a1<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token function">gcd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>b1<span class="token operator">/</span>y<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//统计 </span>            <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出 </span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1439 最长公共子序列</title>
      <link href="/2021/08/09/p1439/"/>
      <url>/2021/08/09/p1439/</url>
      
        <content type="html"><![CDATA[<h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p>通过不断改变数组状态，达到理想状态，要先找到推导的动态转移方程。</p><p>动态规划：现在决定未来，未来与过去无关。</p><h4 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h4><p>通过对题目的观察，可以发现只给了两个字符串，所以可以将问题进行转换，转换成最长不下降序列。</p><h4 id="以第一个序列为主，转化第二个序列。"><a href="#以第一个序列为主，转化第二个序列。" class="headerlink" title="以第一个序列为主，转化第二个序列。"></a>以第一个序列为主，转化第二个序列。</h4><p>现在 第一个序列为：$1,2,3,4,$……<br>而  第二个序列却是乱序，通过一的转换。</p><p>问题就变成了求最长不下降子序列。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><a href="https://www.luogu.com.cn/problem/P1439">传送门</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_m<span class="token operator">=</span><span class="token number">100001</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span>m_m<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>m_m<span class="token punctuation">]</span><span class="token punctuation">,</span>x_x<span class="token punctuation">[</span>m_m<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>m_m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span><span class="token comment">//长度 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>x_x<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//便利初值，即将第一字符串变成123…… </span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x7f7f7f7f</span><span class="token punctuation">;</span><span class="token comment">//设置最大值，方便找最小值 </span>  <span class="token punctuation">}</span>  f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>o_o<span class="token punctuation">,</span>n_n<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x_x<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>f<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span><span class="token operator">++</span>o_o<span class="token punctuation">]</span><span class="token operator">=</span>x_x<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//二分策略 </span>          n_n<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//中间的数 mid </span>          <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n_n<span class="token punctuation">]</span><span class="token operator">&gt;</span>x_x<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>r<span class="token operator">=</span>n_n<span class="token punctuation">;</span><span class="token comment">//右边界便利 </span>        <span class="token keyword">else</span> l<span class="token operator">=</span>n_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//左边界便利 </span>      <span class="token punctuation">}</span>      f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>x_x<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//搜索最长长度 </span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>o_o<span class="token punctuation">;</span><span class="token comment">//输出最长上升序列 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//完美收官@*_*@ </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1494 小Z的袜子</title>
      <link href="/2021/08/09/p1494/"/>
      <url>/2021/08/09/p1494/</url>
      
        <content type="html"><![CDATA[<h3 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h3><p>莫队可以快速找到某区间的元素个数，元素最大值，最小值……</p><h3 id="遍历莫队"><a href="#遍历莫队" class="headerlink" title="遍历莫队"></a>遍历莫队</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">举个小例子：      1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10设： l为左边界，r为右边界，sum为元素个数，shu为现有的数存的数组（假设数据很小）        求1,2区间分别出现次数最多的数的和（若一样多，以最小的数为例）。1区间：0~62区间：3~8    先来求1区间出现最多次的数：数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点 rsum=1,shu<span class="token punctuation">[</span>1<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>1<span class="token punctuation">]</span>=1)      数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点   rsum=2,shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>=1)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点     rsum=3,shu<span class="token punctuation">[</span>4<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>4<span class="token punctuation">]</span>=1)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点       rsum=4,shu<span class="token punctuation">[</span>2<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>2<span class="token punctuation">]</span>=1)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点         rsum=5,shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>=2)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点           rsum=6,shu<span class="token punctuation">[</span>4<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>4<span class="token punctuation">]</span>=2)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点             rsum=7,shu<span class="token punctuation">[</span>2<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>2<span class="token punctuation">]</span>=2)上面可以发现，2,3,4都出现了两次，所以取2（按题意）    下面 找区域2，出现次数最多的数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="出现区域2次数最多的数"><a href="#出现区域2次数最多的数" class="headerlink" title="出现区域2次数最多的数"></a>出现区域2次数最多的数</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">2区间：3~8数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点 l右端点             rsum=7,shu<span class="token punctuation">[</span>2<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>2<span class="token punctuation">]</span>=2)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点   l右端点             rsum=6,shu<span class="token punctuation">[</span>1<span class="token punctuation">]</span>--;(shu<span class="token punctuation">[</span>1<span class="token punctuation">]</span>=0)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点     l右端点             rsum=5,shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>--;(shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>=1)   数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点       l右端点             rsum=4,shu<span class="token punctuation">[</span>4<span class="token punctuation">]</span>--;(shu<span class="token punctuation">[</span>4<span class="token punctuation">]</span>=1)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点       l右端点               rsum=5,shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>3<span class="token punctuation">]</span>=2)数列： 1 3 4 2 3 4 2 3 6 7 8下标： 0 1 2 3 4 5 6 7 8 9 10左端点       l右端点                 rsum=6,shu<span class="token punctuation">[</span>6<span class="token punctuation">]</span>++;(shu<span class="token punctuation">[</span>6<span class="token punctuation">]</span>=1)        由上述可以得到2,3次数一样多取2综上，答案呼之欲出了，2+2=4。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h3><p>因为有好几组询问，所以每回莫队都是要变得，通过上一个结果，该加的加，该减的减，再通过数学的$C^n_m$运算，就可以搞定了</p><p><a href="https://www.luogu.com.cn/problem/P1494">传送门</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>pp<span class="token punctuation">[</span><span class="token number">50005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">50005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> s<span class="token punctuation">[</span><span class="token number">50005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">data</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>id<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">50005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> data <span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> data <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pp<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">==</span>pp<span class="token punctuation">[</span>b<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>l<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">ccmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> data <span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> data <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>id<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> add<span class="token punctuation">)</span><span class="token punctuation">{</span>    ans<span class="token operator">-=</span>s<span class="token punctuation">[</span>c<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span>s<span class="token punctuation">[</span>c<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span>c<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span>add<span class="token punctuation">;</span>    ans<span class="token operator">+=</span>s<span class="token punctuation">[</span>c<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span>s<span class="token punctuation">[</span>c<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">gai</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>r<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>r<span class="token operator">&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>r<span class="token operator">--</span><span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>l<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>l<span class="token operator">&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>l<span class="token operator">--</span><span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">=</span>ans<span class="token operator">-</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1ll</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> g<span class="token operator">=</span><span class="token function">__gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">/=</span>g<span class="token punctuation">;</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token operator">/=</span>g<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b_b<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>pp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>b_b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gai</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>ccmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld/%lld\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2233 公交车路线</title>
      <link href="/2021/08/09/p2233/"/>
      <url>/2021/08/09/p2233/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2233">传送门</a></p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p>回忆一下，矩阵式怎么运算的</p><script type="math/tex; mode=display">\left[\begin{matrix}1 & 3 \\2 & 2 \\\end{matrix}\right]\times\left[\begin{matrix}2 & 4 & 3 \\3 & 2 & 1 \\\end{matrix}\right]=\left[\begin{matrix}11 & 10 & 6 \\10 & 12 & 8 \\\end{matrix}\right]</script><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">形状上：2*2 和 2*3 的矩阵乘积后,结果是 2*3 的矩阵。即 a*b 矩阵 和 c*d 的矩阵乘积结果是 a*d 的矩阵。其中 b 和 c 必须相等。原因看下面。运算法则：对于结果矩阵的第 i 行第 j 列的位置的结果是由前一个矩阵的对应的行。和后一个矩阵对应的列。对应位置乘积和获得的。    比如第 1 行第 1 列的 11.是由前矩阵的第一行 (1,3) 和后矩阵的第一列 (2,3) 对应位置乘积和。    1*2 + 3*3 = 11 获得的。    如果上述 b 和 c 如果不相等。那么会有地方"失配"没有数值可以进行计算。不符合矩阵乘法定义。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>发现车站组成了一个环，所以显然可以用矩阵，并且，一个车站只能到相邻两个车站，可以列出矩阵：</p><script type="math/tex; mode=display">\left(\begin{matrix}0 & 1 & 0 & 0 & 0 & 0 & 0 & 1 \\1 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\  0 & 1 & 0 & 1 & 0 & 0 & 0 & 0 \\0 & 0 & 1 & 0 & 1 & 0 & 0 & 0 \\ 0 & 0 & 0 & 1 & 0 & 1 & 0 & 0 \\0 & 0 & 0 & 0 & 1 & 0 & 1 & 0 \\0 & 0 & 0 & 0 & 0 & 1 & 0 & 1 \\1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 \\\end{matrix}\right)</script><p>但是，题中有这样一句话：</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">注意 tiger 一旦到达公交站 E，他不会愚蠢到再去换车。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以到了E就不能动了,所以矩阵改为如下模样：</p><script type="math/tex; mode=display">\left(\begin{matrix}0 & 1 & 0 & 0 & 0 & 0 & 0 & 1 \\1 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\  0 & 1 & 0 & 1 & 0 & 0 & 0 & 0 \\0 & 0 & 1 & 0 & 1 & 0 & 0 & 0 \\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\0 & 0 & 0 & 0 & 1 & 0 & 1 & 0 \\0 & 0 & 0 & 0 & 0 & 1 & 0 & 1 \\1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 \\\end{matrix}\right)</script><p>套矩阵快速幂求解即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> o_o<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//辅助矩阵 </span><span class="token keyword">long</span> <span class="token keyword">long</span> a_s<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//答案矩阵 </span><span class="token keyword">long</span> <span class="token keyword">long</span> x_x<span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">[</span>o_o<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//临时矩阵 </span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> m_d<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">k_m</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//矩阵快速幂 </span>  <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//更新答案矩阵 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//将答案矩阵存入临时矩阵 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          x_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//重置答案矩阵 </span>        <span class="token punctuation">}</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举答案矩阵和辅助矩阵（第一个矩阵）的行 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举答案矩阵的行的第几个数（列）和临时矩阵（第二个矩阵）的列 </span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举辅助矩阵（第一个矩阵）的列和临时矩阵（第二个矩阵）的行 </span>            a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>a_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>x_x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//存入答案矩阵 </span>    <span class="token punctuation">}</span>    <span class="token comment">//更新辅助矩阵 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//将辅助矩阵存入临时矩阵</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//重置辅助矩阵 </span>      <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举辅助矩阵和临时矩阵（第一个矩阵）的行 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举辅助矩阵的行和临时矩阵（第二个矩阵）的列 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//枚举临时矩阵（第一个矩阵）的列和临时矩阵（第二个矩阵）的行 </span>          x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>x_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>x_x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">)</span><span class="token operator">%</span>m_d<span class="token punctuation">;</span><span class="token comment">//存入辅助矩阵 </span>    k<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">yv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  a_s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  a_s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  a_s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  a_s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  a_s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  a_s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span>a_s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入幂 </span>  n<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">//矩阵大小 </span>  <span class="token function">yv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化矩阵 </span>  <span class="token function">k_m</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//矩阵快速幂 </span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld "</span><span class="token punctuation">,</span>a_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">%</span>m_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是哪个车站输出那个（E==5）</span><span class="token comment">//  完整矩阵 </span><span class="token comment">//  for(int i=1;i&lt;=n;i++){</span><span class="token comment">//    for(int j=1;j&lt;=n;j++){</span><span class="token comment">//      cout&lt;&lt;a_s[i][j]&lt;&lt;" ";</span><span class="token comment">//    }</span><span class="token comment">//    cout&lt;&lt;endl;</span><span class="token comment">//  } </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2467 [SDOI2010]地精部落</title>
      <link href="/2021/08/09/p2467/"/>
      <url>/2021/08/09/p2467/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2467">传送门</a></p><h3 id="读题"><a href="#读题" class="headerlink" title="读题"></a>读题</h3><p>可以发现，需要山峰山谷相接的山脉。例如：$1423$,$2143$。<br>乍一看并没有什么头绪。所以需要亿个小小的表。 </p><h3 id="打表"><a href="#打表" class="headerlink" title="打表"></a>打表</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">3位数：      4位数：(先峰) (先谷)   (先峰) (先谷) 山峰   山谷    山峰  山谷 132           1324 213   231     1423 312           2314  2134                     2413               3412  3142                     3241                     4132                     4231<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="找规律"><a href="#找规律" class="headerlink" title="找规律"></a>找规律</h3><ul><li>所有的山峰情况让 $n+1$ 减每一位可以得到所有的山谷情况，所以要计算总和只用求出先锋<strong>或</strong>先谷全部情况在 $\times2$ 即可   </li><li>$n$ 位数的情况皆可以有 $n-1$ 位数的情况推出来。例如：$1324$，$1423$。可以分成 $1$—$324$，和 $1$—$423$。现在我们将 $324$ 和 $423$ 看成三位数，合法化后就是 $213$ 和 $312$。</li></ul><p><strong>这里说的合法化就是 $n$ 位数有 $1$~$n$ 组成的峰谷相连的数列，例如 $324$ 的合法化：$324$ 是三位数，应由 $1$，$2$，$3$ 组成，所以合法化后就是 $213$，符合峰谷相连，且山脉大致形状不变（左峰比右峰低）</strong></p><p>这不就是 $3$ 位数中先峰的情况之和么。再比如：$2143$,$2314$,$2413$.可以分成两类：</p><ol><li>第一类是 $2143$（先峰）；</li><li>第二类是 $2314$,$2413$（先谷）。</li></ol><ul><li>先山峰：$2143$ 可分成 $2$—$143$。$143$ 合法化后就是 $132$.可以发现同样是 $3$ 位数情况里的第一个。至于为什么<strong>没有</strong>合法化后是 $231$（同样是先谷山脉）在后面说明</li><li>先山谷：$2$—$314$，$2$—$413$ 合法化后是 $213$ 和 $312$.也都是 $3$ 位数中先山峰的情况。</li><li>如果将 $4$ 位数中 $3$ 开头的情况也打出来会发现：与 $2$ 开头的情况恰好相反。即：$3$—$412$ 合法化后是 $312$，没有 $213$ 的情况。想想为什么？</li></ul><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>现在假如有以 $2$ 开头的 $4$ 位数，后三位合法化后是 $231$ 的情况。现在我们要逆推一下，这个 $4$ 位数如果合法是什么。<br>    $2$—$231$。不能存在两个 $2$，所以要做一些操作。</p><ul><li>首先，既然选了 $3$ 位数中的先山谷，那几一定要比前面的开头数小。</li><li>所以只能将 $231$ 中的 $2$ 缩小，缩小后又与原来的 $1$ 冲突。</li><li>现在就只能放弃或改变山峰的形状了（不再是左谷比右谷高的山脉特点）。</li></ul><p><strong>事实证明，不存在 $2$—$231$ 的合法山脉</strong></p><p>同样 $3$—$213$ 同样不存在（证明方法相似，不再赘述）</p><h3 id="规律"><a href="#规律" class="headerlink" title="规律"></a>规律</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">现在将打的表整理一下：            n=3       n=4         n=5序列开头数字  先锋   先谷    先锋   先谷    先锋   先谷  1:      0      1       0     2       0      5  2:      1      1       1     2       2      5  3:      1      0       2     1       4      4  4:                     2     0       5      2  5:                                   5      0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上面的推论和图可以发现递推规律：<br>  设$g_i[n]$为输入$i$时的山谷，设$f_i[n]$为输入的$i$时的山峰。</p><p>拿$i=4$举例</p><p>$g_4[0]=f_3[0]+f_3[1]+f_3[2]+f_3[3]$</p><p>$g_4[1]=f_3[1]+f_3[2]+f_3[3]$</p><p>$g_4[2]=f_3[2]+f_3[3]$</p><p>$g_4[3]=f_3[3]$</p><p>$ans=g_4[0]+g_4[1]+g_4[2]+g_4[3];$</p><p>$ans*=2;$//山峰和山谷情况一样多</p><p> <strong>运算时记得及时取模</strong></p><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p>用我们发现的规律每回都求一次和，显然会<strong>TLE</strong>。。。<del>别问我是怎么知道的</del></p><p>所以我们需要一种更快的方式来加和，仔细观察上面的规律中的公式，反过来看不就是一个<strong>前缀和</strong>么！！所以完全可以倒序计算存储。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>p<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> now_xvlie<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\\当前序列，存先锋<span class="token keyword">long</span> <span class="token keyword">long</span> nest_xvlie<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\\ 前缀和，也是下一个序列倒序，即下一个序列先谷<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\\更新下一个序列，即求当前序列的前缀和  nest_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">(</span>nest_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nest_xvlie<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>now_xvlie<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">gai</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\\更改当前序列，递推出下一个序列  <span class="token function">update</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    now_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nest_xvlie<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\\逆序存储  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\\输出  <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>now_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ans<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">;</span>  now_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>now_xvlie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\\初始化，注意n<span class="token operator">&gt;=</span><span class="token number">3</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\\从 <span class="token number">3</span> 开始    <span class="token function">gai</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">out</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>这个代码可以看到从 $3$ 到 $n$ 的先锋和先谷顺序以及总和（注意数据范围）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>p<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> now_xvlie<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> next_xvlie<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>now_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" total:"</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ans<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  next_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" next_xvlie:"</span><span class="token operator">&lt;&lt;</span>next_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">(</span>next_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>next_xvlie<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>now_xvlie<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%=</span>p<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>next_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">gai</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" n="</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token function">update</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" now_xvlie:"</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    now_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>next_xvlie<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>now_xvlie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token function">out</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">;</span>  now_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>now_xvlie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  next_xvlie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>next_xvlie<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" n=3"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" next_xvlie:"</span><span class="token operator">&lt;&lt;</span>next_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>next_xvlie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>next_xvlie<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">" now_xvlie: "</span><span class="token operator">&lt;&lt;</span>now_xvlie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>now_xvlie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>now_xvlie<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token function">out</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">gai</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token function">out</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2602 数字计数</title>
      <link href="/2021/08/09/p2602/"/>
      <url>/2021/08/09/p2602/</url>
      
        <content type="html"><![CDATA[<h3 id="统计题"><a href="#统计题" class="headerlink" title="统计题"></a>统计题</h3><p>数字统计可以用一些特殊的方法来求</p><h3 id="两位数的时候"><a href="#两位数的时候" class="headerlink" title="两位数的时候"></a>两位数的时候</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">例如：10~99 中 0，1，2，3，4，5，6，7，8，9 分别出现的次数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以先看最高位有 $1$~$9$，$9$ 种选择，再看各位，$0$~$9$，$0$ 种选择，也就是说，只看十位 $1$x 有 $10$ 个 $1$，看个位 x$1$ 有 $9$ 个$1$。</p><p>$1$ 出现次数可以表达成 $1\times9+1\times10=19$ 和 $2$，$3$，$4$，$5$，$6$，$7$，$8$，$9$ 一样，但 $0$ 不一样，因为不能在最高位，所以出现的次数为 $1\times9=9$ 次<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">答案为：9，19，19，19，19，19，19，19，19，19<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h3 id="三位数的时候"><a href="#三位数的时候" class="headerlink" title="三位数的时候"></a>三位数的时候</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">例如：100~999 中 0，1，2，3，4，5，6，7，8，9 分别出现的次数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以先看最高位有 $1$~$9$,$9$ 种选择，再看十位，$0$~$9$，$10$ 种选择，再看个位，$0$~$9$，$10$ 种选择，也就是说：</p><p>只看百位 $1$xx 有 $100$ 个 $1$，只看十位 x$1$x 有 $9\times10$ 个 $1$，只看个位 xx$1$ 有 $9\times10$ 个一。</p><p>$1$ 出现的次数可以表达成 $100+9\times10+9\times10=280$</p><p>$0$ 呢？$9\times10+9\times10=180$</p><h3 id="四位数的时候（重点）"><a href="#四位数的时候（重点）" class="headerlink" title="四位数的时候（重点）"></a>四位数的时候（重点）</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">例如：1000~9999 中 0，1，2，3，4，5，6，7，8，9 分别出现的次数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以先看最高位有 $1$~$9$,$9$ 种选择，再看百位，$0$~$9$，$10$ 种选择，再看十位，$0$~$9$，$10$ 种选择，再看个位，$0$~$9$，$10$种选择，也就是说，</p><p>只看千位 $1$xxx 有 $1000$ 个 $1$，只看百位 x$1$xx 有 $9\times10\times10$ 个 $1$，只看十位 xx$1$x 有 $9\times10\times10$ 个 $1$ ，只看个位 xxx$1$ 有 $9\times10\times10$ 个一。</p><p>$1$ 出现的次数可以表达成 $1000+9\times10\times10+9\times10*\times10+9\times10\times10=3700$</p><p>$0$ 呢？$9\times10\times10+9*10\times10+9\times10\times10=2700$</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>是 $C^m_n$？但是：<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">例如：673~9283 中 0，1，2，3，4，5，6，7，8，9 分别出现的次数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">通过仔细地观察，可以发现，可以将这些数拆分。1673-&gt;1000+600+70+3  经过细致的观察，发现可以寻找一个中间量：2000，先求出 2000~9283 中分别的数，再求出 1673~2000 中各数的出现次数。还要拆分： 9283-&gt;9000+200+80+3变成了 2000~9283-&gt;2000~9000+9001~9283，9201-&gt;9280，9281-&gt;92831673-&gt;2000 就先对容易多了不断拆分即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>碰见位数不同的就可以 $0$ 补位！！！</p><p><a href="https://www.luogu.com.cn/problem/P2602">传送门</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>w_w<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ji</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>xy<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> num<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        num<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        x<span class="token operator">=</span>x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        xy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        xy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>w_w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> num2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num2<span class="token operator">=</span>num2<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        xy<span class="token punctuation">[</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span>num2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        xy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-=</span>w_w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>    w_w<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">15</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>w_w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        w_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">10</span><span class="token operator">*</span>w_w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ji</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ji</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2821 变幻数</title>
      <link href="/2021/08/09/p2821/"/>
      <url>/2021/08/09/p2821/</url>
      
        <content type="html"><![CDATA[<h3 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h3><p><a href="https://www.luogu.com.cn/problem/P2821">传送门</a></p><h4 id="题目定义"><a href="#题目定义" class="headerlink" title="题目定义"></a>题目定义</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">给定一个十进制正整数 n，它的递归变幻数定义如下：1．如果 n 的位数多于 1 位（忽略前置的0），将 n 的各个位上的数相乘，乘积为 m。称 m 为 n 的子变幻数，n 称为 m 的父变幻数。求一个数的变幻数等于求其子变幻数。即求 n 的变幻数等于求 m 的变幻数。2．如果 n 的位数只有一位，n 的变幻数即为它本身。    如求 679 的变幻数过程为：679 -&gt; 378(=6*7*9) -&gt; 168(=3*7*8) -&gt; 48(=1*6*8) -&gt; 32(=4*8) -&gt; 6(=2*3)，所以 679 的变幻数为 6。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><p>如果要逆着求，可以先分解。于是就有了第一个思路：分解。</p><h4 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h4><p>以样例给的数先分解一波：枚举所有因数，再找最小的。</p><p>$48:1,2,3,4,6,8,12,16,24,48$</p><p>因为是每位相乘的得数，所以可以先排除：</p><p>$12,16,24,48$</p><p>剩下：</p><p>$2,3,4,6,8$ 要求最小的组合，那么一定不会用到  $1$。毕竟没啥用，还站着一位呢。而且剩下的数的组合，从高位到低位一定是字典序。</p><h3 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h3><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><ul><li><p>$48=2\times3\times8$//毕竟不能出现两位数，能少位就少位</p></li><li><p>$48=3\times4\times4$</p></li><li><p>$48=6\times8$</p></li></ul><p>显然，$3$ 最小</p><h4 id="规律"><a href="#规律" class="headerlink" title="规律"></a>规律</h4><p>通过上面的分解至少可以发现规律，尽量分成和最小的因数组。位数也尽量少。如果分解后让有高位数，就继续分解即可。最后再排次序即可。</p><h4 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h4><h5 id="高精"><a href="#高精" class="headerlink" title="高精"></a>高精</h5><p>需要高精存数与作除，但会发现个问题，上面说会分解，还有可能会很大的除因数，</p><p>所以一定还有玄机！！！</p><h5 id="再分解"><a href="#再分解" class="headerlink" title="再分解"></a>再分解</h5><p>上面的分解最主要的就是分的尽量少，但是很有可能会出现特别情况。比如：最后出现$2\times2\times3\times4\times……$</p><p>所以并不是最优解！！！</p><p>那怎么做？既然是尽量少，还要&lt;=$9$</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>就可以从 $9$-&gt;$2$ 依次便利出结果，一定是最优解！！！</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>len<span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span><span class="token operator">=</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      y<span class="token operator">=</span>y<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      y<span class="token operator">%=</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>x<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>      v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        y<span class="token operator">=</span>y<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token operator">/</span>x<span class="token punctuation">;</span>y<span class="token operator">%=</span>x<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>l<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">!=</span>l<span class="token punctuation">)</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"There is no such number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 高精 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3355 骑士共存问题</title>
      <link href="/2021/08/09/p3355/"/>
      <url>/2021/08/09/p3355/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3355">传送门</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>由题可知，有很多种元素。例如：马的走法，有障碍物……</p><p>那么就需要分别讨论，找到题的共性来解决。</p><h4 id="问题特性"><a href="#问题特性" class="headerlink" title="问题特性"></a>问题特性</h4><p>不难发现，只要将网格标记后就行了。因为都是马，也只有马。所以如果一个方格被标记，就不能放马。同理，如果一个个并未标记，那么一定可以放马。</p><h4 id="马的走法"><a href="#马的走法" class="headerlink" title="马的走法"></a>马的走法</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">o x o x ox o o o xo o m o ox o o o xo x o x o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 $m$ 代表马，$x$ 代表不能走的地方。<br>再多举几个例子，通过上面问题特性的判断，在画一个图。<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">x m x m xm x m x mx m x m xm x m x mx m x m x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>不难发现一些显而易见的规律了。但是仍然会有一些差别，如下：</p><p>情况 1：<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">x m x m xm x m x mx m x m xm x m x mx m x m x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>和：</p><p>情况 2<br></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">m x m x mx m x m xm x m x mx m x m xm x m x m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>就有本质上的差别。马的数量是有差别的。</p><p>所以，在没有就障碍的情况下，最优解为：</p><p>$n$ 为棋盘大小。</p><p>$n\mod2==0$ 时 $ans=\frac{n^2}{2}$;</p><p>$n\mod2==1$ 时 $ans=\frac{n^2}{2}+1$;</p><h4 id="A"><a href="#A" class="headerlink" title="A*"></a>A*</h4><p>搜索，但对于每种路径有一个期望，若搜索路径过程中，消费大于期望，则放弃本路径。从而提升效率。</p><h4 id="A-算法注意"><a href="#A-算法注意" class="headerlink" title="A*算法注意"></a>A*算法注意</h4><p>注意，障碍的地方不能放士兵！！！所以个能会有空白，只要是空白一定可以放士兵，但记得的更新当前的值。</p><p>最重要的是不知道现在是情况一和情况二那个多，所以最好进行一次比较。确保最优解。记得方法合理即可，以防TLE。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">2000010</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> ma_am<span class="token operator">=</span><span class="token number">1000000010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>s<span class="token punctuation">,</span>t<span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">edge</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> adj<span class="token punctuation">,</span>nex<span class="token punctuation">,</span>fw<span class="token punctuation">;</span><span class="token punctuation">}</span>e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>top<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span>  e<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">{</span>y<span class="token punctuation">,</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>z<span class="token punctuation">}</span><span class="token punctuation">;</span>  g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>top<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> dep<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>cur<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> Q<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">b_b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cur<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>vis<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>dep<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span>Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nex<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> to<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fw<span class="token punctuation">)</span><span class="token punctuation">{</span>        vis<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        dep<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">=</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">d_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> F<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>F<span class="token operator">||</span>x<span class="token operator">==</span>t<span class="token punctuation">)</span>    <span class="token keyword">return</span> F<span class="token punctuation">;</span>  <span class="token keyword">int</span> flow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> to<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">;</span> cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>dep<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span>f<span class="token operator">=</span><span class="token function">d_d</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>F<span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fw<span class="token operator">-=</span>f<span class="token punctuation">;</span>      e<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fw<span class="token operator">+=</span>f<span class="token punctuation">;</span>      flow<span class="token operator">+=</span>f<span class="token punctuation">,</span>F<span class="token operator">-=</span>f<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>F<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> flow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> G<span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tx<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> ty<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">p</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> xt<span class="token operator">=</span>tx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">,</span>yt<span class="token operator">=</span>ty<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xt<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>xt<span class="token operator">&gt;</span>n<span class="token operator">||</span>yt<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>yt<span class="token operator">&gt;</span>n<span class="token operator">||</span>G<span class="token punctuation">[</span>xt<span class="token punctuation">]</span><span class="token punctuation">[</span>yt<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">p</span><span class="token punctuation">(</span>xt<span class="token punctuation">,</span>yt<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>ma_am<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span>xt<span class="token punctuation">,</span>yt<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">p</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">add</span><span class="token punctuation">(</span>n<span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token function">p</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  ans<span class="token operator">=</span>n<span class="token operator">*</span>n<span class="token operator">-</span>m<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">=</span>t<span class="token operator">=</span>n<span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">b_b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ans<span class="token operator">-=</span><span class="token function">d_d</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>ma_am<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> A* </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P7285 「EZEC-5」修改数组</title>
      <link href="/2021/08/09/p7285/"/>
      <url>/2021/08/09/p7285/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P7285">传送门</a></p><h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><p>给定一个长度为 $n$、元素由 $0$ 或 $1$ 组成的数组。</p><p>现在可以选择若干（可以为 $0$）个值为 $0$ 的元素，将其修改为 $1$。</p><p>记：</p><ol><li><p>$x$ 为数组中最长连续 $1$ 子段的长度（规定，若所有数均为 $0$，则 $x$ 为 $0$；</p></li><li><p>$y$ 为修改的元素的个数。</p></li></ol><p>求要怎么修改才能使 $x-y$ 最大，并构造一个方案（输出修改后的数组）。</p><h3 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h3><p>我们要 $1$ 尽量长，修改的尽量少。</p><h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><p>我们在把题读一遍</p><p>$x$ 为数组中最长连续 $1$ 子段的长度</p><p>那么每修改一个数，$x$ 会加 $1$</p><p>$y$ 为修改的元素的个数</p><p>那么每修改一个数，$y$ 会加 $1$</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>于是题目变成了给的数组中有多少个 $1$</p><p>而要输出改后的数组，就可以全部输出 $1$ 即可</p><p>因为不管修改了多少个，给的数组的 $1$ 的个数不会变</p><p>题目：如有多个方案，任意输出一种即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token comment">//t组数据</span>  cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//n为数组长度,sum记录1的个数</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> x<span class="token punctuation">;</span>      cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>sum<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">//可以全部输出 1。</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//记得每个数据结束换行</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P7589 黑白棋（2021 CoE-II B）</title>
      <link href="/2021/08/09/p7589/"/>
      <url>/2021/08/09/p7589/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P7589">传送门</a></p><h3 id="简化题意"><a href="#简化题意" class="headerlink" title="简化题意"></a>简化题意</h3><p>有很多条线，每条线上都有两人的棋，靠近对方的棋叫<strong>前进</strong>，远离叫<strong>后退</strong>，后退有次数的距离限制，而前进没有，先走走不了的一方输。</p><h3 id="情况分析"><a href="#情况分析" class="headerlink" title="情况分析"></a>情况分析</h3><p>后退不需考虑：一方只要后退，对方就可以前进相同的距离。</p><p>那么，现在只用考虑前进了，当两人的棋挨在一起的时候，本条线就走不了了。</p><p>因为两人足够聪明，所以当他们发现情况不利时，会尽量打破这种可能，举个例子：</p><p>—-A——B—-（A：Alice B：Bob）</p><p>如果只有一条线，Alice 的棋会直接对到 Bob 的棋的前面，取得胜利；但是如果还有一条两人的棋没有对到一起的情况，Alice 就不会这么做，但她可以对到 Bob 的棋的前一个格处。</p><p>———A-B—-（A：Alice B：Bob）</p><p>这样另一条线的 Bob 的棋不会直接对上，为了这种解决情况，他也会在另一条线上，对在 Alice 的棋的前面的一格，而这种情况，Alice 会必输。</p><p>所以聪明的 Alice 在一开始，为了后面有路可走，可能会如下：</p><p>——-A—B—-（A：Alice B：Bob）</p><p>而 Bob 也会随机应变……</p><p>因为两方都非常聪明，就可能会出现每个人的棋就会一步一步向前走。</p><h3 id="异或处理"><a href="#异或处理" class="headerlink" title="异或处理"></a>异或处理</h3><p>我们就可以统计两人的间距和来判断谁先无路可走，我们可以在这里用异或快速处理。</p><p>例如：</p><p>—-A—-B—-</p><p>—-A—-B—-</p><p>两人一步一步走，可以想象 Alice 只走上面，Bob 只走下面，会发现两人走的次数相同，异或一下就抵消了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token comment">//多测 </span><span class="token keyword">int</span> b_b<span class="token punctuation">;</span><span class="token comment">//判断输赢 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  t<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b_b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//多测清空 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>w<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      b_b<span class="token operator">^=</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token operator">-</span>w<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//异或距离，注意两点距离为 abs（a-b）-1 </span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>b_b<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//结果输出 </span>    <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快读</title>
      <link href="/2021/08/09/kuai-du/"/>
      <url>/2021/08/09/kuai-du/</url>
      
        <content type="html"><![CDATA[<h3 id="快读模板"><a href="#快读模板" class="headerlink" title="快读模板"></a>快读模板</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契</title>
      <link href="/2021/08/09/fei-bo-na-qi/"/>
      <url>/2021/08/09/fei-bo-na-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="斐波那契"><a href="#斐波那契" class="headerlink" title="斐波那契"></a>斐波那契</h3><p>首先回忆一下这是个什么东西：</p><p>（别名：兔子数列）</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">数：  1 1 2 3 5 8 13 21 34 55 89 ……下标：1 2 3 4 5 6 7  8  9  10 11 ……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="通项公式"><a href="#通项公式" class="headerlink" title="通项公式"></a>通项公式</h3><p>$\frac{1}{\sqrt5}[(\frac{1+\sqrt5}{2})^n-(\frac{1-\sqrt5}{2})^n]$</p><p>提示：递推公式推论即可</p><p>$F[n]=F[n-1]+F[n-2]$</p><p>$F[1]=1$</p><p>$F[2]=1$</p><h3 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h3><p>和最大公约数</p><p>$gcd(F(n)+F(m))=F(gcd(n,m))$</p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><script type="math/tex; mode=display">\left[\begin{matrix}1 & 3 \\2 & 2 \\\end{matrix}\right]\times\left[\begin{matrix}2 & 4 & 3 \\3 & 2 & 1 \\\end{matrix}\right]=\left[\begin{matrix}11 & 10 & 6 \\10 & 12 & 8 \\\end{matrix}\right]</script><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">形状上：2*2 和 2*3 的矩阵乘积后,结果是 2*3 的矩阵。即 a*b 矩阵 和 c*d 的矩阵乘积结果是 a*d 的矩阵。其中 b 和 c 必须相等。原因看下面。运算法则：对于结果矩阵的第 i 行第 j 列的位置的结果是由前一个矩阵的对应的行。和后一个矩阵对应的列。对应位置乘积和获得的。    比如第 1 行第 1 列的 11.是由前矩阵的第一行 (1,3) 和后矩阵的第一列 (2,3) 对应位置乘积和。    1*2 + 3*3 = 11 获得的。    如果上述 b 和 c 如果不相等。那么会有地方"失配"没有数值可以进行计算。不符合矩阵乘法定义。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问题来了矩阵跟斐波那契有啥关系？"><a href="#问题来了矩阵跟斐波那契有啥关系？" class="headerlink" title="问题来了矩阵跟斐波那契有啥关系？"></a>问题来了矩阵跟斐波那契有啥关系？</h3><script type="math/tex; mode=display">\left[\begin{matrix}1 & 1 \\1 & 0 \\\end{matrix}\right]\times\left[\begin{matrix}F(1) \\F(0) \\\end{matrix}\right]=\left[\begin{matrix}F(1) + F(0) \\F(1) \\\end{matrix}\right]=\left[\begin{matrix}F(2) \\F(1) \\\end{matrix}\right]</script><p>同样：</p><script type="math/tex; mode=display">\left[\begin{matrix}1 & 1 \\1 & 0 \\\end{matrix}\right]\times\left[\begin{matrix}F(2) \\F(1) \\\end{matrix}\right]=\left[\begin{matrix}F(2) + F(1) \\F(2) \\\end{matrix}\right]=\left[\begin{matrix}F(3) \\F(2) \\\end{matrix}\right]</script><p>整理一下：</p><script type="math/tex; mode=display">\left[\begin{matrix}1 & 1 \\1 & 0 \\\end{matrix}\right]\times\left[\begin{matrix}F(n-1) \\F(n-2) \\\end{matrix}\right]=\left[\begin{matrix}F(n-1) + F(n-2) \\F(n-1) \\\end{matrix}\right]=\left[\begin{matrix}F(n) \\F(n-1) \\\end{matrix}\right]</script><p>求 $n$ 次方乘 $n$ 次即可，可以快速矩阵求解。</p><h3 id="其他公式"><a href="#其他公式" class="headerlink" title="其他公式"></a>其他公式</h3><ul><li><p>$F(1)+F(2)+F(3)+……+F(n)=F(n+2)-1$</p></li><li><p>$F(1)^2+F(2)^2+F(3)^2+……+F(n)^2=F(n)\times F(n+1)$</p></li><li><p>$F(1)+F(3)+F(5)+……+F(2n-1)=F(2n)$</p></li><li><p>$F(2)+F(4)+F(6)+……+F(2n)=F(2n+1)-1$</p></li><li><p>$F(n)=F(m)\times F(n-m+1)+F(m-1)\times F(n-m)$</p></li><li><p>$ps:n&gt;=m$</p></li><li><p>$F(n-1)\times F(n+1)=F(n)^2+(-1)^n$</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> GCD </tag>
            
            <tag> 矩阵 </tag>
            
            <tag> 斐波那契 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树（基本）</title>
      <link href="/2021/08/09/zui-xiao-sheng-cheng-shu/"/>
      <url>/2021/08/09/zui-xiao-sheng-cheng-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="最少生成树思路（基本）"><a href="#最少生成树思路（基本）" class="headerlink" title="最少生成树思路（基本）"></a>最少生成树思路（基本）</h1><h2 id="链接两点"><a href="#链接两点" class="headerlink" title="链接两点"></a>链接两点</h2><h3 id="创建一个存储用的“树”"><a href="#创建一个存储用的“树”" class="headerlink" title="创建一个存储用的“树”"></a>创建一个存储用的“树”</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">p</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token comment">//连接的两个点</span>      <span class="token keyword">int</span> w<span class="token punctuation">;</span><span class="token comment">//连接用的价值（连接长度）</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="kruskal算法"><a href="#kruskal算法" class="headerlink" title="kruskal算法"></a>kruskal算法</h2><h3 id="排序条件"><a href="#排序条件" class="headerlink" title="排序条件"></a>排序条件</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">il <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>p a<span class="token punctuation">,</span>p b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//if(a.w==b.w)return a.x&lt;b.x;//某些题可能会有特判</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>w<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token comment">//按边的从小到大的顺序排列</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序（加权）（最短路）"><a href="#排序（加权）（最短路）" class="headerlink" title="排序（加权）（最短路）"></a>排序（加权）（最短路）</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="并查集-判断是否已入“树”"><a href="#并查集-判断是否已入“树”" class="headerlink" title="并查集 判断是否已入“树”"></a>并查集 判断是否已入“树”</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="找祖先"><a href="#找祖先" class="headerlink" title="找祖先"></a>找祖先</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">il <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token operator">=</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找爹</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token comment">//返回祖先</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="入树"><a href="#入树" class="headerlink" title="入树"></a>入树</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">fa<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token operator">=</span>zz<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="判终条件"><a href="#判终条件" class="headerlink" title="判终条件"></a>判终条件</h2><p>不同题目，求的东西不同，判终条件不同</p><p>例如本题，要判的是两点之间的最短路，由于边是按照从小到大“入树”的，所以，只要判断是否都进“树”（祖先是否相同）即可。<br></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><p>例如 <a href="https://www.luogu.com.cn/problem/P2121">P2121</a> 与本题思路相似但判终条件不同，此题要求的是拆地毯的数量，所以只要数量达到就可以结束</p><h3 id="代码（例子）"><a href="#代码（例子）" class="headerlink" title="代码（例子）"></a>代码（例子）</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span><span class="token comment">//标椎I/O</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span><span class="token comment">//scanf,printf 可缩短时间，但没有,cin,cout“智能”</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">il</span> <span class="token expression"><span class="token keyword">inline</span></span><span class="token comment">//用于缩短时间</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>s<span class="token punctuation">,</span>t<span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span><span class="token number">20001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//找爹</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//判终止条件</span><span class="token keyword">int</span> ss<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//输出</span><span class="token keyword">struct</span> <span class="token class-name">p</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">;</span>  <span class="token keyword">int</span> w<span class="token punctuation">;</span> <span class="token punctuation">}</span>q<span class="token punctuation">[</span><span class="token number">20001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//“树”</span>il <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>p a<span class="token punctuation">,</span>p b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//排序</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>w<span class="token operator">==</span>b<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>w<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token punctuation">}</span>il <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//找祖先，判断是否以入“树”</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token operator">=</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>s<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">&gt;&gt;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">&gt;&gt;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token comment">//读入</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//初始化</span>  <span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> z<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>zz<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找祖先</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">!=</span>zz<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//若祖先相同，说明已经有更优的解（以入“树”）</span>      fa<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token operator">=</span>zz<span class="token punctuation">;</span><span class="token comment">//若还未入树，让它入树</span>      ss<span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token comment">//并更新值（因为排序是从小到大，所以后来的一定比先来的大，所以保证一直是最大值）</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//判终</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>ss<span class="token punctuation">;</span><span class="token comment">//输出</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//好习惯</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 生成树 </tag>
            
            <tag> kruskal </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高斯消元</title>
      <link href="/2021/08/09/gao-si-xiao-yuan/"/>
      <url>/2021/08/09/gao-si-xiao-yuan/</url>
      
        <content type="html"><![CDATA[<h3 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h3><ol><li><p>$a_1x+b_1y+c_1z=d_1$</p></li><li><p>$a_2x+b_2y+c_2z=d_2$</p></li><li><p>$a_3x+b_3y+c_3z=d_3$</p></li></ol><h3 id="高斯消元思路"><a href="#高斯消元思路" class="headerlink" title="高斯消元思路"></a>高斯消元思路</h3><p>约旦消元法大致思路如下：</p><ul><li><p>1.选择一个尚未被选过的未知数作为主元，选择一个包含这个主元的方程。</p></li><li><p>2.将这个方程主元的系数化为 $1$。</p></li><li><p>3.通过加减消元，消掉其它方程中的这个未知数。</p></li><li><p>4.重复以上步骤，直到把每一行都变成只有一项有系数。</p></li></ul><h3 id="高斯消元做法"><a href="#高斯消元做法" class="headerlink" title="高斯消元做法"></a>高斯消元做法</h3><p>先消一个元 例如 $x$</p><p>$1$ 式 $\times a_2$ — $2$ 式 $\times a_1$</p><p>$1$ 式 $\times a_3$ — $3$ 式 $\times a_1$</p><p>消去了$x$，并且成为二元二次方程再将 $2$ 式和 $3$ 式的 $y$ 消去，可以求出 $z$。将 $z$ 回代 $2$ 式，求出 $y$。将 $z$，$y$ 回带 $1$ 式，求出 $x$。</p><p><a href="https://www.luogu.com.cn/problem/P3389#submit">P3389 【模板】高斯消元法</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快读 </span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">double</span> a_a<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  n<span class="token operator">=</span><span class="token function">r_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m_a<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//初值，线性，到这个编号 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//找这一列（这个元绝对值最小的系数）中最小的值 </span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">fabs</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m_a<span class="token operator">=</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>m_a<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换这两列 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//若最小值是 0 无解 </span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"No Solution"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">double</span> l_l<span class="token operator">=</span>a_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//每个方程的这一列（这个元）的倍数 </span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//消去这个元 </span>        a_a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-=</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>l_l<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//方程中只有对角线还有数，每个数只出现了一次。</span>            <span class="token comment">//可以看成 n 个一元一次方程 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">/</span>a_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求解输出 </span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 高斯消元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大神集</title>
      <link href="/2021/08/09/da-shen-ji/"/>
      <url>/2021/08/09/da-shen-ji/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e3ffe401b95db55761b5dbe135ec08b3ac830b4643482a03796ff091f60e1f76">6c9ff7be93430635dfccb11d8387492f8b7a0335cb308c3a3b8fdf7a41a490cf2b26883134a46399ec72dea4857c1e8e7d8b2ee0113957df4eba29098411aeef81616b4a361143f03d9eae018e44389f10196fe5c5aab039bec542dba23aa7d8f7c3cfafc9deb1bad225af809dd89ecbd1187b39617d9a9cab5bd9293e298ab6ea90e9ba1cd0c507f299c31770810099e6a9680c1efc7b5cb65ca9e4fa324dba971ed15e86fce54a6e03d82961f48bff0cfd4981ba044421e9e067a8c3652d47939c3d7e7a532d525f7168ea04b64b89dedcebb7ba643bd35ea1dd8929b4212218e0381555adac51a666a48a3fa6e78fa94761650aa44ef02667bf3ab2fbd9271f22f45bb22b00748458e2bcda41159a3a69029f81439b52a42481ac86431af8b9795d078a97965603e6e9881c630c67ff116be974eab6094a2a1f722496310335fc9ad6fa3960ac53de538629912dc990cc025e24c88bc3cee646192cae32b7545451f35a9b0bba997050b2ffaf6f65325b95b85345b66a42728991157c2d06a9f4e0cba6dba30ed13e02f9ffbf36eb37cf428c757718d6cc7db3b355f813102e228269400713ca15f7ab3751a929168b8ccb00eb7e01ec2b8b1cb3d4e22a68e267d06bf17eba0da48d4be6d829e941534a242c8584a9b7c7845dcf8d350ee245235de01276e4e6a508dce90a201cc58c4e557f72c12b8de23b09e02c8cc38112375b207754c9ddc3e264431a4aadb26984b5eec1fc5f07aed4b08355cf3f9052f0e91d56e99c4f31db11e20f1647ddf42acc532c8bf73b2834c66ddd28e99a1f9395c20c4ed205efe140adbb8da0feb8de12a884c87ae5c6a9c021f1e98e52dee32a4b84efcdbf6d2b68dc9f5f8065fa8630817972f35f6559abe63a74e849065621e328e59c23e0928b65812da88aa75a6bf7b659af4ae01dc8a925887b7e1c6f5de2f6a308fe059a9981f37bf6b0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建中。。。</title>
      <link href="/2021/08/09/da-jian-bo-ke/"/>
      <url>/2021/08/09/da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>搭建博客中。。。</p><p><a href="https://tool.oschina.net/encrypt?type=2">密码</a></p><p><a href="https://www.cnblogs.com/guixinchn/p/13542439.html">标签</a></p><p><a href="https://blog.csdn.net/tianjuewudi/article/details/112504019">音乐播放器的使用</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery">matery主题搭建</a></p><p><a href="https://blog.csdn.net/cungudafa/article/details/106278206">banner轮播</a></p><p><a href="https://www.jianshu.com/p/86d4e3502e46">Markdown</a></p><p><a href="https://blog.csdn.net/qq_37375427/article/details/92198332">更多Markdown</a></p><p><a href="https://taodaling.github.io/blog/2019/08/23/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%E8%BF%90%E7%AE%97/#heading-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BC%98%E5%8C%96-bitset">二进制位运算</a></p><p><a href="https://www.cnblogs.com/hualian/p/11176572.html">【常用算法总结——C++高精度运算】</a></p><p><a href="https://www.cnblogs.com/TFLS-gzr/p/10851991.html">【NOIP必备攻略】 基本noilinux使用方法</a></p><p><a href="https://blog.csdn.net/qq_32811489/article/details/53362996">windows.h 详解</a></p><p><a href="https://www.cnblogs.com/skyus/articles/8524408.html">c++的常用库(用处不大)</a></p><p><a href="https://www.cnblogs.com/Decisive/p/11803746.html">ACM算法模板整理&amp;&amp;史诗级ACM模板整理</a></p><p><a href="https://www.cnblogs.com/St-Lovaer/p/11504899.html">光速幂和矩阵光速幂</a></p><p><a href="https://www.cnblogs.com/RabbitHu/p/BIT.html">高级树状数组——区间修改区间查询、二维树状数组</a></p><p><a href="https://www.cnblogs.com/AC-King/p/7789013.html">线段树(相对详细)</a></p><p><a href="https://blog.csdn.net/zearot/article/details/52280189">线段树从零开始</a></p><p><a href="https://csacademy.com/app/graph_editor/">无向神奇图</a></p><p><a href="https://www.cnblogs.com/ac-evil/p/11755354.html">平衡树详解</a></p><p><a href="https://blog.csdn.net/lemonoil/article/details/54405613">对六种平衡树的研究与探索【全面】</a></p><p><a href="https://blog.csdn.net/weixin_43914593/article/details/109709506">树链剖分</a></p><p><a href="https://hammyhome.com/">仓鼠之家</a></p><p><a href="http://lab.mkblog.cn/">奇怪之家</a></p><p><a href="https://www.cnblogs.com/ljy-endl/p/11595161.html">割点割边</a></p><p><a href="https://zhangshuqiao.org/2018-07/%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E6%B7%BB%E5%8A%A0Live2D%E7%9C%8B%E6%9D%BF%E5%A8%98/">看板娘</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
